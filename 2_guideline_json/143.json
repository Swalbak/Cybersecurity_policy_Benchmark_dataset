{
    "number": 143,
    "label": 2,
    "source": "NIST",
    "subject": "Recommendation for Key Establishment Using Symmetric Block Ciphers",
    "document(english)": "Draft NIST SP 800-71, Recommendation for Key Establishment Using Symmetric Block Ciphers  Draft NIST Special Publication 800-71  Recommendation for Key Establishment  Using Symmetric Block Ciphers  Elaine Barker  William C. Barker  C  O  M  P  U  T  E  R  S  E  C  U  R  I  T  Y  Draft NIST Special Publication 800-71  Recommendation for Key Establishment  Using Symmetric Block Ciphers  Elaine Barker  Computer Security Division  Information Technology Laboratory  William C. Barker  Dakota Consulting, Inc.  June 2018  U.S. Department of Commerce  Wilbur L. Ross, Jr., Secretary  National Institute of Standards and Technology  Walter Copan, NIST Director and Under Secretary of Commerce for Standards and Technology  1  Authority 2  This publication has been developed by the National Institute of Standards and Technology (NIST) in accordance 3  with its statutory responsibilities under the Federal Information Security Modernization Act (FISMA) of 2014, 4  44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283. NIST is responsible for developing information security 5  standards and guidelines, including minimum requirements for federal information systems, but such standards 6  and guidelines shall not apply to national security systems without the express approval of appropriate federal 7  officials exercising policy authority over such systems. This guideline is consistent with the requirements of the 8  Office of Management and Budget (OMB) Circular A-130. 9  Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and 10  binding on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines 11  be interpreted as altering or superseding the existing authorities of the Secretary of Commerce, Director of the 12  OMB, or any other federal official.  This publication may be used by nongovernmental organizations on a 13  voluntary basis and is not subject to copyright in the United States. Attribution would, however, be appreciated 14  by NIST.  15  National Institute of Standards and Technology Special Publication 800-71 16  Natl. Inst. Stand. Technol. Spec. Publ. 800-71, 90 pages (June 2018) 17  CODEN: NSPUE2 18  Certain commercial entities, equipment, or materials may be identified in this document in order to describe an 19  experimental procedure or concept adequately. Such identification is not intended to imply recommendation or 20  endorsement by NIST, nor is it intended to imply that the entities, materials, or equipment are necessarily the best 21  available for the purpose.  22  There may be references in this publication to other publications currently under development by NIST in accordance 23  with its assigned statutory responsibilities. The information in this publication, including concepts and methodologies, 24  may be used by federal agencies even before the completion of such companion publications. Thus, until each 25  publication is completed, current requirements, guidelines, and procedures, where they exist, remain operative. For 26  planning and transition purposes, federal agencies may wish to closely follow the development of these new 27  publications by NIST.  28  Organizations are encouraged to review all draft publications during public comment periods and provide feedback to 29  NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at 30  https://csrc.nist.gov/publications. 31  32  Public comment period: July 2, 2018 through September 28, 2018 33  34  National Institute of Standards and Technology 35  Attn: Computer Security Division, Information Technology Laboratory 36  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 37  Email: SP_800-71@nist.gov 38  39  All comments are subject to release under the Freedom of Information Act (FOIA)  40  41  https://csrc.nist.gov/publications  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  ii  Reports on Computer Systems Technology 42  43  The Information Technology Laboratory (ITL) at the National Institute of Standards and 44  Technology (NIST) promotes the U.S. economy and public welfare by providing technical 45  leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test 46  methods, reference data, proof of concept implementations, and technical analyses to advance the 47  development and productive use of information technology. ITL’s responsibilities include the 48  development of management, administrative, technical, and physical standards and guidelines for 49  the cost-effective security and privacy of other than national security-related information in 50  Federal information systems. The Special Publication 800-series reports on ITL’s research, 51  guidelines, and outreach efforts in information system security, and its collaborative activities with 52  industry, government, and academic organizations. 53  Abstract 54  This recommendation addresses the protection of symmetric keying material during a key 55  establishment that uses symmetric-key cryptography for key distribution. The objective is to provide 56  recommendations for reducing exposure to the unauthorized disclosure of the keying material and 57  detecting its unauthorized modification, substitution, insertion or deletion.  The Recommendation 58  also addresses recovery in the event of detectable errors during the key-distribution process.  59  Wrapping mechanisms are specified for encrypting keys, binding key control information to the keys 60  and protecting the integrity of this information.  61  62  Keywords 63  64  algorithm; authentication; block cipher; key distribution; key establishment; key generation; key 65  management; key translation; key wrapping; message authentication code; symmetric key 66  67  Acknowledgements 68  The National Institute of Standards and Technology (NIST) gratefully acknowledges and 69  appreciates contributions by their colleagues at NIST and the members of the ASC X9 working 70  group that developed the standards upon which this Recommendation is based: American National 71  Standard (ANS) X9.17, Financial Institution Key Management (Wholesale), and ANS X9.28, 72  Financial Institution Multiple Center Key Management (Wholesale). 73  74  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  iii  NOTE FOR REVIEWERS 75  This document, SP 800-71, addresses the use of symmetric block ciphers as key-establishment 76  mechanisms.  77  The authors acknowledge that most current key-management systems are based on asymmetric 78  cryptography (e.g., a Public Key Infrastructure).  However, concerns associated with the projected 79  consequences of emerging quantum computing technology for the security of existing asymmetric 80  algorithms (see NISTIR 81051) suggest a potential for some organizations to reconsider and, on a 81  case-by-case basis, reverting to key establishment based on symmetric cryptography.  Given the 82  currently limited nature of guidance on the topic, it seems prudent to describe symmetric key-83  establishment techniques and security considerations.  84  Symmetric-key-based key establishment may also be implemented beneath an asymmetric-key- 85  based structure to establish symmetric keys in a hierarchy after the top-most key in the hierarchy 86  has been established using asymmetric key-establishment techniques.  87  Reviewers are encouraged to provide comments on any aspect of this special publication. Of 88  particular interest are comments on the understandability and usability of the guideline. Your 89  feedback during the public comment period is essential to the document development process and 90  is greatly appreciated. 91  92  1 Report on Post-Quantum Cryptography.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  iv  93  Executive Summary 94  Symmetric-key cryptography requires all originators and consumers of specific information secured 95  by symmetric functions to share a secret key. This is in contrast to asymmetric-key, or public key, 96  cryptography that requires only one party participating in a transaction to know a private key and 97  permits the other party or parties to know the corresponding public key. Symmetric-key 98  cryptography is generally much more computationally efficient than public key cryptography, so it 99  is most commonly used to protect larger volumes of information such as the confidentiality of data 100  in transit and in storage. Asymmetric cryptography is more commonly used for the establishment of 101  an initial symmetric key using key-agreement or key-transport techniques. There are circumstances 102  however, such as the discovery or emergence of serious vulnerabilities of common public key 103  algorithms to technological attacks, that may motivate individuals and organizations to use 104  symmetric-key cryptography for source authentication, data integrity and key-establishment 105  purposes.  106  This Recommendation addresses the protection of symmetric keying material during key 107  establishment using symmetric-key algorithms. The objective is to reduce the potential for 108  unauthorized disclosure of the keying material and enable the detection of unauthorized 109  modification, substitution, insertion and deletion of that keying material. The Recommendation also 110  addresses recovery in the event of detectable errors during the key-establishment process.  111  Several key-establishment architectures are described.  These include:  112  • Key establishment among communicating groups that share a key-wrapping key,  113  • The distribution of keys by key generation and distribution centers to their subscribers,  114  • The use of translation centers for the protected distribution of keys generated by one subscriber 115  for distribution to one or more other subscribers, and  116  • Multiple-center-based environments for key establishment between or among organizational 117  domains. 118  The Recommendation does not specify protocols for key establishment (e.g., Kerberos, S/MIME, 119  and DSKPP).  It does, however, suggest key-establishment communication options and transaction 120  content that should be accommodated by key-establishment protocols. 121  This Recommendation covers both the manual and automated management of symmetric keying 122  material for the federal government using symmetric-key techniques.  The Recommendation 123  should be used in conjunction with the SP 800-572 series of documents and SP 800-1523 for the 124  management of keying material, including: 125  • Control during the life of the keying material to prevent unauthorized disclosure, 126  modification or substitution; 127  2 SP 800-57: Recommendation for Key Management, Part 1: General, Part 2: Best Practices for Key Management,  and Part 3: Application-Specific Key Management Guidance.  3 SP 800-152: A Profile for U.S. Federal Cryptographic Key Management Systems (CKMS).  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  v  • Establishing communicating groups; 128  • Secure distribution of keying material to permit interoperability among communicating 129  groups; 130  • Ensuring the integrity of keying material during all phases of its life, including its 131  establishment (which includes generation and distribution), storage, entry, use, and 132  destruction;  133  • Recovery in the event of a failure of the key-establishment process or when the integrity 134  of the keying material is in question; and  135  • Auditing the key-management processes. 136  Important considerations that apply to the selection of a key-management approach include: 137  • The exposure of a key by any entity having access to that key compromises all data 138  protected by that key; 139  • The more entities that share a key, the greater the probability of exposure of that key to 140  unauthorized entities; 141  • The longer that a key is used, the greater the chance that it will become known by 142  unauthorized parties during its use; 143  • The greater the amount of data that is protected by the key, the greater the amount of data 144  that is exposed if the key is compromised; 145  • It is essential that the source of a secret or private key is trustworthy, and that a secure 146  channel be used for key distribution; and 147  • The key used to initiate a keying relationship must be obtained through a secure channel, 148  often using an out-of-band process. 149  This Recommendation provides general guidance for the establishment of symmetric keys.  It is 150  intended to be a general framework within which system-specific protocols may be applied. Public 151  key cryptography is mentioned only as an alternative method for establishing an initial keying 152  relationship for a communicating group.  153  154  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  vi  TABLE OF CONTENTS 155  EXECUTIVE SUMMARY IV 156  1. INTRODUCTION 1 157  1.1 Scope 2 158  1.2 Content and Organization 3 159  2. DEFINITIONS AND COMMON ABBREVIATIONS 4 160  2.1 Definitions 4 161  2.2 Common Abbreviations 12 162  3. SYMMETRIC-KEY-MANAGEMENT FUNDAMENTALS 13 163  3.1 Uses of Symmetric Keys 13 164  3.2 Application Considerations 14 165  3.3 Symmetric Algorithm and Key Types 17 166  3.4 Key Distribution Using Symmetric-Key Techniques 18 167  3.4.1 Manual Distribution 19 168  3.4.2 Automated Distribution 20 169  3.5 Key Hierarchies 20 170  3.5.1 Storage Applications 22 171  3.5.2  Communicating Groups 23 172  3.5.3 Key-Establishment Transactions 23 173  4. KEY MANAGEMENT ARCHITECTURES FOR SYMMETRIC KEYS 25 174  4.1 Center-based Key Establishment Architectures 25 175  4.1.1 Key Distribution Centers (KDCs) 26 176  4.1.2 Key Translation Centers (KTCs) 29 177  4.1.3 Multiple-Center Architectures 31 178  4.2 Communicating Groups 37 179  4.2.1 Establishing Communicating Groups 37 180  4.2.1 Communicating Group Requirements 38 181  4.2.3 Subsequent Key Distribution within a Communicating Group 39 182  5. KEY-ESTABLISHMENT COMMUNICATIONS 40 183  5.1 General Communications Requirements 40 184  5.2  Notation 41 185  5.3 Message Content and Handling 41 186  5.3.1 Key Generation Request 42 187  5.3.2 Key Transfers 43 188  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  vii  5.3.3 Translation Requests 43 189  5.3.4 Revocation Request 44 190  5.3.5 Revocation Confirmation 45 191  5.3.6 Acknowledgements 45 192  5.3.7 Error Reports 46 193  5.4 Authentication Codes in Key-Establishment Messages 46 194  5.5 Revocation and Destruction 47 195  APPENDIX A: EXAMPLE SCENARIOS 48 196  A.1 Communicating Group Key Transfer 48 197  A.2 Using a KDC to Distribute Keys to a Communicating Group 49 198  A.3 Using a KDC to Establish a Communicating Group 55 199  A.4 Using a KTC to Establish a Communicating Group 59 200  A.5 Using a Multiple-Center Group to Generate a Key for Establishing a Communicating Group 61 201  A.6 Using a Multiple-Center Group to Establish a Communicating Group Only Using its Key-202  Translation Services 65 203  A.7 Forwarding Keys Through an Intermediate Entity 69 204  A.8 Requesting Key Revocation and Confirmation 72 205  A.8.1 Example 1 72 206  A.8.2 Example 2 75 207  APPENDIX B: REFERENCES 78 208  209  210  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  1  442  1. Introduction 443  Symmetric-key cryptography employs cryptographic algorithms that require both the sending and 444  receiving parties to protect communications using the same secret key. This is distinct from 445  asymmetric-key (i.e., public key) cryptography in which the parties have pairs of keys − a private 446  key known only to the key pair owner, and a public key that may be known by anyone. Section 3 447  of SP 800-175B4 discusses the use of these two algorithm types, including the pros and cons of 448  each, namely that: 449  • Symmetric-key cryptography is generally much less computationally intensive than 450  asymmetric-key cryptography.  451  • Digital signatures generated using asymmetric-key algorithms provide better source 452  authentication properties than can be provided by symmetric-key algorithms. 453  • The number of keys required to initiate and maintain cryptographic keying relationships is 454  much higher for symmetric-key cryptography than for asymmetric-key cryptography. 455  As a result of these characteristics, recent key-management schemes have used symmetric-key 456  cryptography for the encryption and integrity protection of data-at-rest and data-in-transit (i.e., 457  stored or communicated data), and asymmetric-key cryptography to establish the symmetric keys 458  for data-in-transit and for source authentication and integrity protection using digital signatures.5 459  Recent concerns associated with the projected consequences of emerging quantum-computing 460  technology for the security of existing asymmetric algorithms (see NISTIR 81056) suggest a 461  potential federal government requirement for the reconsideration of, and possible reversion to, the 462  use of symmetric-key cryptography. Keys protected using currently approved asymmetric-key 463  algorithms7 can, therefore, be expected to become known by adversaries once quantum computers 464  become available. In contrast, the impact on symmetric-key algorithms will not be as drastic; 465  doubling the size of the key will be sufficient to preserve security. Symmetric-key algorithms and 466  hash functions with sufficiently large output should be usable in a quantum era. 467  Research is in progress to develop quantum-resistant asymmetric-key algorithms. 8 However, 468  replacing the currently used asymmetric-key algorithms with quantum-resistant asymmetric-key 469  algorithms can be expected to not really begin until about 2020 and not be completed until the 470  2030s.  471  Where the security of information is very important, and the security of information currently 472  being protected by asymmetric-key algorithms needs to be maintained for more than a few years, 473  4 NIST SP 800-175B, Guideline for Using Cryptographic Standards in the Federal Government: Cryptographic  Mechanisms, August 2016.  5 Note that symmetric key management is used in some applications such as over-the-air rekeying of digital radios.  See Section 7 of SP 800-57 Part 3, Recommendation for Key Management Part 3: Application-Specific Key  Management Guidance and Kerberos.  6 NISTIR 8105, Report on Post-Quantum Cryptography, April 2016.  7 Algorithms based on the use of difficult problems such as integer factorization, discrete logarithms, and elliptic- curve discrete-logarithms.  8 See https://csrc.nist.gov/Projects/Post-Quantum-Cryptography.  https://csrc.nist.gov/Projects/Post-Quantum-Cryptography  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  2  moving away from the protection of symmetric keys by asymmetric-key algorithms should be 474  initiated as soon as practical. The protection of symmetric keys using symmetric key-wrapping 475  schemes and replacing asymmetric digital signature schemes with symmetric-key message 476  authentication schemes is one approach to replacing public key cryptographic key management in 477  the relatively near term. 478  The subject of this Recommendation is the set of security considerations associated with the use of 479  symmetric-key algorithms for key establishment. It addresses the protection of symmetric keying 480  material during key establishment to prevent unauthorized disclosure of the keying material and to 481  detect unauthorized modification, insertion and deletion.  This Recommendation also addresses the 482  recovery of keys in the event of detectable errors during the key-establishment process.  Several 483  high-level key-establishment strategies are presented.  484  While specific protocols (e.g., Kerberos 9, S/MIME, 10 and DSKPP 11) are not specified in this 485  Recommendation, this document does suggest key-establishment transaction content and options 486  that should be accommodated by key-establishment protocols. A minimum set of requirements for 487  constructing an audit trail of the key establishment process is provided in SP 800-152.  488  Note that conformance to this Recommendation does not guarantee security.  Because the 489  Recommendation is protocol-independent, the specific protocol employed for key-establishment 490  purposes needs to be analyzed for adequacy within the context of an organization’s security goals.  491  Several key-establishment approaches are described in this document.  Although the strategies 492  described include several key-establishment environments, the Recommendation does not 493  preclude the use of other symmetric-key management approaches. 494  1.1 Scope 495  Although this Recommendation describes the automated disribution of symmetric keying material 496  using symmetric-key techniques in automated environments, manual distribution is discussed as 497  well.  498  This Recommendation focuses primarily on strategies for the management of keys prior to their 499  use for protecting data communications. However, the Recommendation, in conjunction with the 500  SP 800-57 series of documents and SP 800-152 contain the minimum requirements for the 501  management of keying material throughout its lifecycle, including: 502  • Control during the life of the keying material to prevent unauthorized disclosure, 503  modification or substitution; 504  • Establishing communicating groups; 505  • The secure distribution of keying material to permit interoperability among communicating 506  groups; 507  9 See Section 6 of SP 800-57 Part 3, Recommendation for Key Management Part 3: Application-Specific Key  Management Guidance.  10 S/MIME: Secure Multipurpose Internet Mail Extensions.  11 DSKPP: Dynamic Symmetric Key Provisioning Protocol.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  3  • Ensuring the integrity of keying material during all phases of its life, including its 508  establishment (which includes generation and distribution), storage, entry, use, and 509  destruction;  510  • Recovery in the event of a failure of the key-establishment process or when the integrity 511  of the keying material is in question; and  512  • Auditing the key-management processes. 513  The scope of this document encompasses the use of only symmetric-key block-cipher algorithms 514  (e.g., FIPS 19712) and algorithms used to generate Message Authentication Codes (MACs) using 515  either block-cipher algorithms or using hash functions (e.g., FIPS 180-413 and FIPS 20214).  The 516  use of asymmetric-key (i.e., public-key) techniques for key establishment is mentioned only as an 517  alternative method for establishing an initial keying relationship. 518  1.2 Content and Organization 519  The remainder of this Recommendation is organized as follows: 520  Section 2 provides definitions and common abbreviations.  521  Section 3 provides general symmetric key-management fundamentals, including uses for 522  symmetric keys, some application considerations, symmetric algorithms and key types, key-523  distribution using symmetric-key techniques, and a discussion of key hierarchies for storage and 524  communications applications.  525  Section 4 describes general architectural considerations for the establishment of symmetric keys −  526  both center-based key establishment and key establishment among communicating groups.  527  Section 5 discusses key-establishment communications, including general communication 528  requirements, key names and key labels, message content and handling, authentication codes in 529  key-establishment messages and key revocation and destruction.  530  Appendix A contains example scenarios, and Appendix B lists document references.  531  12 FIPS 197, Advanced Encryption Standard (AES), November 26, 2001.  13  FIPS 180-4, Secure Hash Standard (SHS), March 2012.  14 FIPS 202, SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions, August 4, 2015.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  4  2. Definitions and Common Abbreviations 532  2.1 Definitions 533  Acknowledgement  information  Information sent to acknowledge the receipt of a communication  without errors.  Advanced Encryption  Standard  The encryption algorithm specified by FIPS 197, Advanced  Encryption Standard.  Agent See multiple-center agent.  Approved FIPS-approved or NIST-recommended. An algorithm or  technique that is either 1) specified in a FIPS or NIST  Recommendation, or 2) specified elsewhere and adopted by  reference in a FIPS or NIST Recommendation.  Asymmetric-key algorithm A cryptographic algorithm that uses two related keys, a public  key and a private key. The two keys have the property that  determining the private key from the public key is  computationally infeasible. Also known as a public-key  algorithm.  Asymmetric-key  cryptography  Cryptography that uses pairs of keys: public keys that may be  widely disseminated and private keys that are authorized for use  only by the owner of the key pair and known only by the owner  and possibly a trusted party that generated them for the owner.  Authenticated data Data that is accompanied by a valid message authentication code  that is used to verify its source and that the data is identical to that  for which the message authentication code was computed.  Authenticated encryption  keys (AEKs)  Keys used to provide both confidentiality and integrity protection  for the target data using the same key. Block cipher modes for  using AEKs are specified in SP 800-38C15 and SP 800-38D.16  Authentication A process that provides assurance of the source and integrity of  information that is communicated or stored.  Authentication algorithm A cryptographic function that is parameterized by a symmetric  key.  The algorithm acts on input data (called a “message”) of  variable length to produce an output value of a specified length.  15 SP 800-38C, Recommendation for Block Cipher Modes of Operation: the CCM Mode for Authentication and  Confidentiality.  16 SP 800-38D, Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  5  The output value is called the message authentication code  (MAC) of the input message.  Authentication key A symmetric key used to generate a message authentication code  on a message.  See Data Authentication Key (DAK).  Authenticity The property of being genuine, verifiable and trusted; confidence  in the validity of a transmission, a message, or message  originator.  Automated Using an electronic method rather than a manual method. In most  cases, no human intervention is required.  Automated key  establishment  The process by which cryptographic keys are securely distributed  among cryptographic modules using automated methods (e.g.,  key transport and/or key agreement protocols).  Bi-directional  (communications)  As used in this Recommendation, the same symmetric key can be  used for both protecting (e.g., encrypting) sensitive data to be sent  to one or more other entities and for processing (e.g., decrypting)  protected data received from other entities sharing the key.  Contrast with uni-directional (communications).  Block cipher A symmetric-key cryptographic algorithm that transforms one  block of information at a time using a cryptographic key. For a  block cipher algorithm, the length of the input block is the same  as the length of the output block.  Checksum A value that (a) is computed by a function that is dependent on  the contents of a data object and (b) is stored or transmitted  together with the object, for detecting changes in the data.  Ciphertext Data in its encrypted form.  Cloud computing facility A facility that provides ubiquitous, convenient, on-demand  network access to a shared pool of configurable computing  resources (e.g., networks, servers, storage, applications, and  services) that can be rapidly provisioned and released with  minimal management effort or service provider interaction.  Compromise The unauthorized disclosure, modification or use of sensitive data  (e.g., keying material and other security-related information).  Confidentiality The property that sensitive information is not disclosed to  unauthorized individuals, entities, or processes.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  6  Communicating group Two or more logical entities that exchange data using a set of  common keying material. Each communicating group has  different keying material. An entity and a center participating in  a key-establishment transaction do not constitute a  communicating group.  Cryptographic key (Key) A parameter used in conjunction with a cryptographic algorithm  that determines its operation in such a way that an entity with  knowledge of the key can reproduce or reverse the operation,  while an entity without knowledge of the key cannot. Examples  include:  1) The transformation from plaintext to ciphertext and vice  versa for a given cryptographic algorithm, or  2) The Message Authentication Code for given data and  cryptographic algorithm.  Cryptoperiod The time span during which a specific key is authorized for use  or in which the keys for a given system may remain in effect.  Data Authentication Key  (DAK)  A key used for the computation of MACs in order to provide  assurance of content integrity and (some level of) source  authentication for cryptographically protected information.  Data Encrypting Key  (DEK)  A key used for the encryption of data.  Data Key (DK) A key used to encrypt and decrypt data, or to authenticate data.  Decryption The process of transforming ciphertext into plaintext using a  cryptographic algorithm and key.  Encryption A process of transforming plaintext into ciphertext using a  cryptographic algorithm and key.  Entity An individual (person), organization, device, or process.  Error report information The information in a message that reports the error that was found  in a previously received message.  Hash function A function that maps a bit string of arbitrary length to a fixed- length bit string. Approved hash functions satisfy the following  properties:  1. (One-way) It is computationally infeasible to find any input  that maps to any pre-specified output, and  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  7  2. (Collision resistant) It is computationally infeasible to find  any two distinct inputs that map to the same output.  Impact level The magnitude of harm that can be expected to result from the  consequences of unauthorized disclosure of information,  unauthorized modification of information, unauthorized  destruction of information, or loss of information or information  system availability.  Internet Engineering Task  Force (IETF)  A large, open international community of network designers,  operators, vendors, and researchers concerned with the evolution  of the Internet architecture and the smooth operation of the  Internet.  Initialization vector (IV) A vector used in defining the starting point of a cryptographic  process.  Key See Cryptographic key.  Key agreement A key-establishment procedure where the resultant keying  material is a function of information contributed by two or more  participants, so that an entity cannot predetermine the resulting  value of the keying material independently of any other entity’s  contribution.  Key Derivation Key  (KDK)  Keys used to derive DEKs, DAKs, AEKs. and other KDKs  Symmetric-key methods for key derivation are specified in SP  800-108.17 KDKs are not used to derive KWKs.  Key Distribution Center  (KDC)  Used to generate and distribute keys to entities that need to  communicate with each other but may not share keys except with  the center.  Key establishment The process by which a key is securely shared between two or  more entities, either by transporting a key from one entity to  another (key transport) or deriving a key from information  contributed by the entities (key agreement).  Key-establishment  transaction  An instance of establishing secret keying material among entities.  A transaction will require multiple protocol messages between  two or more entities.  17 SP 800-108, Recommendation for Key Derivation Using Pseudorandom Functions.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  8  Key-generation request  information  Information necessary to request the generation of cryptographic  keys.  Key management The activities involving the handling of cryptographic keys and  other related security parameters (e.g., IVs) during the entire life  cycle of the keys, including their generation, storage,  establishment, entry and output, and destruction.  Keying material The data (e.g., keys and IVs) necessary to establish and maintain  cryptographic keying relationships.  Keying relationship The state existing between entities when they share at least one  symmetric key.  Key-transfer information Information used to distribute one or more keys to a recipient.  Key Translation Center  (KTC)  Used to unwrap keying material sent by one subscriber using a  key-wrapping key shared with that subscriber, and to rewrap the  same keying material using a different key-wrapping key shared  with a different subscriber.  Key transport A manual or automated key-establishment procedure whereby  one entity (the sender) selects and distributes the key to another  entity (the receiver).  Key type As used in this Recommendation, a key categorized by its  properties and uses: key-wrapping key, data authentication key,  data encryption key or key-derivation key.  Key unwrapping A method of removing the cryptographic protection on keys that  was applied using a symmetric-key algorithm and key-wrapping  key.  Key wrapping A method of cryptographically protecting keys that provides both  confidentiality and integrity protection for the wrapped keying  material using a symmetric-key algorithm and a key-wrapping  key.  Key Wrapping Key  (KWK)  A key used exclusively to wrap and unwrap (e.g., encrypt, decrypt  and integrity protect) other keys.  Layer 1 key The top-most layer in a (possible) hierarchy of keys of a keying  relationship.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  9  Manual distribution A non-automated means of transporting cryptographic keys by  physically moving a device or document containing the keying  material.  Master/recipient  relationship  As used in this Recommendation, one (or more) members of a  communicating group (i.e., masters) are allowed to generate  keying material and distribute it to all other members of the  group, while other members (i.e., recipients) are only allowed to  receive keying material. Contrast with a peer relationship.  Message The information transferred from one entity to another using  communication protocols. This Recommendation identifies  information to be included in a message but does not specify the  format of that message.  Message Authentication  Code (MAC)  A cryptographic checksum on data that uses a symmetric key to  detect both accidental and intentional modifications of data.  Mode (of operation) A set of rules for operating on data with a cryptographic algorithm  and a key; often includes feeding all or part of the output of the  algorithm back into the input of the next iteration of the  algorithm, either with or without additional data being processed.  Multicast transmission A transmission that communicates a set of information from one  sender to multiple recipients simultaneously.  Multiparty control A process that uses two or more separate entities (usually  persons) operating in concert to protect sensitive functions or  information. No single entity is able to access or use the materials,  e.g., cryptographic keys.  Multiple-center agent A center within a multiple-center group through which a  subscriber obtains multiple-center key-establishment services.  Multiple-center group A set of two or more centers that have agreed to work together to  provide cryptographic keying services to their subscribers.  Party Any entity, center or multiple-center agent.  Peer relationship As used in this Recommendation, all members of a  communicating group are allowed to generate or otherwise obtain  keying material for distribution to the other members of the  group. Contrast with a master/recipient relationship.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  10  Protocol A special set of rules used by two or more communicating entities  that describe the message order and data structures for  information exchanged between the entities.  Public key cryptography See asymmetric-key cryptography.  Plaintext Unencrypted (unenciphered) data.  Recipient The entity that receives a communication.  Revocation As used in this Recommendation, the process of permanently  terminating the valid use of a key to apply cryptographic  protection (e.g., wrap keying material, encrypt data or generate a  MAC).  Revocation-confirmation  information  Information provided to confirm that keying material has been  destroyed as requested.  Revocation-request  information  Information indicating the keys to be revoked and destroyed.  Secure channel As used in this Recommendation, a path for transferring data  between two entities or components that ensures confidentiality,  integrity and replay protection, as well as mutual authentication  between the entities or components. The secure channel may be  provided using cryptographic, physical or procedural methods, or  a combination thereof.  Security strength A number associated with the amount of work (that is, the number  of operations) that is required to break a cryptographic algorithm  or system.  Shall This term is used to indicate a requirement of a Federal  Information Processing Standard (FIPS) or a requirement that  must be fulfilled to claim conformance to this Recommendation.  Note that shall may be coupled with not to become shall not.  Should This term is used to indicate an important recommendation.  Ignoring the recommendation could result in undesirable results.  Note that should may be coupled with not to become should not.  Source authentication A process that provides assurance of the source of information.  Split knowledge A process by which a cryptographic key is split into n key  components, each of which provides no knowledge of the original  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  11  key. The components can be subsequently combined to recreate  the original cryptographic key.  Subscriber An entity that has a keying relationship with a center or agent of  a multiple-center group.  Symmetric key A single cryptographic key that is used with a symmetric-key  algorithm.  Symmetric-key algorithm A cryptographic algorithm that uses a single secret key for a  cryptographic operation and its complement (e.g., encryption and  decryption).  Symmetric-key  cryptography  Cryptography that uses the same key for both applying  cryptographic protection (e.g., encryption or computing a MAC)  and removing or verifying that protection (e.g., decryption or  verifying a MAC).  Target data As used in this Recommendation, data, other than keys, that are  afforded cryptographic protection.  Time-variant parameter A time-varying value that has (at most) an acceptably small  chance of repeating (where the meaning of “acceptably small”  may be application specific).  Transaction See Key-establishment transaction.  Transaction-authentication  key  A key generated specifically for the key-establishment  transaction that is used to generate message authentication codes  for the protocol messages in that transaction.  Translation The process performed by a center to unwrap keying material  received from a sending entity (a subscriber or a center in a  multiple-center group) using a key-wrapping key shared with that  entity and then rewrapping the same keying material using a  different key-wrapping key shared with the next recipient of the  wrapped keying material (a different subscriber or a different  center in the multiple-center group).  Translation-request  information  Information provided to a center to request the translation of  keying material contained in the request for a subscriber.  Uni-directional  (communications)  As used in this Recommendation, a different symmetric key is  always required for cryptographically protecting (e.g.,  encrypting) sensitive data to be sent to another entity than is  required when processing (e.g., decrypting) cryptographically  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  12  protected data that is received from that other entity. Contrast  with bi-directional (communications).  Wrapping See Key wrapping  2.2 Common Abbreviations 534  This section contains abbreviations used in this Recommendation. 535  AEK Authenticated Encryption Key.  AES Advanced Encryption Standard.  DAK Data Authentication Key.  DEK Data Encrypting Key.  DK Data Key.  FIPS Federal Information Processing Standard.  KDC Key Distribution Center.  KDK Key Derivation Key.  KWK Key Wrapping Key.  KTC Key Translation Center.  MAC Message Authentication Code.  NIST National Institute of Standards and Technology.  NISTIR NIST Internal or Interagency Report.  SP Special Publication.  536  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  13  3. Symmetric-Key-Management Fundamentals 537  Symmetric-key algorithms (sometimes called secret-key algorithms) use a single key to both apply 538  cryptographic protection and to remove or check the protection. For example, the key used to 539  encrypt data (i.e., apply protection) is also used to decrypt the encrypted data (i.e., remove the 540  protection); in the case of encryption, the original data is called the plaintext, while the encrypted 541  form of the data is called the ciphertext. The key must be kept secret if the data is to remain 542  protected.  543  The goals of symmetric-key management are 1) to provide keys and related cryptographic 544  variables (e.g., initialization vectors (IVs)) where they are needed and 2) to keep keys secret. The 545  security of the data protected by these keys is strictly dependent upon the prevention of 546  unauthorized disclosure, modification, substitution, insertion, and deletion of the keys and, as 547  appropriate, other cryptographic variables (e.g., IVs).  If these are compromised, the 548  confidentiality and integrity of the protected data can no longer be assured.  General key-549  management guidelines are provided in SP 800-57 Part 1. Basic requirements for Key 550  Management Systems operated by or for the Federal Government are provided in SP 800-152. 551  3.1 Uses of Symmetric Keys 552  Symmetric keys are used by block cipher algorithms (e.g., AES) that are used for encryption, key 553  wrapping and/or the generation of message authentication codes. Symmetric keys are also used by 554  hash function-based authentication algorithms (e.g., HMAC18 and KMAC19) for the generation of 555  message authentication codes, and for key derivation and random bit generation. 556  Encryption is used to provide confidentiality for data. The unprotected form of the data is called 557  plaintext. Encryption transforms the data into ciphertext, and ciphertext can be transformed back 558  into plaintext using decryption. Data encryption and decryption are generally provided using 559  symmetric-key block cipher algorithms. See Section 4.1 of SP 800-175B20 for more information 560  regarding data encryption. 561  Key wrapping is a method used to provide confidentiality and integrity protection for keys (and 562  possibly other information associated with the keys) using a symmetric key-wrapping key that is 563  known by both the sender and receiver, and a block cipher algorithm. The wrapped keying material 564  can then be stored or transmitted (i.e., transported) securely. Unwrapping the keying material 565  requires the use of the same algorithm and key-wrapping key that was used during the original 566  wrapping process. See Section 5.3.5 of SP 800-175B for more information on key wrapping. 567  18 HMAC is specified in FIPS 198, The Keyed-Hash Message Authentication Code (HMAC).  19 KMAC is specified in SP 800-185, SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash, and ParallelHash.  20 SP 800-175B, Guideline for Using Cryptographic Standards in the Federal Government: Cryptographic  Mechanisms.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  14  Message authentication codes are used to protect message and data integrity. Message 568  authentication codes are cryptographic checksums on data that use symmetric-key cryptography 569  to detect both accidental and intentional modifications of data. They also provide some measure 570  of source authentication between entities sharing the same key because only entities sharing a key 571  can produce the same message authentication code. See Section 4.2 of SP 800-175B for further 572  information on message authentication codes.  573  Key derivation is concerned with the generation of a key from secret information, although non-574  secret information may also be used in the generation process in addition to the secret information. 575  Typically, the secret information is shared among the entities that need to derive the same key for 576  subsequent interactions. The secret information could be a key that is already shared between the 577  entities (i.e., a pre-shared key), or could be a shared secret that is derived during a key-agreement 578  scheme. See Section 5.3.2 of SP 800-175B for more information regarding key derivation. 579  Cryptography and security applications make extensive use of random numbers and random bits. 580  For cryptography, random values are needed to generate cryptographic keys. There are two classes 581  of random bit generators (RBGs): Non-Deterministic Random Bit Generators (NRBGs), 582  sometimes called true random number (or bit) generators, and Deterministic Random Bit 583  Generators (DRBGs), sometimes called pseudorandom bit (or number) generators. SP 800-90A21 584  specifies approved DRBG algorithms, based on the use of hash functions and block-cipher 585  algorithms. See Section 4.4 of SP 800-175B for more information regarding random bit generation.  586  3.2 Application Considerations 587  Federal agencies are required to comply with FIPS 19922 and FIPS 20023 in determining the 588  sensitivity of their applications and data (i.e., the target data) and the impact level associated with 589  any compromise of that data (i.e., Low, Moderate or High impact). When the impact level has been 590  determined, the security strength of the cryptographic algorithms and keys for protecting that data 591  can be determined. PR:2.3, PR:2.4 and PR:2.5 in SP 800-152 specify the minimum security 592  strengths required for the Low, Moderate and High impact levels, respectively. 593  Important considerations that apply to the selection of a key-management approach include: 594  • The exposure of a key by any entity having access to that key compromises all data 595  protected by that key; 596  • The more entities that share a key, the greater the probability of exposure of that key to 597  unauthorized entities; 598  21 SP 800-90A, Random Number Generation Using Deterministic Random Bit Generator Mechanisms.  22 FIPS 199, Standards for Security Categorization of Federal Information and Information Systems.  23 FIPS 200, Minimum Security Requirements for Federal Information and Information Systems.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  15  • The longer that a key is used, the greater the chance that it will become known by 599  unauthorized entities during its use; 600  • The greater the amount of data that is protected by the key, the greater the amount of data 601  that is exposed if the key is compromised; 602  • It is essential that the source of a secret or private key is trustworthy, and that a secure 603  channel be used for key distribution; and 604  • The key used to initiate a keying relationship must be obtained through a secure channel, 605  often using an out-of-band process. 606  Each of these considerations must be addressed in any application of symmetric-key cryptography. 607  When using asymmetric cryptography, one entity can make one public key available to other 608  entities and use the corresponding private key in secured communications with those other entities. 609  However, when using symmetric-key cryptography, a different key is often required for each 610  correspondent. Some organizations choose to reduce this cryptographic burden by sending the 611  same symmetric key to multiple correspondents, then using that key in multicast transmissions to, 612  or exchanges with, all parties sharing that symmetric key. Drawbacks to this approach include a 613  loss of privacy and integrity protections within what are effectively cryptographic communities-614  of-interest, and a loss of cryptographic protection by all members of the community-of-interest if 615  the shared key is compromised. There is also significant management and accounting overhead 616  associated with the distribution, installation, revocation and post-revocation access management 617  for what can be complex combinations of both distinct and overlapping cryptographic 618  communities. 619  Symmetric-key cryptography is attractive in applications that cannot afford the processing 620  overhead associated with asymmetric cryptography. This is becoming a more important factor, 621  given the rapid growth of the Internet of Things (IoT). Symmetric-key cryptography is an 622  increasingly common choice for Wireless Sensor Networks (WSN), for example, due to the limited 623  processing, storage, and electrical power available to sensors. As of 2018, asymmetric-key 624  encryption, even for key-establishment and integrity protection is impractical for many IoT sensor 625  components. An initial response to this situation has resulted in research to develop “lightweight” 626  block ciphers (see NISTIR 811424) to protect sensor data and control. These “lightweight” block 627  ciphers can be defeated by current personal computers in one to a few hours (see KM in WSN).  628  24 NIST 8114, Report on Lightweight Cryptography.  The exposure of a key by any entity having access to that key compromises all data protected by that  key, and the more entities that share a key, the greater the probability of exposure of that key to  unauthorized entities.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  16  Some applications of symmetric-key cryptography reduce the initial key-management overhead 629  by establishing \"crypto nets\" in which many entities share the same secret key. Although there are 630  cases where operational considerations encourage the adoption of this course, the exposure of any 631  secret key tends to become more likely as the number of entities sharing the secret key increases. 632  Cyber threats, personnel security threats, physical security threats and simple carelessness on the 633  part of any entity that has access to an unencrypted secret key endangers the security of all data 634  protected by that key. This consideration argues in favor of restricting the number of entities that 635  share any given key. Exceptions that can mitigate the effects of this principle are found in isolated 636  environments, such as networks in protected facilities in which no processor that has a secret key 637  is remotely accessible.  638  639  For these reasons, keys shall not be used indefinitely. The period for which a key is to be used, 640  called a cryptoperiod, is established by policy based on a risk assessment. In any event, symmetric-641  key management involves not just the initial distribution of keys, but also the distribution of 642  replacements for expired or compromised keys. Key replacement is required at a frequency 643  determined by the cryptoperiod, but emergency replacement is also required when a key in use is 644  compromised. The distribution and accounting requirements imposed by cryptoperiods and 645  emergency key replacement add significantly to key-management overheads. Note that even the 646  management of asymmetric-key pairs imposes a sufficient overhead burden that many 647  organizations seek to minimize when using cryptography. However, the key-management burden 648  is greater in the case of symmetric-key cryptography.  649  The source of any secret key has the ability to defeat any confidentiality or integrity mechanism 650  for which the key is used. Consequently, keys shall be accepted only from sources that can be 651  trusted with all information that is to be protected by cryptography using those keys. 652  When using asymmetric-key cryptography, a secure communications relationship can be 653  established with a new correspondent simply by making a key-establishment public key available 654  to the new correspondent. In the case of symmetric-key cryptography, a secret key must be 655  securely provided to the new correspondent. This requires either a physical transfer between 656  correspondents, a shared relationship with a center (e.g., a key distribution center) or the 657  establishment of an initial symmetric key using asymmetric key-establishment techniques. 658  The longer that a key is in use, the greater the chance that it will become known by unauthorized parties  while still in use, and the greater the amount of data protected by the key, the greater the amount of  data that is compromised if the key is compromised.  It is essential that the source of a secret or private key be trustworthy; the key used to initiate a keying  relationship must be obtained using a secure channel.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  17  Cloud-computing facilities and other large data repositories that store and/or process information 659  for physically remote customers should protect that information while in transit and at rest. Due 660  to its superior processing efficiency, symmetric-key cryptography is used for the encryption of the 661  information, although asymmetric-key cryptography has generally been used for key transport and 662  integrity protection and for the generation of digital signatures. Some cloud-computing facilities 663  and networks serve very large numbers of customers. Secure storage, retrieval, and general 664  management of the symmetric keys is essential to the confidentiality of customer information. It 665  also represents significant key-management overhead. Symmetric keys must never be stored or 666  transferred in unprotected form. 667  In the past, most distributions of symmetric keys involved a transfer of the keys by human couriers 668  or secure government mail systems. However, as the number of entities using a system grows, the 669  work involved in the distribution of the secret keying material could grow to be prohibitive. The 670  Internet Engineering Task Force (IETF’s) provides guidelines for key management in RFC 410725, 671  which discusses issues associated with manual versus automated key distribution, as well as best 672  practices for key management. Consistent with RFC 4107’s conclusion that, in general, automated 673  key management should be employed, this Recommendation focuses primarily on automated key-674  establishment schemes. However, for any cryptographic key-management scheme that is solely 675  dependent on symmetric-key cryptography for key establishment, the initial distribution of keys 676  without the use of asymmetric-key algorithms must be manual. This is a significant cost constraint 677  and introduces architectural complexity as the size of the supported organization increases. 678  3.3 Symmetric Algorithm and Key Types 679  NIST has approved several basic cryptographic algorithms and \"modes\" for using them. 680  • Block cipher algorithms (e.g., AES and TDEA26) that are used in specified modes to 681  perform encryption/decryption, message authentication and integrity protection, key 682  wrapping, key derivation and random bit generation.  683  • Hash functions (algorithms) that can be used to provide message authentication and 684  integrity protection, key derivation and random bit generation. The methods for providing 685  these services can be considered as hash function modes, although that term is not normally 686  used in relation to hash functions. 687  Several types of keys are used in symmetric-key cryptography. 688  25 RFC 4107, Guidelines for Cryptographic Key Management.  26 Although TDEA is currently an approved algorithm, its use is being discouraged because of security  considerations (see SP 800-131A and the NIST announcement for using TDEA).  https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  18  • Key wrapping keys (KWKs) are used to wrap (i.e., encrypt and integrity protect) other 689  keys, including other KWKs. KWKs are used with a block cipher algorithm as specified in 690  SP 800-38F.27 691  • Data encryption keys (DEKs) are used to encrypt data other than keys (i.e., the target data). 692  Block cipher modes for using DEKs are specified in SP 800-38A28, the addendum to SP 693  800-38A29, SP 800-38E30 and SP 800-38G.31  694  • Data authentication keys (DAKs) are used to generate message authentication codes 695  (MACs) that provide integrity protection and (some measure of) source authentication for 696  the target data. Block cipher modes for generating and verifying MACs are specified in SP 697  800-38B32 and SP 800-38D.33 Hash-based techniques for generating and verifying MACs 698  are specified in FIPS 19834 and SP 800-185. 699  • Authenticated encryption keys (AEKs) are used to provide both confidentiality and 700  integrity protection for the target data using the same key. Block cipher modes for using 701  AEKs are specified in SP 800-38C35 and SP 800-38D. 702  • Key Derivation Keys (KDKs) can be used to derive DEKs, DAKs, AEKs and other KDKs. 703  Symmetric-key methods for key derivation are specified in SP 800-108.36 KDKs shall not 704  be used to derive KWKs. 705  DEKs, DAKs and AEKs are collectively called data keys (DKs). 706  3.4 Key Distribution Using Symmetric-Key Techniques  707  Keying material (i.e., keys and other cryptographic variables, such as IVs) shall either be 708  distributed manually (see Section 3.4.1) or using appropriate automated distribution methods (see 709  Section 3.4.2) before secure transactions begin using those keys. Keys, all other cryptographic 710  27 SP 800-38F, Recommendation for Block Cipher Modes of Operation: Methods for Key Wrapping.  28 SP 800-38A, Recommendation for Block Cipher Modes of Operation: Methods and Techniques.  29 SP 800-38A Addendum, Recommendation for Block Cipher Modes of Operation: Tree Variants of Ciphertext  Stealing for CBC Mode.  30 SP 800-38E, Recommendation for Block Cipher Modes of Operation: the XTS-AES Mode for Confidentiality on  Storage Devices.  31 SP 800-38G, Recommendation for Block Cipher Modes of Operation: Methods for Format-Preserving  Encryption.  32 SP 800-38B, Recommendation for the Block Cipher Mode of Operation: the CMAC Mode for Authentication.  33 SP 800-38D, Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC,  SP 800-38D.  34 FIPS 198, The Keyed-Hash Message Authentication Code (HMAC).  35 SP 800-38C, Recommendation for Block Cipher Modes of Operation: the CCM Mode for Authentication and  Confidentiality.  36 SP 800-108, Recommendation for Key Derivation Using Pseudorandom Functions.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  19  variables (where needed), and accompanying documentation shall be protected throughout the 711  distribution process.  712  Keys shall not be used operationally to apply cryptographic protection (e.g., encrypt) prior to 713  sending and/or receiving acknowledgments of successful receipt or if a compromise is suspected.  714  Procedures to follow up and resolve distribution irregularities shall be in place (e.g., included in a 715  Key Management Practices Statement as described in SP 800-57, Part 2.37. 716  3.4.1 Manual Distribution 717  When manual methods are used to distribute cryptographic keying material, that material shall be 718  distributed using couriers, registered mail, or an equivalent distribution service in which the 719  delivery agent is trusted by both the sending and receiving entities, with the recipients required to 720  identify themselves to the delivery agent and provide an appropriate receipt upon delivery. The 721  keys shall be transported on a medium that, together with the physical distribution method, 722  provides the required confidentiality and integrity protection for the keys. 723  Electronic media (e.g., smart cards, flash drives, or key loader devices) should be used during 724  manual distribution. If keys or other cryptographic variables are printed (instead of being 725  distributed using electronic media), provision shall be made to protect the keying material from 726  unauthorized disclosure or replacement (e.g., using uniquely identified, tamper-detecting 727  packaging). Whether using electronic media or printed material during delivery, the delivery 728  receipt shall identify the source of the keying material, the delivery agent, the recipient, and 729  indicate the state of the received media (e.g., no tampering detected, valid authentication codes, 730  etc.). 731  For environments where the FIPS 199 impact level associated with the data to be protected by the 732  keying material to be distributed is High, multiparty control and/or split knowledge shall be 733  employed when keys are distributed in plaintext form. 734  Distribution procedures shall ensure that: 735  (1) The distribution of keys and any other variables is authorized; 736  (2) The keying material has been received by the authorized recipient; and 737  (3) The key has not been disclosed, modified or replaced in transit. 738  The distributor (i.e., the source of the keying material) and receiver of the manually distributed 739  keys shall identify (to each other) those individuals who are authorized to originate, receive and 740  change keys and shall not reassign or delegate such responsibilities without proper notice. 741  37 SP 800-57, Part 2: Recommendation for Key Management: Part 2: Best Practices for Key Management  Organizations.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  20  3.4.2 Automated Distribution 742  Automated key distribution is the electronic transmission of cryptographic keys (and, where 743  needed, other cryptographic variables such as IVs) via a communication channel (e.g., the 744  Internet). This requires the prior distribution of an initial key-wrapping key (KWK) and an 745  authentication key (i.e., a DAK), either manually (see Section 3.4.1) or using asymmetric key-746  establishment techniques (e.g., the key agreement or key transport schemes specified in SP 800-747  56A or SP 800-56B). The KWK and DAK may then be used to distribute all key types discussed 748  in Section 3.3. 749  Keying material distributed after the initial KWK and DAK have been established shall be  750  wrapped with a KWK shared between communicating entities38 in key-establishment messages 751  defined using a protocol that provides confidentiality, integrity protection assured delivery, and 752  replay protection; the content of the protocol message shall be integrity protected using a DAK39 753  (see Section 5.4). The recipient(s) shall unwrap the protected keys and verify their source and 754  integrity before any cryptographic process can begin for communications using the transported 755  key(s).  If a recipient has multiple KWKs that may be used to unwrap the received keys, 756  information shall be available to identify the KWK to be used (e.g., sent with the transported 757  keying material) (see Section 5.2). Likewise, if multiple DAKs are available, a method shall be 758  available to indicate the DAK used. 759  An SP 800-38F-compliant key-wrapping algorithm shall be used with a KWK for wrapping keys 760  for automated key distribution.  The key-wrapping algorithm shall use an approved symmetric 761  encryption algorithm (i.e., AES) for wrapping one or more keys during the same key-wrapping 762  process. Keys being wrapped may be either KWKs, KDKs, DEKs, DAKs or AEKs. The algorithm 763  and key size used to perform the key wrapping shall provide security equal to or greater than the 764  security strength to be provided to any data to be subsequently protected by the wrapped keys. 765  A means of protection against replay shall be provided in a key-establishment protocol. The use 766  of time-variant parameters may be used to afford this protection.  A nonce is a time-varying value 767  that has (at most) an acceptably small chance of repeating (where the meaning of “acceptably 768  small” may be application specific). See Section 5.4 of SP 800-56A or SP 800-56B for more 769  information on nonces.  770  3.5 Key Hierarchies 771  A hierarchy of keys is often used when symmetric-key cryptography is employed for 772  communications and storage applications.  773  38 Either the initial KWK or a KWK subsequently distributed between the communicating  entities.  39 Either the initial DAK or a DAK subsequently distributed between entities.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  21  774  Figure 1: Examples of Symmetric-Key Hierarchies 775  Figure 1 provides several examples of symmetric-key hierarchies. 776  • The top-most layer (Layer 1) can be any of the key types. This layer establishes a keying 777  relationship.  778  • When the Layer 1 key is a KWK, further keys may be distributed using that KWK (see 779  examples A, B, C and E in which KWKs, KDKs, and DKs are shown at Layer 2 in the 780  figure).  781  • A KDK at any layer has the data keys and KDKs that it derives as a lower layer (see 782  examples A, C and F).  783  • DKs (i.e., DEKs, DAKs and AEKs) are always at the bottom of the implemented hierarchy, 784  even if the DK is a Layer 1 key, in which DKs form the only layer in the hierarchy (see 785  example D).  786  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  22  • KWKs, KDKs and DKs in a layer immediately below KWKs are wrapped by the KWK 787  above them in the hierarchy (see examples A, B, C and E). 788  The key hierarchy may not be \"vertical\" as shown in Figure 1 but may be somewhat more 789  horizontal; two examples are shown in Figure 2. 790  791  Figure 2: Key Hierarchy Structure Examples 792  In example 1 of the figure, the Layer 1 KWK was used to wrap a Layer 2 DAK; these keys were 793  used to establish a keying relationship (indicated in the left-hand oval). Subsequently, the KWK 794  was used to wrap a Layer 2 KDK, which was used to generate a Layer 3 DEK and DAK. 795  In example 2 of the figure, the KWK and DAK established the keying relationship (indicated in 796  the right-hand oval), but the DAK was not wrapped using the KWK as was done in the first 797  example. In this case, both the KWK and DAK are Layer 1 keys. Subsequently, the  KWK was 798  used to wrap a Layer 2 KWK, which was later used to wrap two Layer 3 AEKs. 799  For the most part, the number of layers is irrelevant; the important issue is where the key is located 800  in a hierarchy, especially if the revocation of a key is required (see Section 5.5).  801  3.5.1 Storage Applications 802  All keys used to protect stored target data shall be either generated by the system in which the 803  target data is stored or generated by the sender of cryptographically protected data that is stored 804  by the recipient upon receipt. As stated in Section 3.5, the lowest layer in the key hierarchy consists 805  of the data keys (i.e., DEKs, DAKs and AEKs) used to protect the stored target data. Higher-layers 806  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  23  of keys, if used, are the KWKs used to protect the data keys or the KDKs used to derive them (see 807  Figure 1 and Figure 2).  808  3.5.2 Communicating Groups 809  The use of symmetric keys for communications between correspondents requires the establishment 810  of cryptographic keying relationships among two or more entities that form a communicating 811  group (i.e., a group of entities that correspond among themselves); often, a communicating group 812  consists of only two entities. An entity may be a member of more than one communicating group.  813  When using symmetric-key cryptography, a keying relationship is established when each member 814  of the group shares common keys − the Layer 1 keys of that relationship. Symmetric keying 815  relationships among communicating groups are established using the methods in Section 3.4 or 816  using key centers (see Section 4.1). Section 4.2 provides more details regarding the establishment 817  of communicating groups. 818  The keys used during communications among communicating group members (either the Layer 1 819  keys or keys below them in a key hierarchy) may be either uni-directional or bi-directional.  820  • Uni-directional keys are used in only one direction during communications among group 821  members. Each group member that is authorized to send data has its own key for applying 822  cryptographic protection (e.g., encrypting data) to be sent to other group members. Other 823  members of the group have copies of the keys, but only use them for processing (e.g., 824  decrypting) the cryptographically protected information. For example, if Entities A and B 825  are the members of a communicating group, Entity A would use a key for encryption, but 826  Entity B would use that key only for the decrytion of information from Entity A. Entity B 827  would use a different key for encryption, and Entity A would use that same key only for 828  the decryption of information from Entity B. This approach is most appropriate for very 829  small groups (e.g., communicating pairs), or when very few group members are authorized 830  to apply protection. 831  • Bi-directional keys can be used in both directions during a communication between group 832  members; the same symmetric key is used by each member for both protecting (e.g., 833  encrypting) sensitive data to be sent to other group members and for processing (e.g., 834  decrypting) protected data received from other group members. 835  836  3.5.3 Key-Establishment Transactions 837  A key-establishment transaction is an instance of establishing keying material among or between 838  entities. This includes requests for generating keys, the generation of the keys, the distribution of 839  those keys and a confirmation of delivery. This applies to both manual and automated key 840  distribution. 841  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  24  For automated key distribution, this requires multiple protocol messages. The integrity of each 842  message and assurance of the message source is provided using a message authentication code 843  (MAC) that is generated using a transaction authentication key generated for the transaction or a 844  DAK shared between the message sender and receiver when a transaction authentication key is 845  not available (e.g., in error messages in response to messages containing the transaction 846  authentication key).  847  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  25  4. Key Management Architectures for Symmetric Keys  848  This section describes architectural considerations for the establishment of symmetric keys and 849  specifies architectures for different key-establishment environments. Because the security of 850  cryptographically protected systems is largely dependent on the effectiveness of key management 851  architectures, any such architecture must take into account organizational structures and 852  responsibilities, and operational requirements.  Key-management architecture design is best 853  undertaken by specialists who have a comprehensive understanding of the organization, its 854  requirements, and the risks to which it is exposed. This section describes architectural elements in 855  general and some of the considerations associated with the design, selection, and acceptance of 856  key management architectures.  857  This section provides high-level examples of key-establishment using symmetric-key systems.  858  The general architectural approaches described include center-based key establishment and key 859  establishment for communicating groups. Section 5 provides further information on the messages 860  used for key establishment, and Appendix A provides more in-depth examples. 861  4.1 Center-based Key Establishment Architectures 862  Key centers can be used to mitigate one of the primary objections to the use of symmetric keys for 863  cryptographic protections: the number of keys required to initiate and maintain cryptographic 864  keying relationships between communicating entities (i.e., members of communicating groups) 865  when asymmetric keys are not available for this purpose. When using key centers, each entity 866  becomes a subscriber of a mutually trusted key center by establishing a cryptographic keying 867  relationship with that center consisting of a KWK and a DAK. The KWK is used to wrap keying 868  material for transport, and the DAK is used to authenticate messages when another authentication 869  key is not available. A KWK and DAK shared between any subscribing entity and a center permits 870  secure communications to be established between that entity and any other subscribing entity that 871  has a KWK shared with the center. 872  A keying relationship between a center and its subscribers is normally established using a manual 873  process whereby either the center or the subscriber generates the keying material and provides it 874  to the other party. The relationship is rekeyed using the same process. Alternatively, if an 875  asymmetric key-establishment capability is available (e.g., asymmetric key agreement or key 876  transport), the keying material could be established using that capability. See Section 3.4. 877  For center-based key establishment, the center is responsible for verifying the identity of each of 878  its subscribers, authorizing communications between subscribers by providing or not providing 879  the services of the center, and may provide secure key-generation services. 880  Key center architectures have several variants: Key Distribution Centers (KDCs), Key Translation 881  Centers (KTCs) and Multiple-Center Groups of KDCs and/or KTCs. Figure 3 depicts the keying 882  relationships between a single center and its subscribers. The center may be either a KDC or KTC. 883  As shown in the figure, each subscriber shares a different KWK with its center.  884  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  26  885  886  Figure 3: Center-Subscriber Keying Relationships 887  The keying relationship between a subscriber and a center can be used to establish keying 888  relationships between non-center entities (e.g., subscribers A, B and C in the figure) to form 889  communicating groups of two or more entities using automated key-establishment protocols. In 890  cases where a KWK and DAK are established as the Layer 1 keys among subscribing entities, and 891  at least one of those entities has key generation capabilities, subsequent key-establishment 892  transactions may be performed without using the key center (see Section 4.2.2). The KWK and DAK 893  that are established using the services of a key center shall only be replaced using the services of 894  that center. 895  4.1.1 Key Distribution Centers (KDCs) 896  A KDC is responsible for the secure generation and distribution of keys to its subscribers, either 897  to be used by a single subscriber for its own purposes or to be shared by multiple subscribers. 898  KDCs may send keys either unsolicited or upon request. 899  When keys are intended to be shared by multiple subscribers, the KDC generates and distributes 900  keys to subscribing entities who: 901  • Need to communicate with each other but either 1) do not currently share keys, 2) need to 902  replace keys previously established using that KDC or 3) the KDC determines (of its own 903  volition) that keys need to be shared between a subset of subscriber entities that will form 904  a communicating group; 905  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  27  • Each share a KWK and DAK with the same KDC (i.e., each entity is a subscriber of the 906  same KDC); and 907  • May not have the ability to generate keys. 908  A copy of the keys for each identified subscribing entity is wrapped by the KDC using a KWK 909  shared between that entity and the KDC. The wrapped keys may be sent to one subscribing entity 910  (e.g., the requesting entity) to be forwarded to the other entity(ies) (see Figure 4), or may be sent 911  directly to the (recipient) entities (including the requesting entity), depending on the protocol (see 912  Figure 5).  913  914  Figure 4: Obtaining Keys from a KDC (Distributing through a Single Subscriber) 915  Using Figure 4 as an example:  916  1) Subscriber A may optionally request that the KDC generate keying material, indicating 917  other subscribers that need to share the key (i.e., Subscribers B and C in the figure); the 918  DAK shared between Subscriber A and the KDC is used for message authentication.  919  2) Alternatively, the KDC may initiate the key distribution process without a subscriber 920  request by generating keying material to be shared by some subset of its subscribers 921  (e.g., Subscribers A, B and C in the figure).  922  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  28  3) In either case, the KDC generates the requested keying material, wraps it separately 923  using the KWK shared with each subscriber intended as a recipient. A transaction 924  authentication key (i.e., DAK) is also generated and wrapped; this DAK is in addition 925  to any other DAK included in the requested keying material. 926  4) In this example, the KDC sends all wrapped copies of the keys to Subscriber A in a 927  message that uses the transaction authentication key to generate a MAC on the outgoing 928  protocol message. 929  5) Subscriber A extracts its copy of the keys from the message and unwraps them using 930  the KWK shared with the KDC. The unwrapped transaction authentication key and the 931  received authentication code are used to check the authenticity of the message. 932  6) If the message appears to be authentic, subscriber A forwards the appropriate copy of 933  the keying material to the other intended recipient subscribers (i.e., Subscribers B and 934  C in this example) using the transaction authentication key to generate a (different) 935  MAC on each outgoing message. 936  7) Each recipient unwraps the received keying material using the KWK that is shares with 937  the KDC and uses the unwrapped transaction authentication key to check the 938  authenticity of the message.  939  940  Figure 5: Obtaining Keys from a KDC (KDC Distributes Keys to Each Subscriber Separately) 941  Using Figure 5 as an example: steps 1, 2 and 3 are the same as the example above. 942  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  29  4) The KDC sends a message to each intended recipient (including Subscriber A) containing 943  the appropriate copy of the wrapped keying material and using the unwrapped transaction  944  authentication key to generate a (different) MAC on each outgoing message.  945  5) Each recipient unwraps the received keying material using the KWK that it shares with the 946  KDC and uses the unwrapped transaction authentication key to check the authenticity of 947  the message. 948  The scenario described in Figure 5 places more responsibility for key management overhead (e.g., 949  accounting, revocation and suspension notice, etc.) on the KDC, while that described in Figure 4 950  places more overhead responsibility on Subscriber A. Organizational structures and assignments 951  of responsibilities can play a significant role in deciding which approach is preferable. 952  4.1.2 Key Translation Centers (KTCs) 953  A Key Translation Center has the ability to translate keys for distribution to a subset of its 954  subscribers.  955  A KTC is used to translate keys for future communication between subscriber entities of the same 956  KTC who: 957  • Need to communicate with each other, but may not currently share keys; 958  • Each share a KWK and DAK with the same KTC (i.e., each entity is a subscriber of the 959  same KTC); and 960  • At least one of the subscribing entities has the ability to generate keys. 961  Keying material is generated and sent by one of the subscribers (the requesting entity) to the KTC, 962  wrapped using the KWK shared with the KTC. The KTC unwraps the keying material to be 963  translated and rewraps it using the KWK shared with other identified subscribing entity(ies) (i.e., 964  the ultimate recipient(s)). The rewrapped keying material may be returned to the requesting entity 965  to be forwarded to the ultimate recipient(s) (see Figure 6), or may be sent directly to the ultimate 966  recipient(s), depending on the protocol (see Figure 7). 967  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  30  968  Figure 6: Requesting Key Translation, with Keys Provided through a Single Subscriber 969  Using Figure 6 as an example: 970  1) Subscriber A generates keying material to be shared among other KTC subscribers (i.e., 971  Subscribers B and C in the figure); a transaction authentication key (i.e., DAK) is also 972  generated.  973  2) Subscriber A wraps the keying material (including the transaction authentication key) using 974  a KWK shared with the KTC and sends it to the KTC, indicating other subscribers that 975  need to share the keys (i.e., Subscribers B and C); the transaction authentication key is used 976  to generate a MAC on the outgoing message.  977  3) The KTC unwraps the received keying material using the KWK shared with Subscriber A 978  and uses the unwrapped transaction authentication key to check the authenticity of the 979  received message.  980  4) If the received message appears to be authentic, the KTC then rewraps the keying material 981  separately for each intended recipient using the KWK shared with that recipient. 982  5) The KTC prepares a message containing the newly wrapped keys, generates a MAC on the 983  message using the (plaintext) transaction authentication key, and sends the message to 984  Subscriber A. 985  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  31  6) Subscriber A forwards the appropriate copy of the keying material to the other intended 986  recipient subscribers (i.e., Subscribers B and C) using the transaction authentication key to 987  generate a (different) MAC on each outgoing message. 988  7) Each recipient unwraps the received keying material using the KWK that is shares with the 989  KTC and uses the unwrapped transaction authentication key to check the authenticity of 990  the message. 991  992  Figure 7: Requesting Key Translation, with Keys Returned Separately to Each Subscriber 993  Using Figure 7 as an example, steps 1 through 4 are the same as the above example. 994  5) The KTC sends a message to each intended recipient (B and C) containing the appropriate 995  copy of the wrapped keying material, using the transaction authentication key to generate 996  a (different) MAC on each outgoing message.  997  6) Each recipient unwraps the received keying material using the KWK that it shares with the 998  KTC and uses the unwrapped transaction authentication key to check the authenticity of 999  the message. 1000  As in the case of KDCs (see Section 4.1.1), organizational structures and assignments of 1001  responsibilities can play a significant role in deciding which approach is preferable. 1002  4.1.3 Multiple-Center Architectures 1003  A multiple-center group is a set of two or more centers (KDCs and/or KTCs) that have formally 1004  agreed to work together to provide cryptographic keying services to their respective subscribers.  To 1005  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  32  the subscribers of a key center, the multiple-center group functions as if it were a single key center. 1006  Key centers may belong to more than one multiple-center group, but care shall be taken to separate 1007  domains of subscribers (e.g., subscribers for one organization from subscribers of another 1008  organization).  1009  Each center within the group has a keying relationship with at least one other center in the group: 1010  the centers share a KWK and a DAK to transport keying material between them. The centers may 1011  also distribute other keying material using their shared keys to protect messages exchanged between 1012  the centers.  1013  Every center within a multiple-center group shall have either a direct or an indirect keying 1014  relationship with every other center within the group (see Figure 8).  Two centers have a direct 1015  keying relationship when they share a KWK and DAK (established as discussed in Section 3.4). 1016  Once the multiple-center group is established, the multiple center group shall use either manual or 1017  automated protocols to maintain these keying relationships (i.e., to change the shared key(s)). 1018  Two centers have an indirect keying relationship when they do not share a KWK and DAK, but there 1019  is a chain of direct keying relationships between them.  In Figure 8, for example, direct keying 1020  relationships exist between Centers 1 and 2, and between Centers 2 and 3.  An indirect keying 1021  relationship exists between Centers 1 and 3 because of the direct relationships that form a chain of 1022  keying relationships through Center 2. 1023  1024  Figure 8: Multiple-Center Group Direct and Indirect Keying Relationships 1025  The use of indirect keying relationships can reduce the key management overhead associated with 1026  deploying keys among the multiple-center group members but can also reduce central control over 1027  relationships in a hierarchical environment. 1028  Centers within multiple center groups may provide key generation services. All centers within the 1029  group that have subscribers shall be capable of providing key translation; only a subscriber's agent 1030  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  33  (i.e., a key center to which an entity is subscribed) shall translate (i.e., wrap) keys for that subscriber.  1031  Some centers within the multiple-center group may only forward the keys or a request for services 1032  to the next center.  1033  Intermediate centers within the multiple center group forward information when a direct keying 1034  relationship does not exist between the agents or between an agent and a center that will generate the 1035  key(s) or perform the translation.  The intermediate centers used in one portion of the information 1036  flow need not be the same as those used in another portion of the information flow.  However, the 1037  number of intermediate centers used should be minimized.  1038  A multiple-center group shall be well-defined; all centers within a multiple-center group must be 1039  aware of what other centers are members of the group as well as the conditions and restrictions for 1040  group interactions. If a center belongs to more than one group, the interactions of one group shall be 1041  separated from the interactions of another group. 1042  The centers within a multiple-center group have specific keying relationships between them and use 1043  communication protocols to manage those keying relationships40 and fulfill requests from their 1044  subscribers.  1045  Multiple-center groups can be used to support the establishment of keying relationships between 1046  subscribers of different centers that belong to the multiple-center group (e.g., to establish 1047  communicating groups). Depending on the group design, every subscriber of a center within the 1048  group may or may not be able to establish keys with all subscribers of all centers within the group.  1049  Each subscribing entity associated with a KDC or KTC within a multiple-center group has a keying 1050  relationship with at least one center that is a member of the group; this center is the subscriber's 1051  \"agent\" for the group; however, a center need not have subscribers of its own.  Entities (i.e., 1052  subscribers) may have more than one agent for a multiple-center group, and a subscriber may 1053  subscribe to more than one multiple-center group using the same or a different agent. Using a center 1054  as an agent to a group does not preclude using the same center as a single-center KDC or KTC.  1055  Interaction with the other members of a multiple-center group by an agent is a service provided by 1056  that agent center. Key transactions initiated by a subscriber to one of its agents shall be fulfilled or 1057  acknowledged to the subscriber through that same agent.  1058  The following services may be provided to the subscribers by a multiple-center group.  1059  •  A key-distribution service is equivalent to the service provided by a single-center KDC.  One 1060  or more centers within the group shall be capable of generating keying material; however, 1061  only one center (i.e., only one KDC) within the multiple-center group shall generate the 1062  keying material for a single key-distribution process. Key generation may be in response to 1063  a request from a subscriber to its agent (one of the centers within the multiple-center group) 1064  or as determined by a center within the group. Agent centers within the multiple-center group 1065  40 This is similar in concept to the use of cross certification between PKI Certification Authorities.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  34  are responsible for wrapping the key(s) intended for their subscriber(s) under KWKs shared 1066  with those subscribers. All copies of the wrapped keys may be sent to a single subscriber for 1067  forwarding to the other intended recipients or provided to each recipient subscriber by its 1068  multiple-center agent.  1069  •  A key-translation service is equivalent to the service provided by a single-center KTC. KTCs 1070  forward copies of the key to the appropriate center(s) within the group for each subscriber 1071  designated to receive a copy of the key. All copies of the wrapped keys may be sent to a 1072  single subscriber or provided to the subscribers by their respective multiple-center agent. 1073  The following subsections provide high-level examples of interactions between subscribers and their 1074  agent centers and between centers within the multiple-center group. In these examples, all keying 1075  material is sent directly to the intended recipient(s). However, the keying material could also be 1076  returned to one subscriber, who distributes it to other subscribers. The examples do not address error 1077  handling; this is included in the more-detailed examples in Appendices A.5 and A.6.  1078  4.1.3.1 A Subscriber Requests Key Generation and Distribution Services 1079  In this example, a subscriber of an agent center requests key-generation services for keying 1080  material to be subsequently shared among a list of entities that are subscribers of some agent within 1081  the multiple-center group; this process starts at step 1) below. Alternatively, a center within the 1082  group could initiate the process for a predetermined list of entities (starting at step 2a or 3a).  1083  1) A subscriber (i.e., the requesting subscriber) sends a key-generation request to its agent 1084  center, indicating the other intended recipients of the keying material. A MAC is generated 1085  on the outgoing message using the DAK shared with the agent.  1086  2) If the agent can generate the requested keying material: 1087  a) The agent generates the requested keying material and a transaction authentication key, 1088  wraps a copy of the keys (including the transaction authentication key) for the requesting 1089  subscriber using the KWK shared with that subscriber, and sends them to the subscriber, 1090  using the transaction authentication key to generate a MAC on the outgoing message.  1091  b) For each intended recipient that is a subscriber of that agent: The agent wraps a copy of 1092  the keys using the KWK shared with each intended recipient and sends them to that 1093  subscriber, using the transaction authentication key to generate a MAC on the outgoing 1094  message. Alternatively, these copies could be sent in the same message as those intended 1095  for the requesting subscriber (see step 2a). 1096  c) For each intended recipient that is not a subscriber of that agent: 1097  • The agent attempts to determine a path through the multiple-center group to that 1098  recipient's agent for translation of the keys to be sent to that recipient.  1099  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  35  • The keying material is wrapped using a KWK shared with the next center in the path 1100  for transport to that center. A separate transaction authentication key is generated for 1101  multiple-center group communications, wrapped using the KWK shared with the 1102  next center in the path, and used to generate a MAC on the outgoing message. 1103  d) If a center receives a translation request from another center within the multiple center 1104  group, and that center is not the agent for the intended recipient (i.e., the center is an 1105  intermediate center): 1106  • The receiving center unwraps the received keying material using the KWK shared 1107  with the previous center and uses the unwrapped group transaction authentication 1108  key to check the authenticity of the received message. 1109  • If the received message appears to be authentic, the center then attempts to determine 1110  a path to the intended recipient's agent and wraps the keying material (including the 1111  group transaction authentication key) using a KWK shared with the next center in the 1112  path for transport to that center.  1113  • A MAC is generated on the outgoing message using the unwrapped group transaction 1114  authentication key. 1115  e) If a center receives a translation request from another center within the multiple center 1116  group, and the receiving center is the agent for the intended recipient: 1117  • The agent center unwraps the received keying material using the KWK shared with 1118  the previous center and uses the unwrapped group transaction authentication key to 1119  check the authenticity of the received message. 1120  • If the received message appears to be authentic, the agent center wraps the keying 1121  material to be translated (including the transaction authentication key, but not the 1122  group transaction authentication key) and sends it to the intended recipient, using the 1123  transaction authentication key to generate a MAC on the outgoing message. 1124  f) Any subscriber receiving wrapped keying material unwraps it using the KWK shared 1125  with its agent and uses the unwrapped transaction authentication key to check the 1126  authenticity of the received message. 1127  3) If the agent  center or another center within the group receives a request to generate keying 1128  material but is unable to do so:  1129  a) The center checks the authenticity of the received message using the DAK shared with 1130  the subscriber or center having sent the generation request. 1131  The center then forwards the request to a center within the group that can generate the 1132  requested keying material. Intermediate centers may be required. The forwarded request 1133  uses the DAK shared with the next center to generate a MAC on the outgoing message. 1134  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  36  b) When a center with a key-generation capability (a key-generation center) receives the 1135  request: 1136  • The authenticity of the received message is checked using the DAK shared with the 1137  subscriber or center that sent or forwarded the generation request.  1138  • The requested keying material is generated, as well as a transaction authentication 1139  key.  1140  • Keying material destined for any subscriber of that center is wrapped using a KWK 1141  shared with that subscriber and sent to that subscriber, using the transaction 1142  authentication key to generate a MAC on the outgoing message.  1143  • For any intended recipient that is not a subscriber of the key-generation center, go to 1144  step 2c above, proceeding through steps 2 d, e and f, as appropriate.  1145  4.1.3.2 A Subscriber Requests Key-Translation Services 1146  In this example, a subscriber of an agent center generates keying material and requests translation 1147  services for keying material to be subsequently shared among a list of entities that are subscribers 1148  of some agent within the multiple-center group.  1149  1) A subscriber generates keying material (including a transaction authentication key), wraps 1150  the keys using a KWK shared with its agent center and sends a translation request to the 1151  agent, indicating the intended recipients. The transaction authentication key is used to 1152  generate a MAC on the outgoing message.  1153  2) When an agent center receives a translation request: 1154  • The center unwraps the keying material using the KWK shared with the requesting 1155  subscriber and checks the authenticity of the received request using the unwrapped 1156  transaction authentication key. 1157  • If any intended recipient is also a subscriber of that agent center, the agent wraps the 1158  keying material (including the transaction authentication key) using a KWK shared with 1159  that recipient and sends it to the recipient, using the transaction authentication key to 1160  generate a MAC on the outgoing message. 1161  • For any intended recipient that is not a subscriber of that agent: 1162  - The agent attempts to determine a path through the multiple-center group to that 1163  recipient's agent for translation of the keying material. 1164  - If the agent is capable of generating keys, a group transaction authentication key is 1165  generated. 1166  - The keying material is wrapped (including the newly generated group transaction 1167  authentication key, if available) using a KWK shared with the next center in the path 1168  for transport in a translation request to that center. A MAC is generated on the 1169  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  37  outgoing message using the newly generated group transaction authentication key 1170  (if available) or using the transaction authentication key sent in the translation key 1171  if not; an indication of which key is used must be present (referred to as the 1172  \"appropriate authentication key\" below).  1173  3) If a center receives a translation request from another center within the multiple center group, 1174  and that center is not the agent for the intended recipient (i.e., the center is an intermediate 1175  center):  1176  • The receiving center unwraps the received keying material using the KWK shared with 1177  the previous center and checks the authenticity of the received message using the 1178  \"appropriate authentication key.\" 1179  • The center then attempts to determine a path to the intended recipient's agent and wraps 1180  the keying material (including the \"appropriate authentication key\") using a KWK shared 1181  with the next center in the path for transport to that center.  1182  • A MAC is generated on the outgoing message using the \"appropriate authentication 1183  key.\" 1184  4) If a center receives a translation request from another center within the multiple center 1185  group, and that center is the agent of the intended recipient: 1186  • The agent center unwraps the received keying material using the KWK shared with 1187  the previous center and uses the unwrapped \"appropriate authentication key\" to check 1188  the authenticity of the received message. 1189  • The agent center wraps the keying material to be translated (including the transaction 1190  authentication key, but not the group transaction authentication key, if present) and 1191  sends it to the intended recipient, using the transaction authentication key to generate 1192  a MAC on the outgoing message. 1193  5) Any subscriber receiving wrapped keying material unwraps it using the KWK shared with 1194  its agent and uses the unwrapped transaction authentication key to check the authenticity of 1195  the received message. 1196  4.2 Communicating Groups 1197  This section discusses the establishment of a communicating group and the subsequent distribution 1198  of additional keying material within that group. Also see Section 3.5.2. 1199  4.2.1 Establishing Communicating Groups 1200  Communicating groups of two or more entities share keys for communication among the group 1201  members. Prior to or during the establishment of a communicating group, each prospective 1202  member of the group shall have assurance of the validity of the group, the source and method of 1203  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  38  group establishment, the identity of the other group members and the rules for group operation 1204  (e.g., using contracts, security policies, memoranda of agreement). 1205  The Layer 1 keys that establish the keying relationship among the group members shall be 1206  established using one of the following methods: 1207  a) Manual distribution as discussed in Section 3.4.1, 1208  b) Use key centers or multiple-center groups: Each member of a prospective communicating 1209  group would become a subscriber of the same key center or of an agent center of the same 1210  multiple-center group (see Section 3.4 and Section 4.1). 1211  • One member of the intended group requests the generation of a key for distribution to 1212  the other intended members of the group from a KDC or multiple center group (see 1213  Sections  4.1.1 and 4.1.3),  1214  • A KDC or multiple-center group (of its own volition) generates a key and sends it to 1215  the intended group members (see Sections 4.1.1 and 4.1.3), 1216  • One member of the intended communicating group generates a key and sends it to a 1217  KTC for translation for the intended members of the group (see Section 4.1.2), or 1218  c) The key is established using asymmetric key-establishment methods. Each member of a 1219  prospective communicating group could obtain an asymmetric key-establishment key pair 1220  and the associated public key certificate. The entity generating the Layer 1 keys could then 1221  use the public key associated with each group member to distribute the Layer 1 keys to 1222  that member. 1223  4.2.2 Communicating Group Requirements  1224  1) A key used by any communicating group shall not intentionally be used by any other 1225  communicating group.  1226  2) When replacing a Layer 1 key (e.g., at the end of its cryptoperiod or because of a 1227  compromise), the key shall be replaced in the same manner as it was established. 1228  3) A key shared among a communicating group shall not be disclosed to a different 1229  communicating group. If a member of a communicating group is also a member of another 1230  group, that member shall not use or disclose that key to other members of the other group. 1231  For example, if entity A is a member of both group 1 and group 2, a key used in group 1 1232  shall not be either used or disclosed to other members of group 2 unless they are also 1233  members of group 1. 1234  4) A key shared among a communicating group shall be secured from third entity usage, 1235  except for an entity that was involved in the distribution of that key (e.g., a key center, see 1236  Section 4.1). 1237  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  39  5) A key that has been used by a communicating group or other cryptographic keying 1238  relationship and revoked shall not be intentionally re-used for any subsequent interaction 1239  (also see Section 5.5). 1240  4.2.3 Subsequent Key Distribution within a Communicating Group 1241  Once a communicating group is established (see Section 4.2.1), the members can operate as peers 1242  or in master/recipient relationships for subsequent key-distribution operations. A peer relationship 1243  exists when all members of the group are allowed to generate or otherwise obtain (e.g., using a 1244  KDC) keying material for distribution to the other members of the group. In a master/recipient 1245  relationship, one (or more) members of the group (i.e., masters) are allowed to generate keying 1246  material and distribute it to all other members of the group, while other members (i.e., recipients) 1247  are only allowed to receive keying material.  1248  Note that keys can only be distributed using automated methods if the group shares a KWK. 1249  When the group shares a KDK (e.g., examples A, C and F in Figure 1), some member (or pre-1250  established rule) needs to decide when to derive a new data key or KDK from the already-shared 1251  KDK. 1252  If a communicating group shares a KWK (e.g., examples A, B, C and E in Figure 1), and at least 1253  one member of the group has a key generation capability, then additional keys may be generated 1254  and distributed within the group without the assistance of key centers. The member entity that 1255  generates the key wraps the newly generated key under a KWK shared with the other members of 1256  the group (the recipients); the recipients unwrap the received key using the same shared KWK.  1257  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  40  5. Key-Establishment Communications 1258  This section addresses key-establishment communication requirements for communicating 1259  groups; communications between KDCs, KTCs and multiple-center groups and their subscribers; 1260  and communications among the member centers in a multiple-center group. 1261  5.1 General Communications Requirements 1262  Automated symmetric-key establishment is dependent on communications among components of 1263  the key-management infrastructure.  Communications in support of key establishment should be 1264  accomplished according to system-wide protocols.  The protocols shall establish the key-1265  establishment information content to be used for the automated establishment of keying material.  1266  Although this Recommendation does not specify key-management protocols, some general 1267  guidelines are offered regarding processing rules to be followed in key establishment. 1268  a) All key-establishment messages shall have integrity and source authentication protection 1269  using an approved message authentication algorithm (e.g., HMAC or KMAC) and a secret 1270  DAK shared between the sender and receiver. 1271  b) When a key-generation capability is available, a newly generated authentication key should 1272  be generated for an outgoing message containing keys if a KWK is available for wrapping 1273  the authentication key. 1274  c) Messages carrying keys shall include the key(s) used to authenticate the message, protected 1275  by a shared KWK or a KWK sent in the message. 1276  d) Before taking action on received key-establishment messages, the receiving entity shall: 1277  • Attempt to verify the authentication code in the received message (see Section 5.4). If an 1278  error is detected, an error message shall be sent to the message sender. 1279  • Check the authenticity/validity/authorizations/reasonableness of other information 1280  carried in the received message (e.g., using nonces or sender IDs). If an error is detected, 1281  an error message shall be sent to the message sender. 1282  • If another message is not to be immediately sent to the message sender in response to a 1283  request, an acknowledgement message shall be sent to the message sender. 1284  e) Messages sent in response to messages carrying keys should use the authentication key sent 1285  in the previous message for computing the authentication code on the responding message. 1286  However, if the authentication code in the received message could not be verified, another 1287  authentication key shared by the message sender and receiver shall be used for computing 1288  the message authentication code on the responding error message.  1289  f)  In order to facilitate secure key establishment, keys may need to be uniquely identified by 1290  key names or labels.  The assignment of a label to a key shall be made only by the entity 1291  or center that generates the key or requests the generation of a key with a specified label.  1292  Once a key is labeled, the label shall not be changed. 1293  Keys may be uniquely identified by: 1294  (1) The sharing entities, 1295  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  41  (2) A key identifier (i.e., key name), 1296  (3) The key type (e.g., KWK or DEK), 1297  (4) The key subtype (i.e., manually or electronically distributed KWK, authentication 1298  or encryption data key) and/or 1299  (5) The effective date of the key41. 1300  The sharing entities and key type of a key carried in a key-establishment message or used 1301  to wrap a key carried in a key-establishment message should be specified in that message. 1302  5.2  Notation 1303  In Section 5.3 and the examples in Appendix A, information sets to be included in protocol 1304  messages are formatted as follows: 1305  information_name(parameter_set_1; parameter_set 2 {; ...; parameter_set_n}), 1306  where each parameter set has one or more items separated by commas. 1307  Keys and variable information in a parameter set is italicized; other information is not.  1308  Keys are indicated by the type of key (e.g., KWK), subscripted by the identities of the sharing 1309  entities or the name of the key, e.g., KWKA, B or DAKname. 1310  Keys are wrapped as follows: 1311  wrapped_keys = WRAP(wrapping_key, concatenation_of_keys_to_be_wrapped). 1312  5.3 Message Content and Handling 1313  This section recommends information that should be included in key-establishment messages 1314  and provides guidance in handling them when received. The section identifies information that 1315  needs to be included in each type of message, but not the format to be employed or other 1316  information to be included in a specific protocol message.  1317  Key-establishment messages are used to: 1318  • Request the generation or translation of keying material, 1319  • Acknowledge the receipt of a request for key generation or translation services, 1320  • Provide keying material to other entities, 1321  • Acknowledge the receipt of keying material, 1322  • Request the revocation of keys, 1323  • Confirm that keys have been destroyed in response to a revocation request, and 1324  • Report errors in key-establishment messages, providing information that may allow error 1325  recovery.  1326  41 The effective date could be the begin date, the end date, or the cryptoperiod.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  42  Additional message types may be required by a particular key-management infrastructure. 1327  The following key-establishment information sets are recommended for incorporation into 1328  protocol messages. Specific protocols may combine the functionality of two or more sets of 1329  recommended information into a single protocol message when appropriate.  Similarly, a protocol 1330  may employ more than one protocol message to convey the information identified for each 1331  information set listed below. The specification of the actual messages to be used in a 1332  communication protocol should be carefully designed to fulfill the participant's policy 1333  requirements for secure communications. 1334  Examples for using these information types are provided in Appendix A.  1335  5.3.1 Key Generation Request  1336  A key generation request permits entities within a key-management infrastructure to request that 1337  keys be generated. The request may be sent: 1338  • By one member of a communicating group (entity B) to another member of that group 1339  (entity A), 1340  • From one entity (B) to another entity (A) to request the services of a KDC, KTC or 1341  multiple-center group (e.g., to establish a communicating group), 1342  • By a KDC subscriber (A) to a KDC or a multiple-center group, or  1343  • By a center within a multiple-center group (Center 1) to another center within the group 1344  (Center 2) who may or may not have a key-generation capability.  1345  The request may be transitive (e.g., from Subscriber B through Subscriber A to a KDC), and the 1346  request may be forwarded until it is received by an entity that is capable of servicing the request 1347  (e.g., from B to A to Center 1 to Center 2) or until it is determined that the service is not available. 1348  A key-generation request shall indicate the types of keying material to be generated 1349  (requested_keys) and the intended communicating group 42  for using those keys. The 1350  requested_keys information might include the key types (e.g., KWK and DAK), the algorithm 1351  (e.g., AES), the key length (e.g., 256 bits) and a label for each key, or other information, as 1352  appropriate.  1353  The request shall provide for the authentication of the requesting entity and for integrity protection 1354  of the message containing the key-generation request information using an authentication key 1355  (auth_key) to generate an authentication code (auth_code) on the message (see Section 5.4): 1356  key-generation_request(requested_keys; communicating_group; auth_code). 1357  See example scenarios in Appendices A.1, A.2, A.3 and A.5 for the use of key-generation request 1358  information. Appendix A.1 discusses the distribution of a key in a communicating group (i.e., the 1359  group members already share a KWK and DAK). Appendix A.2 discusses the distribution of keys 1360  using a KDC; Appendix A.3 discusses the establishment of a communicating group using a KDC; 1361  and Appendix A.5 discusses the establishment of a communicating group using a multiple-center 1362  group to generate and distribute keys to the communicating group. 1363  42 This could, for example, be a list of entity IDs or a number assigned to a communicating group.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  43  5.3.2 Key Transfers  1364  Keying material is transferred from one entity (i.e., the sender) to one or more other entities (i.e., 1365  the receiver(s)). The keying material is sent as key transfer information from a KDC, KTC or agent 1366  of a multiple-center group to one of its subscribers, or from one member of a communicating group 1367  to one or more other members of that group.  1368  Keying material transported in a message containing key transfer information shall be wrapped 1369  using a KWK shared between the sender and the intended receiver. Keying material to be 1370  transported in the key transfer information shall be cryptographically protected as follows: 1371  Let KWKS, R be a KWK shared between the key transfer information sender (S) and the key 1372  transfer information receiver (R). 1373  If one or more KWKs are included in the key transfer information:  1374  • At least one KWK shall be wrapped using KWKS, R.  1375  • Other KWKs shall be wrapped using either KWKS, R or another KWK included in the 1376  key transfer information, with an indication of the specific KWK that was used. 1377  If one or more KDKs or DKs (i.e., DEKs, DAKs, or AEKs) are included in the key transfer 1378  information:  1379  • If no KWKs are included in the key transfer information, then the KDK(s) and/or DKs 1380  shall be wrapped using KWKS, R 1381  • If KWKs are included in the key transfer information, the KDK(s) and/or DK(s) shall 1382  be wrapped using either KWKS, R or a KWK included in the key transfer information, 1383  with an indication of the specific KWK that was used. 1384  Key transfer information shall include the wrapped keying material (wrapped_keys), an indication 1385  of the communicating group members,  and provide integrity protection for the entire message and 1386  authentication of the entity sending the keying material using an authentication key (auth_key) that 1387  is included with the wrapped keys and used to generate an authentication code (auth_code) that is 1388  generated on the message (see Section 5.4):  1389  key_transfer(wrapped_keys; communicating_group; auth_code). 1390  Appendix A provides multiple examples of using key transfer information in various scenarios.  1391  5.3.3 Translation Requests 1392  A translation request transfers keying material from one entity to a second entity for translation 1393  of that keying material for delivery to a third entity. Use cases include the following: 1394  a) The first entity is a KTC subscriber, who generates keys and sends the translation request 1395  to a KTC (the second entity), who is being requested to translate the keying material for 1396  another KTC subscriber (the third entity). An example is provided in Appendix A.4. 1397  b) The first entity is a subscriber of a center that serves as an agent to a multiple-center group 1398  (the second entity). The group is being requested to translate the keying material for a third 1399  entity, who is presumed to be a subscriber of some center within the multiple-center group. 1400  An example is provided in Appendix A.6. 1401  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  44  c) The sender of the translation request is a center within a multiple-center group, and the 1402  receiver is another center within the group. The request may need to be forwarded until a 1403  center is found that can perform the requested translation for the ultimate recipient of the 1404  keying material (the third party, a subscriber of some center within the multiple-center 1405  group). Examples are provided in Appendices A.5 and A.6. 1406  In order to send translation request information, the sending entity shall share a KWK with the 1407  receiver of the  1408  translation request (e.g., a KTC or agent center within a multiple-center group). In order to fulfill 1409  the request, a KTC or another center within the multiple-center group shall share a KWK with the 1410  intended ultimate recipient of the keying material.  1411  A message containing translation request information shall include wrapped keying material 1412  (wrapped_keys) and indicate who requested the translation (requester) and the communicating 1413  group that will use the keying material. Integrity protection shall be provided using an 1414  authentication key (auth_key) generated for each message containing  translation request 1415  information for computing an authentication code (auth_code) on the message (see Section 5.4).  1416  translation_request(wrapped_keys; requester; communicating group; auth_code). 1417  5.3.4 Revocation Request  1418  Revocation request information is used to request the destruction of the operational and backup 1419  copies of keying material. Keys may be revoked by any entity authorized to do so (e.g., authorized 1420  in an organization's security policy; by agreement among communicating group; or in an 1421  agreement with a KDC, KTC or multiple-center group). The revocation request and corresponding 1422  revocation confirmation information (see Section 5.3.5) may be forwarded if required. 1423  The revocation request information shall identify the keying material to be destroyed (key_list) 1424  and provide for the authentication and authorization of the entity requesting the destruction 1425  (requester) and the integrity of the message using an authentication code (auth_code) that is 1426  generated using an authentication key (auth_key). The authentication key shall be newly generated 1427  for the message containing the revocation request information if the sender can generate keys, and 1428  the sender (S) and receiver (R) share a KWK (KWKS, R). Otherwise, the authentication key shall 1429  be a key already shared by the sender and receiver. 1430  In either case, the authentication key (auth_key) shall be used to compute an authentication code 1431  (auth_code) on the message (see Section 5.4):  1432  (1) If a newly generated authentication key is used, then: 1433  revocation_request(key_list; requester; wrapped_auth_key; auth_code), 1434  where wrapped_auth_key = WRAP(KWKS, R, auth_key). 1435  (2) If the sender cannot generate keys, or a KWK is not shared between the sender and 1436  receiver: 1437  revocation_request(key_list; requester; auth_key_ID; auth_code), 1438  where auth_key_ID is used to identify the key used to compute the authentication code 1439  (auth_code). 1440  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  45  Any keys shared between the sender and the receiver(s) may be revoked. If a key at a given layer 1441  is revoked, all keys below it in the key hierarchy shall be revoked. For example, if a keying 1442  relationship was established by a KWK, and the KWK was used later to wrap a KDK, then the 1443  revocation of that KDK also revokes all data keys and other KDKs derived from that KDK. 1444  Note that if all Layer 1 keys shared with the receiver(s) are revoked, the relationship among the 1445  sender and those receivers is terminated.  1446  Archived copies of a revoked key may be retained if stored in a secure archive facility. 1447  Examples of using revocation requests are provided in Appendix A.8. 1448  5.3.5 Revocation Confirmation  1449  A message containing revocation confirmation information provides notification that keys were 1450  destroyed as requested in previously received revocation request information. The revocation 1451  confirmation information shall indicate the message containing the revocation request information 1452  to which it is responding (revocation_request_id) and provide for the authentication of the entity 1453  sending the confirmation and a method of detecting the integrity of the message containing the 1454  revocation confirmation information using an authentication code (auth_code) computed using the 1455  authentication key used for the message containing the revocation request information.  An 1456  indication of the key(s) that were destroyed (list_of_revoked_keys) shall also be included if this 1457  can be accomplished without introducing security weaknesses: 1458  revocation_confirmation(revocation_request_id; list_of_revoked_keys; auth_code). 1459  Examples of using revocation confirmations in response to revocation requests are provided in 1460  Appendix A.8. 1461  5.3.6 Acknowledgements  1462  An acknowledgement is used to report the receipt of a message without communication errors or 1463  other reasons for not acting upon the received message. An acknowledgement is appropriate when: 1464  a) A message containing key-generation request information is received, but the request is 1465  forwarded to another entity (e.g., a KDC or multiple-center group); in this case, the 1466  recipient of the key-generation request information cannot generate the requested keying 1467  material. 1468  b) A message containing key transfer information has been received correctly; 1469  c) A message containing translation request information is received, but the request is 1470  forwarded to another entity. 1471  A message containing acknowledgement information shall indicate the communication being 1472  acknowledged (previous_message_id) and provide for the authentication of the entity sending the 1473  message and a method of detecting its integrity using a previously established authentication key 1474  (auth_key) to generate an authentication code (auth_code) (see Section 5.4): 1475  acknowledgement(previous_msg_id; auth_code). 1476  1. If the acknowledgement information is sent in response to a message containing key-1477  generation request information, the sender (of the acknowledgement information) 1478  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  46  presumably does not have a key-generation capability (otherwise, a newly generated key 1479  would be returned). In this case, an authentication key shall use a previously established 1480  key for the purpose. 1481  2. If the acknowledgement is sent in response to messages containing key transfer or 1482  translation request information, the authentication code shall be generated using the 1483  authentication key (auth_key) used for the message being acknowledged.  1484  Multiple examples of the use of messages containing acknowledgement information are provided 1485  in Appendix A. 1486  5.3.7 Error Reports 1487  An error message is used to report an error in the previously received key-establishment message. 1488  The error message is used to notify the sender of the previous message that the receiver could not 1489  act on the previous message information because of an error (e.g., the authentication code for the 1490  received message could not be verified, or the request cannot be fulfilled). 1491  The error report information in the message shall indicate the previous message that is in error, 1492  provide for the authentication of the entity sending the error message and a method of detecting 1493  its integrity using a previously established authentication key (auth_key) to compute an 1494  authentication code (auth_code) on the message (see Section 5.4). An indication of the specific 1495  error (error_type) shall also be provided if this can be accomplished without introducing 1496  weaknesses in the protocol: 1497  error_report(previous_message_id; error_type; auth_code). 1498  Multiple examples of the use of messages containing error report information are provided in 1499  Appendix A. 1500  5.4 Authentication Codes in Key-Establishment Messages 1501  As required in Section 5.1, an authentication code is required on all key-establishment messages. 1502  The authentication code is generated on the entire message (with the exception of the 1503  authentication code itself) using an approved authentication algorithm and the authentication key 1504  (auth_key). The authentication algorithm may be indicated in the key-establishment message, 1505  negotiated between the sender and receiver or determined by the communications protocol. 1506  The authentication key may have been previously established between the sender and receiver 1507  (e.g., manually or in a previous message) or may be carried in the message itself (e.g., in a message 1508  containing key transfer or translation request information). If carried in a message, the sender (of 1509  the outgoing message) shall wrap the authentication key using a KWK either contained in the 1510  message or already shared between the sender and receiver; a receiver must unwrap the key in 1511  order to verify the authentication code in the message. 1512  The authentication code shall be verified by a receiver before taking action on the key-1513  establishment information in any received message (see Section 5.1).  1514  • If the verification fails, a message containing error report information shall be sent to the 1515  message sender (see Section 5.3.7).  1516  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  47  • If the verification is successful and another message is not to be immediately sent to the 1517  message sender in response to a request, an acknowledgement shall be sent to the message 1518  sender (see Section 5.3.6).  1519  5.5 Revocation and Destruction 1520  General guidance regarding the destruction of cryptographic keys is provided in SP 800-57 Part 1 1521  and in SP 800-88. Except for archival purposes, when keys have been compromised, suspected of 1522  having been compromised, or revoked, they shall be physically or logically destroyed so that they 1523  cannot be recovered (e.g., by overwriting with another key or a constant value). 1524  For a keying relationship (e.g., between members of a communicating group or between a center 1525  and a subscriber), if a key is revoked, all keys that are lower in that key's hierarchy shall be 1526  revoked. For example, if a Layer 1 KWK shared by a communicating group is used to protect a 1527  KDK distributed within the group, a revocation of the KDK requires the destruction of that KDK 1528  and all data keys and other KDKs derived from that KDK; a revocation of the Layer 1 KWK 1529  requires the destruction of the KWK and all keys below it in the key hierarchy. If a Layer 1 key is 1530  revoked, and there is no other Layer 1 key to continue a keying relationship (e.g., for a 1531  communicating group), then the relationship shall be terminated. 1532  Cryptographic keys shall be destroyed in accordance with SP 800-88.  FIPS140 contains suggested 1533  methods for the destruction of keying materials within cryptographic modules. 1534  • The destruction of keys shall be accomplished under conditions of full accountability, with 1535  appropriate records retained for audit trail purposes.  Note that some keys (e.g., derived 1536  keys, and some other locally generated one-time or short-term keys) are not usually 1537  recorded and may be exempt from accounting rules.  See SP 800-57, Part 2, for accounting 1538  guidelines for cryptographic keys.  1539  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  48  Appendix A: Example Scenarios 1540  This appendix contains examples using the key-establishment information specified in Section 5 1541  in various scenarios.  1542  Note that error handling of received acknowledgements is often suggested, but is not included in 1543  detail. 1544  A.1 Communicating Group Key Transfer 1545  In this example, a communicating group was established between two entities as discussed in 1546  Section 4.2. As shown in Figure A.1, Entities A and B share a KWK to be used for key wrapping, 1547  and a DAK to be used for authentication when needed (i.e., KWKA,B and DAKA,B); these two keys 1548  are the Layer 1 keys shared by the group. In this example, Entity A can generate keys, but Entity 1549  B cannot. 1550  1551  Figure A.1: Key-Generation Request and Key Transfer in a Communicating Group 1552  1. If Entity B would like to exchange information with Entity A, then Entity B could, for example, 1553  send a key-generation request to Entity A asking for an AEK to be used with the AES-128 1554  block cipher: 1555  key-generation_request(AEK: AES-128; communicating group: Entity_A, Entity_B; 1556  auth_code1). 1557  where auth_code1 is generated using the shared DAK (DAKA,B). 1558  2. Entity A generates keys in response to requests from Entity B or of its own volition. 1559  (a) If Entity A receives a key-generation request: Entity A attempts to verify that the message 1560  containing the key-generation request (see step 1) was correctly received from a member 1561  of the communicating group (i.e., Entity B).  If the verification fails, then an error message 1562  is sent to Entity B containing error report information, and further interaction is 1563  terminated.  1564  error_report(previous_message_id; error_type; auth_code2), 1565  where previous_message_id is the ID for the key-generation_request (see step 1), the 1566  error_type is the type of error, and auth_code2 is generated using DAKA, B. 1567  Entity B could choose to resend the key-generation request (see step 1). 1568  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  49  (b) When Entity A generates a key for Entity B (either in response to a verified request from 1569  Entity B or of its own volition), a transaction authentication key is also generated 1570  (Transaction_DAKA,B) rather than using the already-shared authentication key (i.e., 1571  DAKA,B). Entity A wraps the key to be sent (K) and the transaction authentication key using 1572  the shared KWK (KWKA,B):  1573  wrapped_keys = WRAP(KWKA,B, K || Transaction_DAKA,B). 1574  (c) The wrapped_key is sent to Entity B in a message containing key transfer information: 1575  key_transfer(wrapped_keys; communicating_group: Entity_A, Entity_B; auth_code3), 1576  where auth_code3 is generated using Transaction_DAKA,B. 1577  3. When the key transfer information is received, Entity B sends either an acknowledgement or 1578  an error report.  1579  (a) Entity B unwraps the wrapped keys and uses Transaction_DAKA,B to attempt a verification 1580  of the message. If the verification fails, an error message is sent to Entity A containing 1581  error report information: 1582  error_report(previous_message_id; error_type; auth_code4), 1583  where previous_message_id is the ID for the message containing the key transfer 1584  information (see step 2c), the error_type is the type of error, and auth_code4 is generated 1585  using DAKA, B. Since the message had an error, Transaction_DAKA, B may not have been 1586  received correctly, so DAKA, B is used as the authentication key. 1587  Entity A may resend the key transfer information (see step 2c).  1588  (b) If the verification of the authentication code is successful, a message containing 1589  acknowledgment information is sent: 1590  acknowledgement(previous_msg_id; auth_code5), 1591  where previous_message_id is the ID for the message containing the key transfer 1592  information (see step 2c), and auth_code5 is generated using Transaction_DAKA, B. 1593  Note that for the sake of brevity, Entity A's receipt and handling of the acknowledgement 1594  information is not discussed in detail here. However, if the message containing the 1595  acknowledgement information cannot be verified, then Entity A could send an error 1596  message to Entity B, and Entity B could resend the acknowledgement information (see step 1597  3b). 1598  A.2  Using a KDC to Distribute Keys to an Already-Established Communicating 1599  Group 1600  Entities A and B are members of a communicating group; they share KWKA, B and  1601  DAKA, B as their Layer 1 keys. Neither entity can generate keying material. However, they are 1602  subscribers of the same KDC.  1603  Entity A shares KWKA, KDC and DAKA, KDC with the KDC; Entity B shares KWKB, KDC and DAKB, 1604  KDC with the KDC. Additional keying material can be generated by the KDC and distributed to A 1605  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  50  and B. Figure A.2a and Figure A.2b depict two alternatives, differing only in how the keys are 1606  distributed to A and B after generation by the KDC.  1607  1608  Figure A.2a: Using a KDC (Alternative 1) 1609  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  51  1610  Figure A.2b: Using a KDC (Alternative 2) 1611  1. Entity B may optionally send a key-generation request to Entity A asking for a KWK to be 1612  used with the AES-128 block cipher. 1613  key-generation_request(KWK: AES-128; communicating_group: Entity_A, Entity_B; 1614  auth_code1). 1615  where auth_code1 is generated using the shared DAK (DAKA,B). 1616  2. (a) If Entity A receives a key-generation request (see step 1): Entity A attempts to verify that 1617  the message containing the key-generation request was correctly received from a member 1618  of the communicating group (i.e., Entity B).  If the verification fails, then an error message 1619  is sent to Entity B containing error report information, and further interaction is 1620  terminated.  1621  error_report(previous_message_id; error_type; auth_code2), 1622  where previous_message_id is the ID for the message containing the key-1623  generation_request (see step 1), the error_type is the type of error, and auth_code2 is 1624  generated using DAKA, B. 1625  Entity B could choose to resend the key-generation request (see step 1). 1626  (b) If the verification of the authentication code is successful, a message containing 1627  acknowledgment information is sent to Entity B: 1628  acknowledgement(previous_msg_id; auth_code3), 1629  where previous_message_id is the ID for the message containing the key-generation 1630  request (see step 1) and auth_code3 is generated using DAKA, B. 1631  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  52  3. Entity A sends a key-generation request to the KDC asking for a KWK to be used with the 1632  AES-128 block cipher and shared with Entity B: 1633  key-generation_request(KWK: AES-128; communicating_group: Entity_A, Entity_B; 1634  auth_code4), 1635  where auth_code4 is generated on the message containing the key-generation request using the 1636  DAK shared with the KDC (DAKA, KDC). 1637  4. (a) The KDC attempts to verify auth_code4 using the DAK shared with Entity A (DAKA, KDC). 1638  If the verification fails or if Entity B is not a subscriber of the KDC, error report 1639  information is returned to Entity A in an error message, and the process is terminated.  1640  error_report(previous_message_id; error_type; auth_code5), 1641  where previous_message_id is the ID for the message containing the key-generation 1642  request (see step 3), error_type is the type of error, and auth_code5 is generated using 1643  DAKA, KDC. 1644  If the error was because of a verification failure, Entity A may choose to resend the key-1645  generation request (see step 3). If a key-generation request was received from Entity B 1646  (see step 1), Entity A may notify Entity B of the problem in an error message (not shown 1647  in the figures). 1648  (b) If the verification of the key-generation_request is successful, and Entity B is a subscriber 1649  of the KDC, the KDC generates the requested key (K) and an authentication key 1650  (Transaction_auth_key), and wraps one copy of the keys using the KWK shared with 1651  Entity A (KWKA, KDC) and another copy of the keys using the KWK shared with Entity B 1652  (KWKB, KDC).  1653  Entity_A_wrapped_keys = WRAP(KWKA, KDC, K || Transaction_auth_key) 1654  Entity_B_wrapped_keys = WRAP(KWKB, KDC, K || Transaction_auth_key). 1655  At this point in the process, go to Alternative 1 or Alternative 2. 1656  Alternative 1 (using Figure A.2a): Continuing at step 4 (c). 1657  (c) The two copies of the wrapped keys are sent to Entity A in a key transfer message: 1658  key_transfer(Entity_A_wrapped_keys, Entity_B_wrapped_keys; 1659  communicating_group: Entity_A, Entity_B; auth_code6), 1660  where auth_code6 is generated using Transaction_auth_key. 1661  5. (a) Upon receiving the key_transfer information, Entity A extracts its copy of the wrapped 1662  keys from the message (see step 4c), unwraps the keys using the KWK shared with the 1663  KDC (KWKA, KDC), and checks the message's authentication code (auth_code6) using the 1664  unwrapped transaction authentication key (Transaction_auth_key).  1665  (b) If the verification of the authentication code fails, then an error-report message is sent to 1666  the KDC containing error_report information:  1667  error_report(previous_message_id; error_type; auth_code7), 1668  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  53  where previous_message_id is the ID for the message containing the key_transfer 1669  information (see step 4c), the error_type is the type of error, and auth_code7 is generated 1670  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 1671  authentication key (Transaction_auth_key) in the message may not be correct, so DAKA, 1672  KDC is used as the authentication key.  1673  The KDC may choose to resend the key_transfer information (see step 4c). 1674  (c) If the verification of the authentication code is successful, a message containing 1675  acknowledgment information is sent to the KDC: 1676  acknowledgement(previous_msg_id; auth_code8), 1677  where previous_message_id is the ID for the message containing the key transfer 1678  information (see step 4c), and auth_code8 is generated using Transaction_auth_key. 1679  6. Entity A creates and sends a message to Entity B containing key transfer information that 1680  includes Entity B's copy of the wrapped keys: 1681  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; auth_code9), 1682  where auth_code9 is computed on the message using the transaction authentication key 1683  received from the KDC (Transaction_auth_key). 1684  7. Entity B sends either acknowledgement or error_report information to Entity A after receiving 1685  the message. 1686  (a) Entity B extracts the wrapped keys from the received key transfer information (see step 6), 1687  unwraps the keys using the KWK shared with the KDC (KWKB, KDC), and checks the 1688  message's authentication code (auth_code9) using the unwrapped authentication key 1689  (Transaction_auth_key).  1690  (b) If the verification of the authentication code fails, then an error message is sent to Entity A 1691  containing error report information.  1692  error_report(previous_message_id; error_type; auth_code10), 1693  where previous_message_id is the ID for the message containing the key transfer 1694  information (see step 6), the error_type is the type of error, and auth_code10 is computed 1695  on the message using DAKA, B. Since the received message had an error, 1696  Transaction_auth_key may have been received incorrectly, so DAKA, B is used as the 1697  authentication key. 1698  Entity A may resend the key transfer message (see step 6). 1699  (c) If the verification of the authentication code is successful, then a message containing 1700  acknowledgement information is sent to Entity A:  1701  acknowledgement(previous_msg_id; auth_code11), 1702  where previous_message_id is the ID for the message containing the key transfer 1703  information (see step 6), and auth_code11 is generated using Transaction_auth_key. 1704  Note that for the sake of brevity, Entity B's receipt and handling of the acknowledgement 1705  information is not discussed in detail here. However, if the message containing the 1706  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  54  acknowledgement information cannot be verified, then Entity B could send an error 1707  message to Entity A, and Entity A could resend the acknowledgement information (see step 1708  7c). 1709  At this point, both Entity A and Entity B know that they have successfully received the new KWK. 1710  Alternative 2 (using Figure A.2b): Continuing at step 4 (c). 1711  (c) The KDC sends a message containing key transfer information to Entity A with the 1712  appropriate copy of the wrapped keys: 1713  key_transfer(Entity_A_wrapped_keys; communicating_group: Entity_A, Entity_B; 1714  auth_code12),  1715  where auth_code12 is generated using Transaction_auth_key. 1716  5. (a) Entity A extracts the wrapped keys from the received message (see step 4c), unwraps the 1717  keys using the KWK shared with the KDC (KWKA, KDC), and checks the message's 1718  authentication code (auth_code12) using the unwrapped authentication key 1719  (Transaction_auth_key).  1720  (b) If the verification of the authentication code fails, then an error message containing error 1721  report information is sent to the KDC.  1722  error_report(previous_message_id; error_type; auth_code14), 1723  where previous_message_id is the ID for the message containing the key transfer 1724  information (see step 4c), the error_type is the type of error, and auth_code14 is generated 1725  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 1726  authentication key (Transaction_auth_key) in the message may not be correct, so DAKA, 1727  KDC is used as the authentication key.  1728  The KDC may resend the message containing the key transfer information (see step 4c). 1729  (c) If the verification of the authentication code is successful, then a message containing 1730  acknowledgement information is sent to the KDC.  1731  acknowledgement(previous_msg_id; auth_code15), 1732  where previous_message_id is the ID for the message containing the key transfer 1733  information (see step 4c), and auth_code15 is generated using Transaction_auth_key. 1734  6. If the KDC receives an acknowledgement from Entity A (indicating that Entity A has the 1735  keying material), the KDC sends a message containing key transfer information to Entity B 1736  with the appropriate copy of the wrapped keys: 1737  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; 1738  auth_code13), 1739  where auth_code13 is generated using Transaction_auth_key. 1740  7. (a) Entity B extracts the wrapped keys from the key transfer information in the received 1741  message (see step 4c), unwraps the keys using the KWK shared with the KDC (KWKB, 1742  KDC), and checks the message's authentication code (auth_code13) using the unwrapped 1743  authentication key (Transaction_auth_key).  1744  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  55  (b) If the verification of the authentication code fails, then an error message is sent to the KDC 1745  containing error report information.  1746  error_report(previous_message_id; error_type; auth_code16), 1747  where previous_message_id is the ID for the message containing the key transfer 1748  information (see step 4c), the error_type is the type of error, and auth_code16 is generated 1749  using DAKB, KDC. Note that since there was an error in the received message, the wrapped 1750  authentication key (Transaction_auth_key) in the key transfer information may not be 1751  correct, so DAKB, KDC is used as the authentication key.  1752  The KDC may resend the message (see step 4c). 1753  (c) If the verification of the authentication code is successful, then a message containing 1754  acknowledgement information is sent to the KDC.  1755  acknowledgement(previous_msg_id; auth_code17), 1756  where previous_message_id is the ID for the message containing the key transfer 1757  information (see step 4c), and auth_code17 is generated using Transaction_auth_key. 1758  Note that for the sake of brevity, the KDC's receipt and handling of the acknowledgement 1759  information is not discussed in detail here. However, if the message containing the 1760  acknowledgement information cannot be verified, then the KDC could send an error 1761  message to Entity B, and Entity B could resend the acknowledgement information (see step 1762  7c). 1763  8. At this point, the KDC and Entity B know that Entities A and B share the new keys (because 1764  of the protocol flow; see steps 5 and 6), but Entity A has has not been notified of this fact. 1765  The KDC sends an a message to Entity A containing acknowledgement information indicating 1766  that Entity B has successfully received the new keys: 1767  acknowledgement(previous_msg_id; auth_code18), 1768  where previous_message_id is the ID for the message containing the key generation request 1769  (see step 3), and auth_code18 is generated using Transaction_auth_key. 1770  Note that for the sake of brevity, Entity A's receipt and handling of the acknowledgement 1771  information is not discussed in detail here. However, if the message containing the 1772  acknowledgement information cannot be verified, then Entity A could send an error message 1773  to the KDC, and the KDC could resend the acknowledgement information (see step 7c). 1774  If the acknowledgement message is successfully verified, Entities A and B now know that they 1775  share the new keys. 1776  A.3 Using a KDC to Establish a Communicating Group 1777  Entities A and B do not share keys, but a decision has been made that they need to communicate 1778  securely. This can be done using the services of a KDC to form a communicating group. 1779  Both entities share keys with the same KDC. Entity A shares KWKA, KDC and DAKA, KDC with the 1780  KDC; Entity B shares KWKB, KDC and DAKB, KDC with the KDC (see Figure A.3). 1781  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  56  In this example, Entity A (the requesting subscriber) requests the KDC to generate keys to be 1782  shared with Entity B in order to form a communicating group. The KDC generates the requested 1783  keys and sends them to Entity B. After receiving an acknowledgement from Entity B that the keys 1784  have been received correctly, the KDC sends the keys to Entity A. When an acknowledgement of 1785  correct receipt has been received from Entity A, the communicating group is considered to be 1786  established. 1787  Variants of this scenario are possible but would require other message flows. For example, when 1788  the KDC begins the process by sending keys to a subset of subscribers without receiving a request, 1789  one or more additional messages may be required to provide assurance to the entities that they do 1790  indeed share keys and form a communicating group (e.g., messages from the KDC or between the 1791  entities). If communicating groups are larger than two entities, then additional messages will be 1792  required to distribute the keys to the additional entities and to provide mutual assurance that the 1793  group has been completely established. 1794  The steps following Figure A.3 discuss the case where one subscriber (Entity A) requests the KDC 1795  to generate keys for Entity B. 1796  1797  Figure A.3: Establishing a Communicating Group Using a KDC 1798  1. Entity A sends a key-generation request to the KDC asking for a KWK and DAK to share with 1799  Entity B: 1800  key-generation_request(KWK, DAK; communicating_group: Entity_A, Entity_B; 1801  auth_code1), 1802  where auth_code1 is generated on the message containing the key-generation request using the 1803  DAK shared with the KDC (DAKA, KDC). 1804  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  57  2. The KDC attempts to verify that the message containing the key-generation request was 1805  correctly received and that Entity B is a KDC subscriber. If the verification fails, then an error 1806  message is sent to Entity A containing error report information, and further interaction is 1807  terminated.  1808  error_report(previous_message_id; error_type; auth_code2), 1809  where previous_message_id is the ID for the message containing the key-generation_request 1810  (see step 1), the error_type is the type of error, and auth_code2 is generated using DAKA, KDC. 1811  Entity A could choose to resend the key-generation request (see step 1). 1812  3. (a) The KDC generates the requested keying material to be shared between Entities A and B 1813  (KWKA, B and DAKA, B) and a transaction authentication key (Transaction_auth_key).  In 1814  this example, KWKA, B is intended to be a Layer 1 key, with DAKA, B beneath it in the key 1815  hierarchy. This will allow a termination of the communicating group in the future by 1816  revoking just the Layer 1 key (see Section 5.5 and Appendix A.8, Example 1). Therefore, 1817  KWKA, B is wrapped using the KWK shared with the intended receiving entity (A or B), 1818  and DAKA, B is wrapped using KWKA, B. For efficiency reasons, the transaction 1819  authentication key is wrapped using the KWK shared with the intended receiving entity:  1820  Entity_A_wrapped_KWK_and auth_key = WRAP(KWKA, KDC, KWKA, B || 1821  Transaction_auth_key); 1822  Entity_B_wrapped_KWK_and auth_key = WRAP(KWKB, KDC, KWKA, B || 1823  Transaction_auth_key); 1824  wrapped_DAK = WRAP(KWKA, B, DAKA, B). 1825  (b) The KDC creates and sends a message containing key transfer information to Entity B (see 1826  step 3a): 1827  key_transfer(Entity_B_wrapped_KWK_and auth_key, wrapped_DAK; 1828  communicating_group: Entity_A, Entity_B; auth_code3), 1829  where auth_code3 are generated using Transaction_auth_key. 1830  4. (a) Entity B extracts and unwraps KWKA, B and Transaction_auth_key using the KWK shared 1831  with the KDC (KWKB, KDC), and checks the message's authentication code (auth_code3) 1832  using the unwrapped authentication key (Transaction_auth_key).  1833  (b) If the verification of the authentication code fails, or if Entity B does not wish to establish 1834  a communicating group with Entity A, then an error message is sent to the KDC containing 1835  error report information.  1836  error_report(previous_message_id; error_type; auth_code4), 1837  where previous_message_id is the ID for the message containing the key transfer 1838  information (see step 3b), the error_type is the type of error, and auth_code4 is generated 1839  using DAKB, KDC. Note that when there is an error in the received message, the wrapped 1840  authentication key (Transaction_auth_key) in the key transfer information may not be 1841  correct, so DAKB, KDC is used as the authentication key. Also, if Entity B does not want to 1842  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  58  establish a communicating group with Entity A, using the authentication key received in 1843  the key transfer information (Transaction_auth_key) may not be desirable.  1844  The KDC may resend the key transfer message (see step 3b). Alternatively, the KDC may 1845  send error report information to Entity A indicating that the keys could not be established 1846  with Entity B (not shown in the figure). 1847  (c) If the verification of the authentication code is successful, and Entity B wants to establish 1848  a communicating group with Entity A, then Entity B unwraps DAKA, B using KWKA, B. 1849  (d) Entity B sends a message to the KDC containing acknowledgement information:  1850  acknowledgement(previous_msg_id; auth_code5), 1851  where previous_message_id is the ID for the message containing the key transfer 1852  information (see step 3c), and auth_code5 is generated using Transaction_auth_key. 1853  5.  Upon receiving a message from Entity B containing the acknowledgement information and 1854  verifying its correct receipt (left as an exercise for the reader!), the KDC prepares and sends 1855  key transfer information to Entity A: 1856  key_transfer(Entity_A_wrapped_keys; communicating_group: Entity_A, Entity_B; 1857  auth_code6), 1858  where auth_code6 are generated using Transaction_auth_key. 1859  6. (a) Entity A extracts the wrapped keys from the received message (see step 5), unwraps the 1860  keys using the KWK shared with the KDC (KWKA, KDC), and checks the message's 1861  authentication code (auth_code6) using the unwrapped authentication key 1862  (Transaction_auth_key).  1863  (b) If the verification of the authentication code fails, then an error message containing  error 1864  report information is sent to the KDC.  1865  error_report(previous_message_id; error_type; auth_code7), 1866  where previous_message_id is the ID for the message containing the key transfer 1867  information (see step 5), the error_type is the type of error, and auth_code7 is generated 1868  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 1869  authentication key (Transaction_auth_key) in the message may not be correct, so DAKA, 1870  KDC is used as the authentication key.  1871  The KDC may resend the message containing the key transfer information (see step 5). 1872  (c) If the verification of the authentication code is successful, then a message containing 1873  acknowledgement information is sent to the KDC.  1874  acknowledgement(previous_msg_id; auth_code8), 1875  where previous_message_id is the ID for the message containing the key transfer 1876  information (see step 5), and auth_code8 is generated using Transaction_auth_key. 1877  At this point, Entities A and B share a KWK and DAK as members of the same communicating 1878  group. However, only Entity A knows for sure that the keys are shared (because of the order that 1879  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  59  the keys were distributed by the KDC in this example). Entity B could be notified of this fact in a 1880  couple of ways: 1881  • By Entity A or B sending a cryptographically protected message to the other party (e.g., 1882  protected using the newly established KWK and DAK); or 1883  • By the KDC sending acknowledgement information to Entity B indicating that the 1884  establishment of the communicating group has been completed.  1885  A.4 Using a KTC to Establish a Communicating Group  1886  Entities A and B do not share keys, but a decision has been made that they need to communicate 1887  securely. This can be done using the services of a KTC to form a communicating group. 1888  In this example, Entity A generates Layer 1 keys to be shared with Entity B and sends them to the 1889  KTC for translation. The KTC translates the keys and sends them to Entity B. After receiving an 1890  acknowledgement that the keys have been received correctly by Entity B, the KTC sends an 1891  acknowledgement of correct receipt to Entity A; the communicating group is then considered to 1892  be established. 1893  Variants of this scenario are possible but would require other message flows. For example, if 1894  communicating groups are larger than two entities, then additional messages will be required to 1895  distribute the keys to the additional entities and to provide mutual assurance that the group has 1896  been completely established. 1897  Figure A.4 shows the use of a KTC by two entities (A and B) that want to establish a 1898  communicating group. Both entities are subscribers of the same KTC; Entity A shares KWKA, KTC 1899  and DAKA, KTC with the KTC; Entity B shares KWKB, KTC and DAKB, KTC with the KTC. In this case, 1900  Entity A can generate keying material. For this example, the KTC does not generate keys. 1901  1902  Figure A.4: Using a KTC 1903  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  60  1.  (a) Entity A generates a KWK (KWKA, B) and an authentication key (DAKA, B) to be sent to 1904  Entity B, and another authentication key (Transaction_auth_key) to provide authentication 1905  for the translation request to be sent to the KTC. 1906  (b) Entity A wraps the generated keys using the KWK shared with the KTC (KWKA, KTC): 1907  wrapped_keys = WRAP(KWKA, KTC, KWKA, B || DAKA, B || Transaction_auth_key). 1908  Note that in this example, KWKA, B and DAKA, B are wrapped using the same key (i.e., 1909  KWKA, KTC). In this case, KWKA, B and DAKA, B are both Layer 1 keys.  1910  (c) Entity A prepares and sends a message containing translation request information to the 1911  KTC with the wrapped keys: 1912  translation_request(wrapped_keys; requester: Entity_A; sharing_entities: Entity_A, 1913  Entity_B; auth_code1), 1914  where auth_code1 is generated using the message's authentication key 1915  (Transaction_auth_key). 1916  2. The KTC unwraps the wrapped keying material in the translation request information and uses 1917  the unwrapped message authentication key (Transaction_auth_key) to verify the message. If 1918  the verification fails, an error report is sent to Entity A: 1919  error_report(previous_message_id; error_type; auth_code2), 1920  where previous_message_id is the ID for the message containing the translation request 1921  information (see step 1), the error_type is the type of error, and auth_code2 is generated using 1922  DAKA, KTC. Note that since there was an error in the message, the wrapped authentication key 1923  (Transaction_auth_key) in the translation request information may not be correct, so DAKA, 1924  KTC is used as the authentication key. 1925  Entity A may choose to resend the translation request information (not shown in the figure). 1926  3. (a) If the authentication code is successfully verified, the KTC wraps the received keys for 1927  Entity B using the KWK shared with B (KWKB, KTC): 1928  wrapped_keys = WRAP(KWKB, KTC, KWKA, B || DAKA, B || Transaction_auth_key). 1929  (b)  The KTC prepares and sends a message to Entity B containing the wrapped keys as key 1930  transfer information and generates auth_code3 on the message using the received 1931  authentication key (Transaction_auth_key): 1932  key_transfer(wrapped_keys; communicating_group: Entity_A, Entity_B; auth_code3). 1933  4. (a) Entity B unwraps the received keys and attempts to verify auth_code3 using the 1934  authentication key included in the message containing the key transfer information 1935  (Transaction_auth_key); see step 3b.  1936  (b) If the verification fails or if Entity B does not want to establish a communicating group 1937  with Entity A, a message containing error report information is returned to the KTC, and 1938  the process is terminated.  1939  error_report(previous_message_id; error_type; auth_code4), 1940  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  61  where previous_message_id is the ID for the message containing the key transfer 1941  information (see step 3b), error_type is the type of error, and auth_code4 is generated on 1942  the error message using DAKB, KTC. Note that when there is an error in the received 1943  message, the wrapped authentication key (Transaction_auth_key) in the key transfer 1944  information may not be correct, so DAKB, KTC is used as the authentication key. Also, if 1945  Entity B does not want to establish a communicating group with Entity A, using the 1946  authentication key received in the key transfer information (Transaction_auth_key) may 1947  not be desirable. 1948  The KTC may choose to resend the key transfer information (not shown in the figure). 1949  (c) If the verification is successful, and Entity B wants to establish a communicating with 1950  Entity A, Entity B sends a message containing acknowledgement information to the KTC: 1951  acknowledgement(previous_msg_id; auth_code5), 1952  where previous_message_id is the ID for the message containing the key-transfer 1953  information (see step 3b), and auth_code5 is generated on the message using 1954  Transaction_auth_key. 1955  5. If the message containing the acknowledgement information is received correctly from Entity 1956  B43, then the KTC prepares and sends a message containing acknowledgement information to 1957  Entity A indicating that the communicating group has been established successfully: 1958  acknowledgement(previous_msg_id; auth_code6), 1959  where previous_message_id is the ID for the message containing the translation request 1960  information (see step 1b), and auth_code6 is generated using Transaction_auth_key. 1961  Note that for the sake of brevity, Entity A's receipt and handling of the acknowledgement 1962  information is not discussed in detail here. However, if the message containing the 1963  acknowledgement information cannot be verified, then Entity A could send an error message 1964  to the KTC, and the KTC could resend the acknowledgement information above. 1965  Note: alternatively, a special-purpose confirmation message could be used to indicate 1966  successful communicating-group establishment. 1967  A.5 Using a Multiple-Center Group to Generate a Key for Establishing a 1968  Communicating Group 1969  A communicating group may be established using the services of a multiple-center group to 1970  generate the Layer 1 keys to be shared by the members of a communicating group. In this example 1971  (shown as Figure A.5), the multiple-center group consists of Center 1 and Center 2; these centers 1972  share a KWK and a DAK (e.g., KWK1, 2 and DAK1, 2). Center 1 is Entity A's agent to the group; 1973  they share KWKA, 1 and DAKA, 1. Center 2 is Entity B's agent to the group; they share KWKB, 2 and 1974  DAKB, 2. Entities A and B do not currently share keys.  1975  In this example, Center 1 generates keying material at Entity A's request and sends it to Center 2 1976  for translation for Entity B. Center 2 translates the keying material for Entity B and sends it to B. 1977  After receiving an acknowledgement that the keys have been received correctly by Entity B, Center 1978  43 The handling of errors in the received acknowledgement is left to the reader.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  62  2 sends an acknowledgement of correct receipt to Center 1, who forwards the acknowledgement 1979  to Entity A; the communicating group is then considered to be established. 1980  1981  Figure A.5: Establishing a Communicating Group Using a Multiple-Center Group for Key 1982  Generation 1983  1. Entity A may optionally send a key-generation request to its agent asking for the generation of 1984  a KWK and DAK to be used with Entity B. 1985  key-generation_request(KWK, DAK; communicating_group: Entity_A, Entity_B; 1986  auth_code1). 1987  where auth_code1 is generated on the message containing the key_generation request 1988  information using DAKA, 1. 1989  2. Center 1 attempts to verify auth_code1 using the DAK shared with Entity A (i.e., DAKA, 1). If 1990  the verification fails, an error message containing error report information is returned to Entity 1991  A, and the process is terminated.  1992  error_report(previous_message_id; error_type; auth_code2), 1993  where previous_message_id is the ID for the message containing the key-generation request 1994  information (see step 1), the error_type is the type of error, and auth_code2 is generated 1995  using DAKA, 1. 1996  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  63  Entity A may choose to resend the key-generation request information (not shown in the 1997  figure). 1998  3. (a) If the verification of the message containing the key-generation request information is 1999  successful, but the other entity identified in the key-generation request (Entity B) is not a 2000  subscriber of Center 1, then Center 1 suspects that Entity B may be a subscriber of another 2001  center in the multiple-center group (i.e., Center 2 in this example).  2002  (b) Center 1 generates the requested keying material (KWKA, B and DAKA, B) and an 2003  authentication key (Transaction_auth_key). 2004  (c) Center 1 needs to send translation request information to Center 2, so another 2005  authentication key is generated (Group_Transaction_auth_key) and wrapped with the keys 2006  to be translated using the KWK shared with Center 2 (KWK1,2). 2007  Center_2_wrapped_keys = WRAP(KWK1, 2, KWKA, B || DAKA, B || Transaction_auth_key || 2008  Group_Transaction_auth_key). 2009  (d) Center 1 prepares and sends a message to Center 2 containing translation request 2010  information with the wrapped keys: 2011  translation_request(Center_2_wrapped_keys; requester: Center_1; communicating_group: 2012  Entity_A, Entity B; auth_code3), 2013  where auth_code3 is generated using Group_Transaction_auth_key. 2014  4. (a) Center 2 unwraps the keys in the translation request information using KWK1,2 to obtain 2015  the authentication key used for the message (Group_Transaction_auth_key). 2016  (b) Center 2 attempts to verify auth_code3 using the unwrapped authentication key 2017  (Group_Transaction_auth_key). If the verification fails, or Entity B is not a subscriber of 2018  Center 2, a message containing error report information is returned to Center 1, and the 2019  process is terminated.  2020  error_report(previous_message_id; error_type; auth_code4), 2021  where previous_message_id is the ID for the message containing the translation request 2022  information (see step 3d), the error_type is the type of error, and auth_code4 is generated 2023  using DAK1, 2. Note that since there was an error in the received message, the wrapped 2024  authentication key (Group_Transaction_auth_key) in the received message may not be 2025  correct, so DAK1, 2 is used as the authentication key. 2026  Center 1 may choose to resend the translation request information (not shown in the 2027  figure). 2028  Center 1 may notify Entity A of the problem in an error message (not shown in the figure). 2029  5. (a) If the verification was successful and Entity B is a subscriber of Center 2, Center 2 2030  translates the keying material by wrapping it in the KWK shared with Entity B (KWKB, 2): 2031  Entity_B wrapped_keys = WRAP(KWKB, 2, KWKA, B, DAKA, B || Transaction_auth_key). 2032  (b) Center 2 then prepares and sends a message containing the key transfer information to 2033  Entity B. 2034  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  64  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; 2035  auth_code5), 2036  where auth_code5 is generated using Transaction_auth_key. 2037  6. (a) Entity B unwraps the received keying material and attempts to verify auth_code5 using the 2038  transaction authentication key provided in the key transfer information 2039  (Transaction_auth_key). If the verification fails, or Entity B does not wish to establish a 2040  communicating group with Entity A, a message containing error report information is 2041  returned to Center 2:  2042  error_report(previous_message_id; error_type; auth_code6), 2043  where previous_message_id is the ID for the message containing the key transfer 2044  information (see step 5b), the error_type is the type of error, and auth_code6 is generated 2045  using DAKB, 2. Note that when there is an error in the received message, the wrapped 2046  authentication key (Transaction_auth_key) in the key transfer information may not be 2047  correct, so DAKB, 2 is used as the authentication key. Also, if Entity B does not want to 2048  establish a communicating group with Entity A, using the authentication key received in 2049  the key transfer information (Transaction_auth_key) may not be desirable. 2050  Center 2 may choose to resend the key transfer information if the previous message was in 2051  error (not shown in the figure). 2052  (b) If the verification is successful, and Entity B wishes to establish a communicating group 2053  with Entity A, Entity B sends a message containing acknowledgement information to 2054  Center 2: 2055  acknowledgement(previous_msg_id; auth_code7), 2056  where previous_message_id is the ID for the message containing the key-transfer 2057  information (see step 5b), and auth_code7 is generated using Transaction_auth_key. 2058  7. If the acknowledgement is received correctly from Entity B, then the Center 2 forwards the 2059  acknowledgement information to Center 1, indicating that the communicating group has been 2060  established successfully: 2061  acknowledgement(previous_msg_id; auth_code8), 2062  where previous_message_id is the ID for the message containing the translation request 2063  information (see step 3d), and auth_code8 is generated using Group_Transaction_auth_key. 2064  For the sake of brevity, Center 1's receipt and verification of the message received from Center 2065  2 containing the acknowledgement information is not discussed in detail here. However, if 2066  there is an error in the message, Center 1 could send a message to Center 2 containing error 2067  report information, and Center 2 could resend the acknowledgement information above. 2068  8. (a) Assuming that the message containing the acknowledgement information is received 2069  correctly from Center 2, Center 1 wraps the keys for Entity A using the KWK shared with 2070  Entity A (KWKA,1): 2071  Entity_A_wrapped_keys = WRAP(KWKA, 1, KWKA, B || DAKA, B || Transaction_auth_key). 2072  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  65  (b) Center 1 then prepares and sends a message containing the key transfer information to 2073  Entity A: 2074  key_transfer(Entity_A_wrapped_keys; communicating_group: Entity_A, Entity_B; 2075  auth_code9), 2076  where auth_code9 is generated using Transaction_auth_key. 2077  9. (a) Entity A attempts to verify auth_code9 using the transaction authentication key provided 2078  in the key transfer information (Transaction_auth_key). If the verification fails, a message 2079  containing error report information is returned to Center 1:  2080  error_report(previous_message_id; error_type; auth_code10), 2081  where previous_message_id is the ID for the message containing the key transfer 2082  information (see step 8b), the error_type is the type of error, and auth_code6 is generated 2083  using DAKA, 1. Note that when there is an error in the received message, the wrapped 2084  authentication key (Transaction_auth_key) in the key transfer information may not be 2085  correct, so DAKA, 1 is used as the authentication key.  2086  Center 1 may choose to resend the key transfer information if the previous message was in 2087  error (not shown in the figure). 2088  (b) If the message containing the key transfer information is received correctly from Center 1, 2089  then the Entity A sends the acknowledgement information to Center 1 indicating that the 2090  key transfer information was received correctly: 2091  acknowledgement(previous_msg_id; auth_code11), 2092  where previous_message_id is the ID for the message containing the key transfer 2093  information (see step 8b), and auth_code11 is generated using Transactiun_auth_key. 2094  Note that for the sake of brevity, Center 1's receipt and handling of the acknowledgement 2095  information is not discussed in detail here. However, if the message containing the 2096  acknowledgement information cannot be verified, then Center 1 could send an error 2097  message to Entity A, and Entity A could resend the acknowledgement information above. 2098  At this point, Entities A and B share a KWK and DAK as members of the same communicating 2099  group. However, only Entity A knows for sure that the keys are shared (because of the order that 2100  the keys were distributed by the multiple-center group in this example). Entity B could be notified 2101  of this fact by Entity A or B sending a cryptographically protected message to the other party (e.g., 2102  protected using the newly established KWK and DAK). Alternatively, a special purpose-2103  confirmation message could be used to indicate successful establishment of the communicating 2104  group. 2105  A.6 Using a Multiple-Center Group to Establish a Communicating Group Only 2106  Using its Key-Translation Services 2107  Figure A.6 depicts an example of information flow for establishing a communicating group using 2108  the key-translation services of a multiple-center group. In this example, Center 1 and Center 2 are 2109  members of the same multiple-center group and share a KWK 2110  (KWK1, 2) and an authentication key (DAK1, 2). Entity A's agent to the group is Center 1; they share 2111  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  66  KWKA, 1 and DAKA, 1. Entity B's agent to the group is Center 2; they share KWKB, 2 and DAKB, 2. 2112  Entity A and Center 1 can generate keys, but Center 2 cannot. Entities A and B wish to establish 2113  a communicating group. 2114  Note that this example is very similar to the example in Appendix A.5; the main difference is that 2115  Entity A can generate keys. 2116  In this example, Entity A generates keying material and sends it to its agent for translation for 2117  Entity B. Center 1 forwards the keying material to Center 2 for translation and providing the 2118  translated keying material to Entity B. After receiving an acknowledgement from Entity B that the 2119  keys have been received correctly, Center 2 sends an acknowledgement of correct receipt to Center 2120  1, who forwards the acknowledgement to Entity A; the communicating group is then considered 2121  to be established. 2122  2123  Figure A.6: Using the Translation Services of a Multiple-Center Group to Establish a 2124  Communicating Group 2125  1. (a) Entity A generates a KWK, a DAK and a transaction authentication key 2126  (Transaction_auth_key) to be sent to Entity B. 2127  (b) Entity A wraps the keys in the KWK shared with its agent (KWKA, 1): 2128  wrapped_keys = WRAP(KWKA, 1, KWKA, B || DAKA, B || Transaction_auth_key). 2129  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  67  (c) Entity A prepares and sends a message containing translation request information to Center 2130  1 that includes the wrapped keys: 2131  translation_request(wrapped_keys; requester: Entity_A; communicating_group: 2132  Entity_A, Entity B; auth_code1), 2133  where auth_code1 is generated using the generated authentication key 2134  (Transaction_auth_key). 2135  2. (a) Center 1 unwraps the wrapped keying material in the translation request information and 2136  uses the unwrapped transaction authentication key (Transaction_auth_key) to verify the 2137  message containing the translation request information.  2138  (b) If the verification fails, a message is sent to Entity A containing the error report 2139  information: 2140  error_report(previous_message_id; error_type; auth_code2), 2141  where previous_message_id is the ID for the message containing the translation request 2142  information (see step 1c), the error_type is the type of error, and auth_code2 is computed 2143  using DAKA, 1. Note that since there was an error in the received message, the wrapped 2144  authentication key (Transaction_auth_key) in the translation request information may not 2145  be correct, so DAKA, 1 is used as the authentication key. 2146  Entity A may choose to resend the translation request information (not shown in the 2147  figure). 2148  3. If the verification of the message containing the key-generation request is successful, but the 2149  other entity identified in the key-generation request information (Entity B) is not a subscriber 2150  of Center 1, then Center 1 suspects that Entity B may be a subscriber of another center in the 2151  multiple-center group (i.e., Center 2 in this example).  2152  (a) Center 1 needs to send translation request information to Center 2, so generates an 2153  authentication key (Group_Transaction_auth_key) and wraps it with the keys to be 2154  translated using the KWK shared with Center 2 (KWK1,2). 2155  Center_2_wrapped_keys = WRAP(KWK1,2, KWKA, B || DAKA, B || Transaction_auth_key || 2156  Group_Transaction_auth_key). 2157  (b) Center 1 prepares and sends a message containing translation request information to 2158  Center 2 that includes the wrapped keys: 2159  translation_request(Center_2_wrapped_keys; requester: Center_1; communicating_group: 2160  Entity_A, Entity B; auth_code3), 2161  where auth_code3 is generated using Group_Transaction_auth_key. 2162  4.  (a) Center 2 unwraps the translation request information to obtain the authentication key 2163  (Group_Transaction_auth_key). 2164  (b) Center 2 attempts to verify auth_code3 using the unwrapped authentication key 2165  (Group_Transaction_auth_key). If the verification fails, or if Entity B is not a subscriber 2166  of Center 2, a message containing error report information is returned to Center 1, and the 2167  process is terminated.  2168  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  68  error_report(previous_message_id; error_type; auth_code4), 2169  where previous_message_id is the ID for the message containing the translation request 2170  information (see step 3b), the error_type is the type of error, and auth_code4 is computed 2171  on the message using DAK1, 2. Note that since there was an error in the received message, 2172  the wrapped authentication key (Group_Transaction_auth_key) in the translation request 2173  information may not be correct, so DAK1, 2 is used as the authentication key for the message 2174  containing the error report information. 2175  Center 1 may choose to resend the translation request information or to notify Entity A of 2176  the problem in an error message (not shown in the figure). 2177  5. (a) If the verification is successful, and Entity is a subscriber of Center 2, Center 2 translates 2178  the keys (KWKA, B || DAKA, B || Transaction_auth_key) by wrapping them in the KWK 2179  shared with Entity B (KWKB, 2): 2180  Entity_B wrapped_keys = WRAP(KWKB, 2, KWKA, B || DAKA, B || Transaction_auth_key). 2181  (b) Center 2 then prepares and sends a message containing the key transfer information to 2182  Entity B. 2183  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; 2184  auth_code5), 2185  where auth_code5 is generated on the message using Transaction_auth_key. 2186  6. (a) Entity B unwraps the key transfer information and attempts to verify auth_code5 using the 2187  unwrapped authentication key (Transaction_auth_key).  2188  (b) If the verification fails, or Entity B does not want to establish a communicating group with 2189  Entity A, a message is sent to Center 2 containing error report inoformation.  2190  error_report(previous_message_id; error_type; auth_code6), 2191  where previous_message_id is the ID for the message containing the key transfer 2192  information (see step 5b), the error_type is the type of error, and auth_code6 is computed 2193  using DAKB,2. Note that since there was an error in the received message, the wrapped 2194  authentication key (Transaction_auth_key) in the key transfer information may not be 2195  correct, so DAKB, 2 is used as the authentication key for the message containing the error 2196  report information. 2197  Center 2 may choose to resend the key transfer information (not shown in the figure) (see 2198  step 5b).  2199  Alternatively, Center 2 could send a message containing error report information to Center 2200  1 indicating that the keys could not be established between Entities A and B, authenticating 2201  the message using DAK1, 2; Center 1 could then forward the information to Entity A, 2202  authenticating the message using DAKA,1. The transaction would then be considered as 2203  terminated. These messages are not shown in the figure.  2204  (c) If the verification is successful, and Entity B wants to establish a communicating group 2205  with Entity A, Entity B sends a message containing acknowledgement information to 2206  Center 2: 2207  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  69  acknowledgement(previous_msg_id; auth_code7), 2208  where previous_message_id is the ID for the message containing the key transfer 2209  information, and auth_code7 is generated using Transaction_auth_key. 2210  7. If a message containing acknowledgement information is received correctly from Entity B, 2211  then Center 2 sends a message containing acknowledgement information to Center 1, indicating 2212  that the communicating group has been established successfully: 2213  acknowledgement(previous_msg_id; auth_code8), 2214  where previous_message_id is the ID for the message containing the translation request 2215  information (see step 3b), and auth_code8 is generated using Group_Transaction_auth_key. 2216  8. If a message containing acknowledgement information is received correctly from Center 2, 2217  then Center 1 sends a message containing acknowledgement information to Entity A indicating 2218  that the communicating group has been established successfully: 2219  acknowledgement(previous_msg_id; auth_code9), 2220  where previous_message_id is the ID for the message containing the key-generation request 2221  information (see step 1c), and auth_code9 is generated using Transaction_auth_key. 2222  At this point, Entities A and B share a KWK and DAK as members of the same communicating 2223  group. However, only Entity A knows for sure that the keys are shared. Entity B could be notified 2224  of this fact by Entity A or B sending a cryptographically protected message to the other party (e.g., 2225  protected using the newly established KWK and DAK). Alternatively, a special-purpose 2226  confirmation message could be used to indicate successful establishment of the communicating 2227  group. 2228  A.7 Forwarding Keys Through an Intermediate Entity 2229  Keying material can be forwarded to the ultimate recipient(s) through intermediate entities (see 2230  Figure A.7 for an example). In this example, a KDC shares a KWK and DAK with Entity A, and 2231  Entity A shares KWKs and DAKs as the Layer 1 keys with Entities B and C, i.e.,  2232  • The KDC shares KWKA, KDC and DAKA, KDC with Entity A; 2233  • Entity A shares KWKA, B and DAKA, B with Entity B; and 2234  • Entity A shares KWKA, C and DAKA, C with Entity C. 2235  In this example, the KDC generates keying material (e.g., an AEK) to be shared by Entities B and 2236  C and distributes it via one of its subscribers (Entity A). Entities B and C become a communicating 2237  group, but since they do not share a KWK, they cannot generate further keys without the assistance 2238  of the KDC. Although Entity A is privy to the keys (since it assisted in their distribution), Entity 2239  A is not intended to be part of that communicating group for this example.  2240  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  70  2241  Figure A.7: key transfer through an Intermediate Entity  2242  1. (a) The KDC generates an AEK and authentication keys (Transaction_auth_key1 and 2243  Transaction_auth_key2) to be used for message authentication and wraps them for Entity 2244  A. 2245  wrapped_keys = WRAP(KWKA, KDC, AEKB,C || Transaction_auth_key1 || Transaction_auth_key2). 2246  (b) The KDC prepares and sends a message containing key transfer information to Entity A: 2247  key_transfer(wrapped_keys; communicating_group: Entity B, Entity C; auth_code1), 2248  where auth_code1 is computed on the message containing the key transfer information 2249  using Transaction_auth_key2.  2250  2. Entity A unwraps the key transfer information using the KWK shared with the KDC (KWKA, 2251  KDC) and attempts to verify the received message using Transaction_auth_key2. 2252  (a) If the verification fails, an error message is sent to the KDC containing error report 2253  information: 2254  error_report(previous_message_id; error_type; auth_code2), 2255  where previous_message_id is the ID for the message containing the key transfer information 2256  (see step 1b), the error_type is the type of error, and auth_code2 is generated using DAKA, KDC. 2257  Note that since there was an error in the received message, the wrapped authentication key 2258  (Transaction_auth_key2) in the message may not be correct, so DAKA, KDC is used as the 2259  authentication key. 2260  The KDC may choose to resend the key transfer information (not shown in the figure). 2261  Steps 3 and 5 (these steps are combined to avoid repetitious descriptions):  2262  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  71  (a) If the verification is successful, the wrapped keys destined for Entities B and C are 2263  extracted and wrapped for each intended recipient: 2264  Entity_B_wrapped_keys = WRAP(KWKA, B, AEKB,C || Transaction_auth_key1). 2265  Entity_C_wrapped_keys = WRAP(KWKA, C, AEKB,C || Transaction_auth_key1). 2266  (b) The appropriate wrapped keys are placed in key transfer messages for each recipient, and 2267  an authentication code is computed for each message (auth_code3 and auth_code4) using 2268  the appropriate transaction authentication key (Transaction_auth_key1): 2269  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_B, Entity_C; 2270  auth_code3) is sent to Entity B. 2271  key_transfer(Entity_C_wrapped_keys; communicating_group: Entity_B, Entity_C; 2272  auth_code4) is sent to Entity B. 2273  Steps 4 and 6:  2274  (a) Entities B and C unwrap the keys received in the key transfer information of their 2275  respective messages and attempt to verify the authentication codes (auth_code3 and 2276  auth_code4, respectively) using Transaction_auth_key1.  2277  (b) If the verification fails, or the receiving entity does not want to be a member of the 2278  communicating group, a message is sent to Entity A containing error report information: 2279  Entity B would send error_report(previous_message_id; error_type; auth_code5) 2280  Entity C would send error_report(previous_message_id; error_type; auth_code6) 2281  where previous_message_id is the ID for the message containing the key transfer 2282  information (see step 3/5 b), and the error_type is the type of error. Entity B would 2283  generate auth_code5 using DAKA, B; Entity C would generate auth_code6 using DAKA, C. 2284  Note that since there was an error in the received message, the wrapped authentication 2285  key (Transaction_auth_key1) in the key transfer information may not be correct, so DAKA, 2286  B and DAKA, C would be used as the authentication keys. 2287  Entity A may choose to resend the key transfer information (not shown in the figure). 2288  (c) If the verification is successful, and both entities want to establish a communicating 2289  group with each other, a message containing acknowledgement information is sent to 2290  Entity A: 2291  Entity B would send acknowledgement(previous_msg_id; auth_code7) 2292  Entity C would send acknowledgement(previous_msg_id; auth_code8), 2293  where previous_message_id is the ID for the message containing the key transfer 2294  information (see step 3/5 b), and auth_code7 and auth_code8 are generated using 2295  Transaction_auth_key1. 2296  7. If the message containing the acknowledgement information is received correctly from both 2297  Entities B and C, then Entity A sends a message to the KDC containing acknowledgement 2298  information indicating that the communicating group has been established successfully: 2299  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  72  acknowledgement(previous_msg_id; auth_code9), 2300  where previous_message_id is the ID for the message containing the key-transfer information 2301  (see step 1b), and auth_code9 is generated using Transaction_auth_key2. 2302  At this point, Entities B and C share an AEK as members of the same communicating group. 2303  However, only Entity A and the KDC know for sure that the keys are shared. Enitites B and C 2304  could be notified of this fact in a couple of ways: 2305  • By Entity B or C sending a cryptographically protected message to the other party (e.g., 2306  protected using the newly established AEK); or 2307  • By Entity A sending acknowledgement information to Entities B and C indicating that the 2308  establishment of the communicating group has been completed (not shown in the figure). 2309  A.8 Requesting Key Revocation and Confirmation 2310  A.8.1 Example 1 2311  Figure A.8a is an example of using a revocation request and corresponding revocation 2312  confirmation. In this example, a KDC sends a revocation request to the members of a 2313  communicating group (Entities A and B) to terminate the group by revoking the Level 1 key in 2314  their key hierarchy (KWKA, B); presumably, the KDC was a participant in establishing that key. 2315  Entity A shares KWKA, KDC and DAKA, KDC with the KDC; Entity B shares KWKB, KDC and DAKB, 2316  KDC with the KDC. 2317  The keys shared by Entities A and B consist of a Layer 1 key (KWKA,B) and a layer 2 DAKA, B, 2318  which were established previously using the KDC (see Appendix A.3), and several lower-layer 2319  keys established within the communicating group (i.e., Entities A and B) using KWKA, B after the 2320  group was established (see Appendix A.1 for the process): 2321  • KWKA, B was used to wrap KWKLayer_2 and DAKLayer_2. 2322  • KWKLayer_2 was used to wrap KDKLayer_3, and 2323  • KDKLayer_3 was used to derive DEKLayer_4 and DAKLayer_4.  2324  In this example, the revocation request is sent directly to each entity by the KDC so that each will 2325  acknowledge that they have fulfilled the request. Note that in this example, both revocation 2326  requests are sent before expecting the return of the corresponding revocation confirmation or error 2327  report information. This is a design decision for this example (not a requirement) to allow each 2328  entity to find and destroy all copies of keys affected by the revocation request information (i.e., 2329  all keys lower in the key hierarchy). 2330  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  73  2331  Figure A.8a:  KDC Revocation of a Communicating Group 2332  1. (a) The KDC generates an authentication key (Transaction_auth_keyA) for the message 2333  containing the revocation request information to be sent to Entity A and wraps it using the 2334  KWK shared with Entity A (KWKA, KDC):  2335  wrapped_auth_key_A = WRAP(KWKA, KDC, Transaction_auth_keyA). 2336  (b) The KDC prepares and sends a message to Entity A containing revocation request 2337  information that requests that Entity A revoke the Level 1 KWK (KWKA, B) shared with 2338  Entity B and all keys beneath it in the key hierarchy: 2339  revocation_request(ID of KWKA, B; wrapped_auth_key_A; auth_code1), 2340  where auth_code1 is generated on the message using Transaction_auth_keyA. 2341  2. (a) Likewise, the KDC generates an authentication key (Transaction_auth_keyB) for the 2342  message containing the revocation request information to be sent to Entity B and wraps it 2343  using the KWK shared with Entity B (KWKB, KDC):  2344  wrapped_auth_key_B = WRAP(KWKB, KDC, Transaction_auth_keyB). 2345  (b) The KDC prepares and sends a message to Entity B containing the revocation request 2346  information that requests that Entity B revoke the Level 1 KWK (KWKA, B)  shared with 2347  Entity A: 2348  revocation_request(ID_of_KWKA, B; wrapped_auth_key_B; auth_code2), 2349  where auth_code2 is generated on the message using Transaction_auth_keyB. 2350  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  74  3. (a) Entity A unwraps the authentication key and attempts to verify the received message. If 2351  the verification fails, a message containing error report information is sent to the KDC and 2352  the process is terminated: 2353  error_report(previous_message_id; error_type; auth_code3), 2354  where previous_message_id is the ID for the message containing the revocation request 2355  information (see step 1b), the error_type is the type of error, and auth_code3 is computed 2356  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 2357  authentication key (Transaction_auth_keyA) in the message may not be correct, so DAKA, 2358  KDC is used as the authentication key. 2359  The KDC would most likely resend the message, in this case. 2360  (b) If the verification is successful, Entity A destroys all copies of KWKA, B and any keys lower 2361  in the key hierarchy (i.e., KWKLayer_2, DAKLayer_2, KDKLayer_3, DEKLayer_4 and DAKLayer_4). 2362  (c) Entity A prepares and sends a message containing revocation confirmation information to 2363  the KDC: 2364  revocation_confirmation(ID_of_KWKA, B; auth_code4), 2365  where auth_code4 is computed on the message using Transaction_auth_keyA. 2366  4. The KDC attempts to verify auth_code4 using the authentication key used for the message 2367  containing the revocation request information (see step 1b) (i.e., Transaction_auth_keyA).  2368  (a) If the verification fails, a message containing error report information is returned to Entity 2369  A, and the process is terminated.  2370  error_report(previous_message_id; error_type; auth_code5), 2371  where previous_message_id is the ID for the message containing the revocation 2372  confirmation information (see step 3c), the error_type is the type of error, and auth_code5 2373  is computed on the message using Transaction_auth_keyA. Since the revocation request 2374  was received correctly, Transaction_auth_keyA can be used. 2375  Entity A may choose to resend the message (not shown in the figure). 2376  (b) If the verification is successful, the KDC sends a message containing acknowledgement 2377  information to Entity A: 2378  acknowledgement(previous_msg_id; auth_code6), 2379  where previous_message_id is the ID for the message containing the revocation 2380  confirmation information (see step 3c), and auth_code6 is generated on the message using 2381  Transaction_auth_keyA. 2382  5. (a) Entity B unwraps the authentication key and attempts to verify the received message. If the 2383  verification fails, a message containing error report information is sent to the KDC and 2384  the process is terminated: 2385  error_report(previous_message_id; error_type; auth_code7), 2386  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  75  where previous_message_id is the ID for the message containing the revocation request 2387  information (see step 2b), the error_type is the type of error, and auth_code7 is computed 2388  on the message using DAKB, KDC. Note that since there was an error in the received message, 2389  the wrapped authentication key (Transaction_auth_keyB) in the message may not be 2390  correct, so DAKB, KDC is used as the authentication key. 2391  The KDC would most likely resend the message, in this case. 2392  (b) If the verification is successful, Entity B destroys all copies of KWKA, B and any keys lower 2393  in the key hierarchy (i.e., KWKLayer_2, DAKLayer_2, KDKLayer_3, DEKLayer_4 and DAKLayer_4). 2394  (c) Entity B prepares and sends a message containing revocation confirmation information to 2395  the KDC: 2396  revocation_confirmation(ID_of_KWKA, B; auth_code8), 2397  where auth_code8 is computed on the message using Transaction_auth_keyB. 2398  6. The KDC attempts to verify auth_code8 using the authentication key used for the message 2399  containing the revocation request information (see step 2b) (i.e., Transaction_auth_keyB).  2400  (a) If the verification fails, a message containing the error report information is returned to 2401  Entity B, and the process is terminated.  2402  error_report(previous_message_id; error_type; auth_code9), 2403  where previous_message_id is the ID for the message containing the revocation 2404  confirmation information (see step 5c), the error_type is the type of error, and auth_code9 2405  is computed on the message using Transaction_auth_keyB. Since the revocation request 2406  was received correctly, Transaction_auth_keyB can be used. 2407  Entity B may choose to resend the message (not shown in the figure). 2408  (b) If the verification is successful, the KDC sends a message containing acknowledgement 2409  information to Entity B: 2410  acknowledgement(previous_msg_id; auth_code10), 2411  where previous_message_id is the ID for the message containing the revocation 2412  confirmation information (see step 5c), and auth_code10 is generated on the message using 2413  Transaction_auth_keyB. 2414  A.8.2 Example 2 2415  In this example, a communicating group consists of Entities A and B, with shared keys shown in 2416  Figure A.8b. Entity A wishes to revoke the KDK and all keys below it in the key hierarchy (e.g., 2417  because the KDK has been compromised or has been used too many times to derive keys).  2418  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  76  2419  Figure A.8b: Revocation of Lower-level Keys 2420  1. (a) If Entity A has a key-generation capability: 2421  • Entity A generates an authentication key (Transaction_auth_key) for the message 2422  containing the revocation request information to be sent to Entity B and wraps it using 2423  the KWK shared with Entity B (KWKA, B):  2424  wrapped_auth_key  = WRAP(KWKA, B, Transaction_auth_key). 2425  • Entity A prepares and sends a message to Entity B containing revocation request 2426  information that requests that Entity B revoke the KDK shared with Entity A and all 2427  keys beneath it in the key hierarchy: 2428  revocation_request(ID_of_KDKLayer_3; wrapped_auth_key; auth_code1), 2429  where auth_code1 is generated on the message using Transaction_auth_key. 2430  (b) If Entity A does not have a key-generation capability: 2431  • Entity A will use DAKA, B as the authentication key for the message containing the 2432  revocation request information. Let \"DAKAB\" be the name of that key. 2433  • Entity A prepares and sends a message to Entity B containing revocation request 2434  information that requests that Entity B revoke the KDK shared with Entity A and all 2435  keys beneath it in the key hierarchy: 2436  revocation_request(ID_of_KDKLayer_3; DAKAB ; auth_code2), 2437  where auth_code2 is generated on the message using DAKA, B. 2438  2. (a) If a wrapped key is included in the revocation request information: Entity B unwraps the 2439  authentication key using KWKA, B, obtaining Transaction_auth_key. 2440  (b) If the ID of an authentication key is included in the revocation request information, that 2441  key is used as the authentication key (i.e., DAKA, B, in this case). 2442  (c) Entity B attempts to verify the received message. If the verification fails, a message 2443  containing error report information is sent to Entity A, and the process is terminated: 2444  error_report(previous_message_id; error_type; auth_code3), 2445  where previous_message_id is the ID for the message containing the revocation request 2446  information (see step 1), the error_type is the type of error, and auth_code3 is computed 2447  using DAKA, B. Note that since there was an error in the received message, DAKA, B is used 2448  as the authentication key. 2449  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  77  Entity A would most likely resend the message, in this case. 2450  3. (a) If the verification is successful, Entity B destroys all copies of KDKLayer_3 and any keys 2451  lower in the key hierarchy (i.e., DEKLayer_4 and DAKLayer_4). 2452  (b) Entity B prepares and sends a message containing revocation confirmation information to 2453  Entity A: 2454  revocation_confirmation(ID_of_ KDKLayer_3; auth_code4), 2455  where auth_code4 is computed on the message using the authenication key usd for the 2456  message containing the revocation request information (i.e., either Transaction_auth_key 2457  or DAKA, B).  2458  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  78  Appendix B: References 2459  [DSKPP] Dynamic Symmetric Key Provisioning Protocol (DSKPP); RFC 6063; Doherty, 2460  Pei, Machani, and Nystrom; Internet Engineering Task Force, December 2010. 2461  https://tools.ietf.org/html/rfc6063 2462  [FIPS140-2] Security Requirements for Cryptographic Modules, Federal Information 2463  Processing Standards (FIPS) Publication FIPS 140-2, U.S. Department of 2464  Commerce/NIST, December 3, 2002. 2465  https://doi.org/10.6028/NIST.FIPS.140-2 2466  [FIPS 180-4] The Secure Hash Standard, Federal Information Processing Standards (FIPS) 2467  Publication FIPS-180-4, U. S. Department of Commerce/NIST, August 4, 2468  2015. 2469  https://doi.org/10.6028/NIST.FIPS.186-4  2470  [FIPS-197] Advanced Encryption Standard (AES), Federal Information Processing 2471  Standards (FIPS) Publication FIPS 197, U. S. Department of Commerce/NIST, 2472  November 26, 2001. 2473  https://doi.org/10.6028/NIST.FIPS.197 2474  [FIPS 198-1] The Keyed-Hash Message Authentication Code (HMAC), Federal Information 2475  Processing Standards (FIPS) Publication FIPS 198-1, U. S. Department of 2476  Commerce/NIST, July 2008. 2477  https://doi.org/10.6028/NIST.FIPS.198-1 2478  [FIPS 199] Standards for Security Categorization of Federal Information and Information 2479  Systems, Federal Information Processing Standards (FIPS) Publication FIPS 2480  199, U. S. Department of Commerce/NIST, March 2006. 2481  https://doi.org/10.6028/NIST.FIPS.199  2482  [FIPS 200] Minimum Security Requirements for Federal Information and Information 2483  Systems, , Federal Information Processing Standards (FIPS) Publication FIPS 2484  200, U. S. Department of Commerce/NIST, February 2004. 2485  https://doi.org/10.6028/NIST.FIPS.200  2486  [FIPS 202] SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions, 2487  Federal Information Processing Standards (FIPS) Publication FIPS-202, U. S. 2488  Department of Commerce/NIST, August 4, 2015. 2489  https://doi.org/10.6028/NIST.FIPS.202  2490  [Kerberos] Kerberos: The Network Authentication Protocol, Massachusetts Institute of 2491  Technology, September 25, 2017 2492  https://web.mit.edu/kerberos/ 2493  https://tools.ietf.org/html/rfc6063 https://doi.org/10.6028/NIST.FIPS.140-2 https://doi.org/10.6028/NIST.FIPS.186-4 https://doi.org/10.6028/NIST.FIPS.197 https://doi.org/10.6028/NIST.FIPS.198-1 https://doi.org/10.6028/NIST.FIPS.199 https://doi.org/10.6028/NIST.FIPS.200 https://doi.org/10.6028/NIST.FIPS.202 https://web.mit.edu/kerberos/  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  79  [KM in WSN] “Key Management in Wireless Sensor Networks;” Mansour, Chalhoub, and 2494  Lafourcade; Journal of Sensor and Actuator Networks, ISSN 2224-2708; 2495  September 7, 2015. 2496  http://www.mdpi.com/2224-2708/4/3/251 2497  [NISTIR 8105] Report on Post-Quantum Cryptography; Chen, Jordan, Liu, Moody, Peralta, 2498  Perlner, and Smith-Tone; National Institute of Standards and Technology, April 2499  2016. 2500  https://doi.org/10.6028/NIST.IR.8105 2501  [NISTIR 8114] Report on Lightweight Cryptography; NISTIR 8114; McKay, Bassham, Turan, 2502  and Mouha; National Institute of Standards and Technology, March 2017. 2503  https://doi.org/10.6028/NIST.IR.8114 2504  [RFC 4107] Guidelines for Cryptographic Key Management, RFC 4107, Bellovin and 2505  Housley, The Internet Society, June 2005. 2506  https://tools.ietf.org/html/rfc4107 2507  [S/MIME] Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message 2508  Specification, RFC 5751, Ramsdell and Turner, The Internet Society, January 2509  2010. 2510  https://tools.ietf.org/html/rfc5751 2511  The IETF LAMPS working group (see https://tools.ietf.org/wg/lamps/) has 2512  been developing a replacement for RFC 5751; the latest draft is available at 2513  https://tools.ietf.org/wg/lamps/draft-ietf-lamps-rfc5751-bis/. 2514  [SP 800-38A] Recommendation for Block Cipher Modes of Operation: Methods and 2515  Techniques, SP 800-38A, M. Dworkin, National Institute of Standards and 2516  Technology, December 2001. 2517  https://doi.org/10.6028/NIST.SP.800-38A  2518  [SP800-38B] Recommendation for Block Cipher Modes of Operation: the CMAC 2519  Authentication Mode for Authentication, SP 800-38B, M. Dworkin, National 2520  Institute of Standards and Technology, October, 2016. 2521  https://doi.org/10.6028/NIST.SP.800-38B  2522  [SP 800-38C] Recommendation for Block Cipher Modes of Operation: the CCM Mode for 2523  Authentication and Confidentiality, SP 800-38C, M. Dworkin, National 2524  Institute of Standards and Technology, May 2004. 2525  https://doi.org/10.6028/NIST.SP.800-38C  2526  [SP 800-38D] Recommendation for Block Cipher Modes of Operation: Galois/Counter 2527  Mode (GCM) and GMAC, SP 800-38D, M. Dworkin, National Institute of 2528  Standards and Technology, November 2007. 2529  https://doi.org/10.6028/NIST.SP.800-38D  2530  http://www.mdpi.com/2224-2708/4/3/251 https://doi.org/10.6028/NIST.IR.8105 https://doi.org/10.6028/NIST.IR.8114 https://tools.ietf.org/html/rfc4107 https://tools.ietf.org/html/rfc5751 https://tools.ietf.org/wg/lamps/ https://tools.ietf.org/wg/lamps/draft-ietf-lamps-rfc5751-bis/ https://doi.org/10.6028/NIST.SP.800-38A https://doi.org/10.6028/NIST.SP.800-38B https://doi.org/10.6028/NIST.SP.800-38C https://doi.org/10.6028/NIST.SP.800-38D  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  80  [SP800-38E] Recommendation for Block Cipher Modes of Operation: the XTS-AES Mode 2531  for Confidentiality on Storage Devices, SP 800-38E, M. Dworkin, January 2532  2010. 2533  https://doi.org/10.6028/NIST.SP.800-38E 2534  [SP 800-38F] Recommendation for Block Cipher Modes of Operation: Methods for Key 2535  Wrapping, SP 800-38F, M. Dworkin, National Institute of Standards and 2536  Technology, December 2012. 2537  https://doi.org/10.6028/NIST.SP.800-38F  2538  [SP 800-38G] Recommendation for Block Cipher Modes of Operation: Methods for Format-2539  Preserving Encryption, M. Dworkin, National Institute of Standards and 2540  Technology, March 2016. 2541  https://doi.org/10.6028/NIST.SP.800-38G  2542  [SP 800-56A] Recommendation for Pair-Wise Key Establishment Schemes Using Discrete 2543  Logarithm Cryptography; SP 800-56A, Revision 2; E. Barker, L. Chen, A. 2544  Roginsky, and M. Smid; May 2010. 2545  https://doi.org/10.6028/NIST.SP.800-56Ar3  2546  [SP 800-56B] Recommendation for Pair-Wise Key Establishment Schemes Using Integer 2547  Factorization Cryptography; SP 800-56B, Revision 1; E. Barker, L. Chen, and 2548  D. Moody; September 2014. 2549  https://doi.org/10.6028/NIST.SP.800-56Br1  2550  [SP800-57 Pt. 1] Recommendation for Key Management: Part 1: General, Special Publication 2551  800-57 Part 1, Revision 4, E. Barker, National Institute of Standards and 2552  Technology, January 2016. 2553  https://doi.org/10.6028/NIST.SP.800-57pt1r4  2554  [SP 800-57 Pt. 2] Recommendation for Key Management: Part 2: Best Practices for Key 2555  Management Organizations; Special Publication 800-57 Part 2, Revision 1 2556  DRAFT, E. Barker, and W. Barker; National Institute of Standards and 2557  Technology; April 2018. 2558  https://csrc.nist.gov/CSRC/media/Publications/sp/800-57-part-2/rev-2559  1/draft/documents/sp800-57pt2-r1-draft.pdf  2560  [SP 800-57 Pt. 3] Recommendation for Key Management: Part 3: Application-Specific Key 2561  Management Guidance, Special Publication 800-57 Part 3, E. Barker and Dang, 2562  National Institute of Standards and Technology January 2015. 2563  https://doi.org/10.6028/NIST.SP.800-57pt3r1  2564  [SP 800-88] Guidelines for Media Sanitization; Special Publication 800-88; R. Kissel, M. 2565  Scholl, S. Skolochenko, and X. Li; National Institute of Standards and 2566  Technology; September 2006. 2567  https://doi.org/10.6028/NIST.SP.800-88r1 2568  https://doi.org/10.6028/NIST.SP.800-38E https://doi.org/10.6028/NIST.SP.800-38F https://doi.org/10.6028/NIST.SP.800-38G https://doi.org/10.6028/NIST.SP.800-56Ar3 https://doi.org/10.6028/NIST.SP.800-56Br1 https://doi.org/10.6028/NIST.SP.800-57pt1r4 https://csrc.nist.gov/CSRC/media/Publications/sp/800-57-part-2/rev-1/draft/documents/sp800-57pt2-r1-draft.pdf https://csrc.nist.gov/CSRC/media/Publications/sp/800-57-part-2/rev-1/draft/documents/sp800-57pt2-r1-draft.pdf https://doi.org/10.6028/NIST.SP.800-57pt3r1 https://doi.org/10.6028/NIST.SP.800-88r1  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  81  [SP 800-90A] Recommendation for Random Number Generation Using Deterministic 2569  Random Bit Generators, SP 800-90A, Revision 1, E. Barker and J. Kelsey, 2570  National Institute of Standards and Technology; June 2015. 2571  https://doi.org/10.6028/NIST.SP.800-90Ar1  2572  [SP 800-108] Recommendation for Key Derivation Using Pseudorandom Functions 2573  (Revised), Special Publication 800-108, L. Chen, National Institute of 2574  Standards and Technology, October 2009. 2575  https://doi.org/10.6028/NIST.SP.800-108  2576  [SP 800-131A] Transitions: Recommendation for the Use of Cryptographic Algorithms and 2577  Key Lengths, NIST SP 800-131A, Revision 1, E. Barker and Q. Dang, 2578  November 2015. 2579  https://doi.org/10.6028/NIST.SP.800-131Ar1  2580  [SP 800-152] A Profile for U.S. Federal Cryptographic Key Management Systems (CKMS); 2581  NIST SP 800-152; E. Barker, Smid, and Branstad; National Institute of 2582  Standards and Technology; October 2015 2583  https://doi.org/10.6028/NIST.SP.800-152 2584  [SP 800-175B] Guideline for Using Cryptographic Standards in the Federal Government: 2585  Cryptographic Mechanisms, E. Barker, National Institute of Standards and 2586  Technology, August 2016. 2587  https://doi.org/10.6028/NIST.SP.800-175B  2588  [SP 800-185] SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash, and ParallelHash; 2589  NIST SP 800-185; Kelsey, Chang, and Perlner; National Institute of Standards 2590  and Technology; December 2016. 2591  https://doi.org/10.6028/NIST.SP.800-185 2592  [X9.17] American National Standard X9.17, Financial Institution Key Management 2593  (Wholesale), April 1985, Withdrawn. 2594  [X9.28] American National Standard X9.28, Financial Institution Multiple Center Key 2595  Management (Wholesale), June 1991, Withdrawn. 2596  https://doi.org/10.6028/NIST.SP.800-90Ar1 https://doi.org/10.6028/NIST.SP.800-108 https://doi.org/10.6028/NIST.SP.800-131Ar1 https://doi.org/10.6028/NIST.SP.800-152 https://doi.org/10.6028/NIST.SP.800-175B https://doi.org/10.6028/NIST.SP.800-185  Executive Summary  1. Introduction  1.1 Scope  1.2 Content and Organization  2. Definitions and Common Abbreviations  2.1 Definitions  2.2 Common Abbreviations  3. Symmetric-Key-Management Fundamentals  3.1 Uses of Symmetric Keys  3.2 Application Considerations  3.3 Symmetric Algorithm and Key Types  3.4 Key Distribution Using Symmetric-Key Techniques  3.4.1 Manual Distribution  3.4.2 Automated Distribution  3.5 Key Hierarchies  3.5.1 Storage Applications  3.5.2 Communicating Groups  3.5.3 Key-Establishment Transactions  4. Key Management Architectures for Symmetric Keys  4.1 Center-based Key Establishment Architectures  4.1.1 Key Distribution Centers (KDCs)  4.1.2 Key Translation Centers (KTCs)  4.1.3 Multiple-Center Architectures  4.1.3.1 A Subscriber Requests Key Generation and Distribution Services  4.1.3.2 A Subscriber Requests Key-Translation Services  4.2 Communicating Groups  4.2.1 Establishing Communicating Groups  4.2.2 Communicating Group Requirements  4.2.3 Subsequent Key Distribution within a Communicating Group  5. Key-Establishment Communications  5.1 General Communications Requirements  5.2  Notation  5.3 Message Content and Handling  5.3.1 Key Generation Request  5.3.2 Key Transfers  5.3.3 Translation Requests  5.3.4 Revocation Request  5.3.5 Revocation Confirmation  5.3.6 Acknowledgements  5.3.7 Error Reports  5.4 Authentication Codes in Key-Establishment Messages  5.5 Revocation and Destruction  Appendix A: Example Scenarios  A.1 Communicating Group Key Transfer  A.2  Using a KDC to Distribute Keys to an Already-Established Communicating Group  A.3 Using a KDC to Establish a Communicating Group  A.4 Using a KTC to Establish a Communicating Group  A.5 Using a Multiple-Center Group to Generate a Key for Establishing a Communicating Group  A.6 Using a Multiple-Center Group to Establish a Communicating Group Only Using its Key-Translation Services  A.7 Forwarding Keys Through an Intermediate Entity  A.8 Requesting Key Revocation and Confirmation  A.8.1 Example 1  A.8.2 Example 2  Appendix B: References",
    "original document": "Draft NIST SP 800-71, Recommendation for Key Establishment Using Symmetric Block Ciphers  Draft NIST Special Publication 800-71  Recommendation for Key Establishment  Using Symmetric Block Ciphers  Elaine Barker  William C. Barker  C  O  M  P  U  T  E  R  S  E  C  U  R  I  T  Y  Draft NIST Special Publication 800-71  Recommendation for Key Establishment  Using Symmetric Block Ciphers  Elaine Barker  Computer Security Division  Information Technology Laboratory  William C. Barker  Dakota Consulting, Inc.  June 2018  U.S. Department of Commerce  Wilbur L. Ross, Jr., Secretary  National Institute of Standards and Technology  Walter Copan, NIST Director and Under Secretary of Commerce for Standards and Technology  1  Authority 2  This publication has been developed by the National Institute of Standards and Technology (NIST) in accordance 3  with its statutory responsibilities under the Federal Information Security Modernization Act (FISMA) of 2014, 4  44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283. NIST is responsible for developing information security 5  standards and guidelines, including minimum requirements for federal information systems, but such standards 6  and guidelines shall not apply to national security systems without the express approval of appropriate federal 7  officials exercising policy authority over such systems. This guideline is consistent with the requirements of the 8  Office of Management and Budget (OMB) Circular A-130. 9  Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and 10  binding on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines 11  be interpreted as altering or superseding the existing authorities of the Secretary of Commerce, Director of the 12  OMB, or any other federal official.  This publication may be used by nongovernmental organizations on a 13  voluntary basis and is not subject to copyright in the United States. Attribution would, however, be appreciated 14  by NIST.  15  National Institute of Standards and Technology Special Publication 800-71 16  Natl. Inst. Stand. Technol. Spec. Publ. 800-71, 90 pages (June 2018) 17  CODEN: NSPUE2 18  Certain commercial entities, equipment, or materials may be identified in this document in order to describe an 19  experimental procedure or concept adequately. Such identification is not intended to imply recommendation or 20  endorsement by NIST, nor is it intended to imply that the entities, materials, or equipment are necessarily the best 21  available for the purpose.  22  There may be references in this publication to other publications currently under development by NIST in accordance 23  with its assigned statutory responsibilities. The information in this publication, including concepts and methodologies, 24  may be used by federal agencies even before the completion of such companion publications. Thus, until each 25  publication is completed, current requirements, guidelines, and procedures, where they exist, remain operative. For 26  planning and transition purposes, federal agencies may wish to closely follow the development of these new 27  publications by NIST.  28  Organizations are encouraged to review all draft publications during public comment periods and provide feedback to 29  NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at 30  https://csrc.nist.gov/publications. 31  32  Public comment period: July 2, 2018 through September 28, 2018 33  34  National Institute of Standards and Technology 35  Attn: Computer Security Division, Information Technology Laboratory 36  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 37  Email: SP_800-71@nist.gov 38  39  All comments are subject to release under the Freedom of Information Act (FOIA)  40  41  https://csrc.nist.gov/publications  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  ii  Reports on Computer Systems Technology 42  43  The Information Technology Laboratory (ITL) at the National Institute of Standards and 44  Technology (NIST) promotes the U.S. economy and public welfare by providing technical 45  leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test 46  methods, reference data, proof of concept implementations, and technical analyses to advance the 47  development and productive use of information technology. ITL’s responsibilities include the 48  development of management, administrative, technical, and physical standards and guidelines for 49  the cost-effective security and privacy of other than national security-related information in 50  Federal information systems. The Special Publication 800-series reports on ITL’s research, 51  guidelines, and outreach efforts in information system security, and its collaborative activities with 52  industry, government, and academic organizations. 53  Abstract 54  This recommendation addresses the protection of symmetric keying material during a key 55  establishment that uses symmetric-key cryptography for key distribution. The objective is to provide 56  recommendations for reducing exposure to the unauthorized disclosure of the keying material and 57  detecting its unauthorized modification, substitution, insertion or deletion.  The Recommendation 58  also addresses recovery in the event of detectable errors during the key-distribution process.  59  Wrapping mechanisms are specified for encrypting keys, binding key control information to the keys 60  and protecting the integrity of this information.  61  62  Keywords 63  64  algorithm; authentication; block cipher; key distribution; key establishment; key generation; key 65  management; key translation; key wrapping; message authentication code; symmetric key 66  67  Acknowledgements 68  The National Institute of Standards and Technology (NIST) gratefully acknowledges and 69  appreciates contributions by their colleagues at NIST and the members of the ASC X9 working 70  group that developed the standards upon which this Recommendation is based: American National 71  Standard (ANS) X9.17, Financial Institution Key Management (Wholesale), and ANS X9.28, 72  Financial Institution Multiple Center Key Management (Wholesale). 73  74  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  iii  NOTE FOR REVIEWERS 75  This document, SP 800-71, addresses the use of symmetric block ciphers as key-establishment 76  mechanisms.  77  The authors acknowledge that most current key-management systems are based on asymmetric 78  cryptography (e.g., a Public Key Infrastructure).  However, concerns associated with the projected 79  consequences of emerging quantum computing technology for the security of existing asymmetric 80  algorithms (see NISTIR 81051) suggest a potential for some organizations to reconsider and, on a 81  case-by-case basis, reverting to key establishment based on symmetric cryptography.  Given the 82  currently limited nature of guidance on the topic, it seems prudent to describe symmetric key-83  establishment techniques and security considerations.  84  Symmetric-key-based key establishment may also be implemented beneath an asymmetric-key- 85  based structure to establish symmetric keys in a hierarchy after the top-most key in the hierarchy 86  has been established using asymmetric key-establishment techniques.  87  Reviewers are encouraged to provide comments on any aspect of this special publication. Of 88  particular interest are comments on the understandability and usability of the guideline. Your 89  feedback during the public comment period is essential to the document development process and 90  is greatly appreciated. 91  92  1 Report on Post-Quantum Cryptography.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  iv  93  Executive Summary 94  Symmetric-key cryptography requires all originators and consumers of specific information secured 95  by symmetric functions to share a secret key. This is in contrast to asymmetric-key, or public key, 96  cryptography that requires only one party participating in a transaction to know a private key and 97  permits the other party or parties to know the corresponding public key. Symmetric-key 98  cryptography is generally much more computationally efficient than public key cryptography, so it 99  is most commonly used to protect larger volumes of information such as the confidentiality of data 100  in transit and in storage. Asymmetric cryptography is more commonly used for the establishment of 101  an initial symmetric key using key-agreement or key-transport techniques. There are circumstances 102  however, such as the discovery or emergence of serious vulnerabilities of common public key 103  algorithms to technological attacks, that may motivate individuals and organizations to use 104  symmetric-key cryptography for source authentication, data integrity and key-establishment 105  purposes.  106  This Recommendation addresses the protection of symmetric keying material during key 107  establishment using symmetric-key algorithms. The objective is to reduce the potential for 108  unauthorized disclosure of the keying material and enable the detection of unauthorized 109  modification, substitution, insertion and deletion of that keying material. The Recommendation also 110  addresses recovery in the event of detectable errors during the key-establishment process.  111  Several key-establishment architectures are described.  These include:  112  • Key establishment among communicating groups that share a key-wrapping key,  113  • The distribution of keys by key generation and distribution centers to their subscribers,  114  • The use of translation centers for the protected distribution of keys generated by one subscriber 115  for distribution to one or more other subscribers, and  116  • Multiple-center-based environments for key establishment between or among organizational 117  domains. 118  The Recommendation does not specify protocols for key establishment (e.g., Kerberos, S/MIME, 119  and DSKPP).  It does, however, suggest key-establishment communication options and transaction 120  content that should be accommodated by key-establishment protocols. 121  This Recommendation covers both the manual and automated management of symmetric keying 122  material for the federal government using symmetric-key techniques.  The Recommendation 123  should be used in conjunction with the SP 800-572 series of documents and SP 800-1523 for the 124  management of keying material, including: 125  • Control during the life of the keying material to prevent unauthorized disclosure, 126  modification or substitution; 127  2 SP 800-57: Recommendation for Key Management, Part 1: General, Part 2: Best Practices for Key Management,  and Part 3: Application-Specific Key Management Guidance.  3 SP 800-152: A Profile for U.S. Federal Cryptographic Key Management Systems (CKMS).  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  v  • Establishing communicating groups; 128  • Secure distribution of keying material to permit interoperability among communicating 129  groups; 130  • Ensuring the integrity of keying material during all phases of its life, including its 131  establishment (which includes generation and distribution), storage, entry, use, and 132  destruction;  133  • Recovery in the event of a failure of the key-establishment process or when the integrity 134  of the keying material is in question; and  135  • Auditing the key-management processes. 136  Important considerations that apply to the selection of a key-management approach include: 137  • The exposure of a key by any entity having access to that key compromises all data 138  protected by that key; 139  • The more entities that share a key, the greater the probability of exposure of that key to 140  unauthorized entities; 141  • The longer that a key is used, the greater the chance that it will become known by 142  unauthorized parties during its use; 143  • The greater the amount of data that is protected by the key, the greater the amount of data 144  that is exposed if the key is compromised; 145  • It is essential that the source of a secret or private key is trustworthy, and that a secure 146  channel be used for key distribution; and 147  • The key used to initiate a keying relationship must be obtained through a secure channel, 148  often using an out-of-band process. 149  This Recommendation provides general guidance for the establishment of symmetric keys.  It is 150  intended to be a general framework within which system-specific protocols may be applied. Public 151  key cryptography is mentioned only as an alternative method for establishing an initial keying 152  relationship for a communicating group.  153  154  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  vi  TABLE OF CONTENTS 155  EXECUTIVE SUMMARY IV 156  1. INTRODUCTION 1 157  1.1 Scope 2 158  1.2 Content and Organization 3 159  2. DEFINITIONS AND COMMON ABBREVIATIONS 4 160  2.1 Definitions 4 161  2.2 Common Abbreviations 12 162  3. SYMMETRIC-KEY-MANAGEMENT FUNDAMENTALS 13 163  3.1 Uses of Symmetric Keys 13 164  3.2 Application Considerations 14 165  3.3 Symmetric Algorithm and Key Types 17 166  3.4 Key Distribution Using Symmetric-Key Techniques 18 167  3.4.1 Manual Distribution 19 168  3.4.2 Automated Distribution 20 169  3.5 Key Hierarchies 20 170  3.5.1 Storage Applications 22 171  3.5.2  Communicating Groups 23 172  3.5.3 Key-Establishment Transactions 23 173  4. KEY MANAGEMENT ARCHITECTURES FOR SYMMETRIC KEYS 25 174  4.1 Center-based Key Establishment Architectures 25 175  4.1.1 Key Distribution Centers (KDCs) 26 176  4.1.2 Key Translation Centers (KTCs) 29 177  4.1.3 Multiple-Center Architectures 31 178  4.2 Communicating Groups 37 179  4.2.1 Establishing Communicating Groups 37 180  4.2.1 Communicating Group Requirements 38 181  4.2.3 Subsequent Key Distribution within a Communicating Group 39 182  5. KEY-ESTABLISHMENT COMMUNICATIONS 40 183  5.1 General Communications Requirements 40 184  5.2  Notation 41 185  5.3 Message Content and Handling 41 186  5.3.1 Key Generation Request 42 187  5.3.2 Key Transfers 43 188  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  vii  5.3.3 Translation Requests 43 189  5.3.4 Revocation Request 44 190  5.3.5 Revocation Confirmation 45 191  5.3.6 Acknowledgements 45 192  5.3.7 Error Reports 46 193  5.4 Authentication Codes in Key-Establishment Messages 46 194  5.5 Revocation and Destruction 47 195  APPENDIX A: EXAMPLE SCENARIOS 48 196  A.1 Communicating Group Key Transfer 48 197  A.2 Using a KDC to Distribute Keys to a Communicating Group 49 198  A.3 Using a KDC to Establish a Communicating Group 55 199  A.4 Using a KTC to Establish a Communicating Group 59 200  A.5 Using a Multiple-Center Group to Generate a Key for Establishing a Communicating Group 61 201  A.6 Using a Multiple-Center Group to Establish a Communicating Group Only Using its Key-202  Translation Services 65 203  A.7 Forwarding Keys Through an Intermediate Entity 69 204  A.8 Requesting Key Revocation and Confirmation 72 205  A.8.1 Example 1 72 206  A.8.2 Example 2 75 207  APPENDIX B: REFERENCES 78 208  209  210  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  1  442  1. Introduction 443  Symmetric-key cryptography employs cryptographic algorithms that require both the sending and 444  receiving parties to protect communications using the same secret key. This is distinct from 445  asymmetric-key (i.e., public key) cryptography in which the parties have pairs of keys − a private 446  key known only to the key pair owner, and a public key that may be known by anyone. Section 3 447  of SP 800-175B4 discusses the use of these two algorithm types, including the pros and cons of 448  each, namely that: 449  • Symmetric-key cryptography is generally much less computationally intensive than 450  asymmetric-key cryptography.  451  • Digital signatures generated using asymmetric-key algorithms provide better source 452  authentication properties than can be provided by symmetric-key algorithms. 453  • The number of keys required to initiate and maintain cryptographic keying relationships is 454  much higher for symmetric-key cryptography than for asymmetric-key cryptography. 455  As a result of these characteristics, recent key-management schemes have used symmetric-key 456  cryptography for the encryption and integrity protection of data-at-rest and data-in-transit (i.e., 457  stored or communicated data), and asymmetric-key cryptography to establish the symmetric keys 458  for data-in-transit and for source authentication and integrity protection using digital signatures.5 459  Recent concerns associated with the projected consequences of emerging quantum-computing 460  technology for the security of existing asymmetric algorithms (see NISTIR 81056) suggest a 461  potential federal government requirement for the reconsideration of, and possible reversion to, the 462  use of symmetric-key cryptography. Keys protected using currently approved asymmetric-key 463  algorithms7 can, therefore, be expected to become known by adversaries once quantum computers 464  become available. In contrast, the impact on symmetric-key algorithms will not be as drastic; 465  doubling the size of the key will be sufficient to preserve security. Symmetric-key algorithms and 466  hash functions with sufficiently large output should be usable in a quantum era. 467  Research is in progress to develop quantum-resistant asymmetric-key algorithms. 8 However, 468  replacing the currently used asymmetric-key algorithms with quantum-resistant asymmetric-key 469  algorithms can be expected to not really begin until about 2020 and not be completed until the 470  2030s.  471  Where the security of information is very important, and the security of information currently 472  being protected by asymmetric-key algorithms needs to be maintained for more than a few years, 473  4 NIST SP 800-175B, Guideline for Using Cryptographic Standards in the Federal Government: Cryptographic  Mechanisms, August 2016.  5 Note that symmetric key management is used in some applications such as over-the-air rekeying of digital radios.  See Section 7 of SP 800-57 Part 3, Recommendation for Key Management Part 3: Application-Specific Key  Management Guidance and Kerberos.  6 NISTIR 8105, Report on Post-Quantum Cryptography, April 2016.  7 Algorithms based on the use of difficult problems such as integer factorization, discrete logarithms, and elliptic- curve discrete-logarithms.  8 See https://csrc.nist.gov/Projects/Post-Quantum-Cryptography.  https://csrc.nist.gov/Projects/Post-Quantum-Cryptography  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  2  moving away from the protection of symmetric keys by asymmetric-key algorithms should be 474  initiated as soon as practical. The protection of symmetric keys using symmetric key-wrapping 475  schemes and replacing asymmetric digital signature schemes with symmetric-key message 476  authentication schemes is one approach to replacing public key cryptographic key management in 477  the relatively near term. 478  The subject of this Recommendation is the set of security considerations associated with the use of 479  symmetric-key algorithms for key establishment. It addresses the protection of symmetric keying 480  material during key establishment to prevent unauthorized disclosure of the keying material and to 481  detect unauthorized modification, insertion and deletion.  This Recommendation also addresses the 482  recovery of keys in the event of detectable errors during the key-establishment process.  Several 483  high-level key-establishment strategies are presented.  484  While specific protocols (e.g., Kerberos 9, S/MIME, 10 and DSKPP 11) are not specified in this 485  Recommendation, this document does suggest key-establishment transaction content and options 486  that should be accommodated by key-establishment protocols. A minimum set of requirements for 487  constructing an audit trail of the key establishment process is provided in SP 800-152.  488  Note that conformance to this Recommendation does not guarantee security.  Because the 489  Recommendation is protocol-independent, the specific protocol employed for key-establishment 490  purposes needs to be analyzed for adequacy within the context of an organization’s security goals.  491  Several key-establishment approaches are described in this document.  Although the strategies 492  described include several key-establishment environments, the Recommendation does not 493  preclude the use of other symmetric-key management approaches. 494  1.1 Scope 495  Although this Recommendation describes the automated disribution of symmetric keying material 496  using symmetric-key techniques in automated environments, manual distribution is discussed as 497  well.  498  This Recommendation focuses primarily on strategies for the management of keys prior to their 499  use for protecting data communications. However, the Recommendation, in conjunction with the 500  SP 800-57 series of documents and SP 800-152 contain the minimum requirements for the 501  management of keying material throughout its lifecycle, including: 502  • Control during the life of the keying material to prevent unauthorized disclosure, 503  modification or substitution; 504  • Establishing communicating groups; 505  • The secure distribution of keying material to permit interoperability among communicating 506  groups; 507  9 See Section 6 of SP 800-57 Part 3, Recommendation for Key Management Part 3: Application-Specific Key  Management Guidance.  10 S/MIME: Secure Multipurpose Internet Mail Extensions.  11 DSKPP: Dynamic Symmetric Key Provisioning Protocol.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  3  • Ensuring the integrity of keying material during all phases of its life, including its 508  establishment (which includes generation and distribution), storage, entry, use, and 509  destruction;  510  • Recovery in the event of a failure of the key-establishment process or when the integrity 511  of the keying material is in question; and  512  • Auditing the key-management processes. 513  The scope of this document encompasses the use of only symmetric-key block-cipher algorithms 514  (e.g., FIPS 19712) and algorithms used to generate Message Authentication Codes (MACs) using 515  either block-cipher algorithms or using hash functions (e.g., FIPS 180-413 and FIPS 20214).  The 516  use of asymmetric-key (i.e., public-key) techniques for key establishment is mentioned only as an 517  alternative method for establishing an initial keying relationship. 518  1.2 Content and Organization 519  The remainder of this Recommendation is organized as follows: 520  Section 2 provides definitions and common abbreviations.  521  Section 3 provides general symmetric key-management fundamentals, including uses for 522  symmetric keys, some application considerations, symmetric algorithms and key types, key-523  distribution using symmetric-key techniques, and a discussion of key hierarchies for storage and 524  communications applications.  525  Section 4 describes general architectural considerations for the establishment of symmetric keys −  526  both center-based key establishment and key establishment among communicating groups.  527  Section 5 discusses key-establishment communications, including general communication 528  requirements, key names and key labels, message content and handling, authentication codes in 529  key-establishment messages and key revocation and destruction.  530  Appendix A contains example scenarios, and Appendix B lists document references.  531  12 FIPS 197, Advanced Encryption Standard (AES), November 26, 2001.  13  FIPS 180-4, Secure Hash Standard (SHS), March 2012.  14 FIPS 202, SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions, August 4, 2015.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  4  2. Definitions and Common Abbreviations 532  2.1 Definitions 533  Acknowledgement  information  Information sent to acknowledge the receipt of a communication  without errors.  Advanced Encryption  Standard  The encryption algorithm specified by FIPS 197, Advanced  Encryption Standard.  Agent See multiple-center agent.  Approved FIPS-approved or NIST-recommended. An algorithm or  technique that is either 1) specified in a FIPS or NIST  Recommendation, or 2) specified elsewhere and adopted by  reference in a FIPS or NIST Recommendation.  Asymmetric-key algorithm A cryptographic algorithm that uses two related keys, a public  key and a private key. The two keys have the property that  determining the private key from the public key is  computationally infeasible. Also known as a public-key  algorithm.  Asymmetric-key  cryptography  Cryptography that uses pairs of keys: public keys that may be  widely disseminated and private keys that are authorized for use  only by the owner of the key pair and known only by the owner  and possibly a trusted party that generated them for the owner.  Authenticated data Data that is accompanied by a valid message authentication code  that is used to verify its source and that the data is identical to that  for which the message authentication code was computed.  Authenticated encryption  keys (AEKs)  Keys used to provide both confidentiality and integrity protection  for the target data using the same key. Block cipher modes for  using AEKs are specified in SP 800-38C15 and SP 800-38D.16  Authentication A process that provides assurance of the source and integrity of  information that is communicated or stored.  Authentication algorithm A cryptographic function that is parameterized by a symmetric  key.  The algorithm acts on input data (called a “message”) of  variable length to produce an output value of a specified length.  15 SP 800-38C, Recommendation for Block Cipher Modes of Operation: the CCM Mode for Authentication and  Confidentiality.  16 SP 800-38D, Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  5  The output value is called the message authentication code  (MAC) of the input message.  Authentication key A symmetric key used to generate a message authentication code  on a message.  See Data Authentication Key (DAK).  Authenticity The property of being genuine, verifiable and trusted; confidence  in the validity of a transmission, a message, or message  originator.  Automated Using an electronic method rather than a manual method. In most  cases, no human intervention is required.  Automated key  establishment  The process by which cryptographic keys are securely distributed  among cryptographic modules using automated methods (e.g.,  key transport and/or key agreement protocols).  Bi-directional  (communications)  As used in this Recommendation, the same symmetric key can be  used for both protecting (e.g., encrypting) sensitive data to be sent  to one or more other entities and for processing (e.g., decrypting)  protected data received from other entities sharing the key.  Contrast with uni-directional (communications).  Block cipher A symmetric-key cryptographic algorithm that transforms one  block of information at a time using a cryptographic key. For a  block cipher algorithm, the length of the input block is the same  as the length of the output block.  Checksum A value that (a) is computed by a function that is dependent on  the contents of a data object and (b) is stored or transmitted  together with the object, for detecting changes in the data.  Ciphertext Data in its encrypted form.  Cloud computing facility A facility that provides ubiquitous, convenient, on-demand  network access to a shared pool of configurable computing  resources (e.g., networks, servers, storage, applications, and  services) that can be rapidly provisioned and released with  minimal management effort or service provider interaction.  Compromise The unauthorized disclosure, modification or use of sensitive data  (e.g., keying material and other security-related information).  Confidentiality The property that sensitive information is not disclosed to  unauthorized individuals, entities, or processes.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  6  Communicating group Two or more logical entities that exchange data using a set of  common keying material. Each communicating group has  different keying material. An entity and a center participating in  a key-establishment transaction do not constitute a  communicating group.  Cryptographic key (Key) A parameter used in conjunction with a cryptographic algorithm  that determines its operation in such a way that an entity with  knowledge of the key can reproduce or reverse the operation,  while an entity without knowledge of the key cannot. Examples  include:  1) The transformation from plaintext to ciphertext and vice  versa for a given cryptographic algorithm, or  2) The Message Authentication Code for given data and  cryptographic algorithm.  Cryptoperiod The time span during which a specific key is authorized for use  or in which the keys for a given system may remain in effect.  Data Authentication Key  (DAK)  A key used for the computation of MACs in order to provide  assurance of content integrity and (some level of) source  authentication for cryptographically protected information.  Data Encrypting Key  (DEK)  A key used for the encryption of data.  Data Key (DK) A key used to encrypt and decrypt data, or to authenticate data.  Decryption The process of transforming ciphertext into plaintext using a  cryptographic algorithm and key.  Encryption A process of transforming plaintext into ciphertext using a  cryptographic algorithm and key.  Entity An individual (person), organization, device, or process.  Error report information The information in a message that reports the error that was found  in a previously received message.  Hash function A function that maps a bit string of arbitrary length to a fixed- length bit string. Approved hash functions satisfy the following  properties:  1. (One-way) It is computationally infeasible to find any input  that maps to any pre-specified output, and  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  7  2. (Collision resistant) It is computationally infeasible to find  any two distinct inputs that map to the same output.  Impact level The magnitude of harm that can be expected to result from the  consequences of unauthorized disclosure of information,  unauthorized modification of information, unauthorized  destruction of information, or loss of information or information  system availability.  Internet Engineering Task  Force (IETF)  A large, open international community of network designers,  operators, vendors, and researchers concerned with the evolution  of the Internet architecture and the smooth operation of the  Internet.  Initialization vector (IV) A vector used in defining the starting point of a cryptographic  process.  Key See Cryptographic key.  Key agreement A key-establishment procedure where the resultant keying  material is a function of information contributed by two or more  participants, so that an entity cannot predetermine the resulting  value of the keying material independently of any other entity’s  contribution.  Key Derivation Key  (KDK)  Keys used to derive DEKs, DAKs, AEKs. and other KDKs  Symmetric-key methods for key derivation are specified in SP  800-108.17 KDKs are not used to derive KWKs.  Key Distribution Center  (KDC)  Used to generate and distribute keys to entities that need to  communicate with each other but may not share keys except with  the center.  Key establishment The process by which a key is securely shared between two or  more entities, either by transporting a key from one entity to  another (key transport) or deriving a key from information  contributed by the entities (key agreement).  Key-establishment  transaction  An instance of establishing secret keying material among entities.  A transaction will require multiple protocol messages between  two or more entities.  17 SP 800-108, Recommendation for Key Derivation Using Pseudorandom Functions.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  8  Key-generation request  information  Information necessary to request the generation of cryptographic  keys.  Key management The activities involving the handling of cryptographic keys and  other related security parameters (e.g., IVs) during the entire life  cycle of the keys, including their generation, storage,  establishment, entry and output, and destruction.  Keying material The data (e.g., keys and IVs) necessary to establish and maintain  cryptographic keying relationships.  Keying relationship The state existing between entities when they share at least one  symmetric key.  Key-transfer information Information used to distribute one or more keys to a recipient.  Key Translation Center  (KTC)  Used to unwrap keying material sent by one subscriber using a  key-wrapping key shared with that subscriber, and to rewrap the  same keying material using a different key-wrapping key shared  with a different subscriber.  Key transport A manual or automated key-establishment procedure whereby  one entity (the sender) selects and distributes the key to another  entity (the receiver).  Key type As used in this Recommendation, a key categorized by its  properties and uses: key-wrapping key, data authentication key,  data encryption key or key-derivation key.  Key unwrapping A method of removing the cryptographic protection on keys that  was applied using a symmetric-key algorithm and key-wrapping  key.  Key wrapping A method of cryptographically protecting keys that provides both  confidentiality and integrity protection for the wrapped keying  material using a symmetric-key algorithm and a key-wrapping  key.  Key Wrapping Key  (KWK)  A key used exclusively to wrap and unwrap (e.g., encrypt, decrypt  and integrity protect) other keys.  Layer 1 key The top-most layer in a (possible) hierarchy of keys of a keying  relationship.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  9  Manual distribution A non-automated means of transporting cryptographic keys by  physically moving a device or document containing the keying  material.  Master/recipient  relationship  As used in this Recommendation, one (or more) members of a  communicating group (i.e., masters) are allowed to generate  keying material and distribute it to all other members of the  group, while other members (i.e., recipients) are only allowed to  receive keying material. Contrast with a peer relationship.  Message The information transferred from one entity to another using  communication protocols. This Recommendation identifies  information to be included in a message but does not specify the  format of that message.  Message Authentication  Code (MAC)  A cryptographic checksum on data that uses a symmetric key to  detect both accidental and intentional modifications of data.  Mode (of operation) A set of rules for operating on data with a cryptographic algorithm  and a key; often includes feeding all or part of the output of the  algorithm back into the input of the next iteration of the  algorithm, either with or without additional data being processed.  Multicast transmission A transmission that communicates a set of information from one  sender to multiple recipients simultaneously.  Multiparty control A process that uses two or more separate entities (usually  persons) operating in concert to protect sensitive functions or  information. No single entity is able to access or use the materials,  e.g., cryptographic keys.  Multiple-center agent A center within a multiple-center group through which a  subscriber obtains multiple-center key-establishment services.  Multiple-center group A set of two or more centers that have agreed to work together to  provide cryptographic keying services to their subscribers.  Party Any entity, center or multiple-center agent.  Peer relationship As used in this Recommendation, all members of a  communicating group are allowed to generate or otherwise obtain  keying material for distribution to the other members of the  group. Contrast with a master/recipient relationship.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  10  Protocol A special set of rules used by two or more communicating entities  that describe the message order and data structures for  information exchanged between the entities.  Public key cryptography See asymmetric-key cryptography.  Plaintext Unencrypted (unenciphered) data.  Recipient The entity that receives a communication.  Revocation As used in this Recommendation, the process of permanently  terminating the valid use of a key to apply cryptographic  protection (e.g., wrap keying material, encrypt data or generate a  MAC).  Revocation-confirmation  information  Information provided to confirm that keying material has been  destroyed as requested.  Revocation-request  information  Information indicating the keys to be revoked and destroyed.  Secure channel As used in this Recommendation, a path for transferring data  between two entities or components that ensures confidentiality,  integrity and replay protection, as well as mutual authentication  between the entities or components. The secure channel may be  provided using cryptographic, physical or procedural methods, or  a combination thereof.  Security strength A number associated with the amount of work (that is, the number  of operations) that is required to break a cryptographic algorithm  or system.  Shall This term is used to indicate a requirement of a Federal  Information Processing Standard (FIPS) or a requirement that  must be fulfilled to claim conformance to this Recommendation.  Note that shall may be coupled with not to become shall not.  Should This term is used to indicate an important recommendation.  Ignoring the recommendation could result in undesirable results.  Note that should may be coupled with not to become should not.  Source authentication A process that provides assurance of the source of information.  Split knowledge A process by which a cryptographic key is split into n key  components, each of which provides no knowledge of the original  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  11  key. The components can be subsequently combined to recreate  the original cryptographic key.  Subscriber An entity that has a keying relationship with a center or agent of  a multiple-center group.  Symmetric key A single cryptographic key that is used with a symmetric-key  algorithm.  Symmetric-key algorithm A cryptographic algorithm that uses a single secret key for a  cryptographic operation and its complement (e.g., encryption and  decryption).  Symmetric-key  cryptography  Cryptography that uses the same key for both applying  cryptographic protection (e.g., encryption or computing a MAC)  and removing or verifying that protection (e.g., decryption or  verifying a MAC).  Target data As used in this Recommendation, data, other than keys, that are  afforded cryptographic protection.  Time-variant parameter A time-varying value that has (at most) an acceptably small  chance of repeating (where the meaning of “acceptably small”  may be application specific).  Transaction See Key-establishment transaction.  Transaction-authentication  key  A key generated specifically for the key-establishment  transaction that is used to generate message authentication codes  for the protocol messages in that transaction.  Translation The process performed by a center to unwrap keying material  received from a sending entity (a subscriber or a center in a  multiple-center group) using a key-wrapping key shared with that  entity and then rewrapping the same keying material using a  different key-wrapping key shared with the next recipient of the  wrapped keying material (a different subscriber or a different  center in the multiple-center group).  Translation-request  information  Information provided to a center to request the translation of  keying material contained in the request for a subscriber.  Uni-directional  (communications)  As used in this Recommendation, a different symmetric key is  always required for cryptographically protecting (e.g.,  encrypting) sensitive data to be sent to another entity than is  required when processing (e.g., decrypting) cryptographically  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  12  protected data that is received from that other entity. Contrast  with bi-directional (communications).  Wrapping See Key wrapping  2.2 Common Abbreviations 534  This section contains abbreviations used in this Recommendation. 535  AEK Authenticated Encryption Key.  AES Advanced Encryption Standard.  DAK Data Authentication Key.  DEK Data Encrypting Key.  DK Data Key.  FIPS Federal Information Processing Standard.  KDC Key Distribution Center.  KDK Key Derivation Key.  KWK Key Wrapping Key.  KTC Key Translation Center.  MAC Message Authentication Code.  NIST National Institute of Standards and Technology.  NISTIR NIST Internal or Interagency Report.  SP Special Publication.  536  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  13  3. Symmetric-Key-Management Fundamentals 537  Symmetric-key algorithms (sometimes called secret-key algorithms) use a single key to both apply 538  cryptographic protection and to remove or check the protection. For example, the key used to 539  encrypt data (i.e., apply protection) is also used to decrypt the encrypted data (i.e., remove the 540  protection); in the case of encryption, the original data is called the plaintext, while the encrypted 541  form of the data is called the ciphertext. The key must be kept secret if the data is to remain 542  protected.  543  The goals of symmetric-key management are 1) to provide keys and related cryptographic 544  variables (e.g., initialization vectors (IVs)) where they are needed and 2) to keep keys secret. The 545  security of the data protected by these keys is strictly dependent upon the prevention of 546  unauthorized disclosure, modification, substitution, insertion, and deletion of the keys and, as 547  appropriate, other cryptographic variables (e.g., IVs).  If these are compromised, the 548  confidentiality and integrity of the protected data can no longer be assured.  General key-549  management guidelines are provided in SP 800-57 Part 1. Basic requirements for Key 550  Management Systems operated by or for the Federal Government are provided in SP 800-152. 551  3.1 Uses of Symmetric Keys 552  Symmetric keys are used by block cipher algorithms (e.g., AES) that are used for encryption, key 553  wrapping and/or the generation of message authentication codes. Symmetric keys are also used by 554  hash function-based authentication algorithms (e.g., HMAC18 and KMAC19) for the generation of 555  message authentication codes, and for key derivation and random bit generation. 556  Encryption is used to provide confidentiality for data. The unprotected form of the data is called 557  plaintext. Encryption transforms the data into ciphertext, and ciphertext can be transformed back 558  into plaintext using decryption. Data encryption and decryption are generally provided using 559  symmetric-key block cipher algorithms. See Section 4.1 of SP 800-175B20 for more information 560  regarding data encryption. 561  Key wrapping is a method used to provide confidentiality and integrity protection for keys (and 562  possibly other information associated with the keys) using a symmetric key-wrapping key that is 563  known by both the sender and receiver, and a block cipher algorithm. The wrapped keying material 564  can then be stored or transmitted (i.e., transported) securely. Unwrapping the keying material 565  requires the use of the same algorithm and key-wrapping key that was used during the original 566  wrapping process. See Section 5.3.5 of SP 800-175B for more information on key wrapping. 567  18 HMAC is specified in FIPS 198, The Keyed-Hash Message Authentication Code (HMAC).  19 KMAC is specified in SP 800-185, SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash, and ParallelHash.  20 SP 800-175B, Guideline for Using Cryptographic Standards in the Federal Government: Cryptographic  Mechanisms.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  14  Message authentication codes are used to protect message and data integrity. Message 568  authentication codes are cryptographic checksums on data that use symmetric-key cryptography 569  to detect both accidental and intentional modifications of data. They also provide some measure 570  of source authentication between entities sharing the same key because only entities sharing a key 571  can produce the same message authentication code. See Section 4.2 of SP 800-175B for further 572  information on message authentication codes.  573  Key derivation is concerned with the generation of a key from secret information, although non-574  secret information may also be used in the generation process in addition to the secret information. 575  Typically, the secret information is shared among the entities that need to derive the same key for 576  subsequent interactions. The secret information could be a key that is already shared between the 577  entities (i.e., a pre-shared key), or could be a shared secret that is derived during a key-agreement 578  scheme. See Section 5.3.2 of SP 800-175B for more information regarding key derivation. 579  Cryptography and security applications make extensive use of random numbers and random bits. 580  For cryptography, random values are needed to generate cryptographic keys. There are two classes 581  of random bit generators (RBGs): Non-Deterministic Random Bit Generators (NRBGs), 582  sometimes called true random number (or bit) generators, and Deterministic Random Bit 583  Generators (DRBGs), sometimes called pseudorandom bit (or number) generators. SP 800-90A21 584  specifies approved DRBG algorithms, based on the use of hash functions and block-cipher 585  algorithms. See Section 4.4 of SP 800-175B for more information regarding random bit generation.  586  3.2 Application Considerations 587  Federal agencies are required to comply with FIPS 19922 and FIPS 20023 in determining the 588  sensitivity of their applications and data (i.e., the target data) and the impact level associated with 589  any compromise of that data (i.e., Low, Moderate or High impact). When the impact level has been 590  determined, the security strength of the cryptographic algorithms and keys for protecting that data 591  can be determined. PR:2.3, PR:2.4 and PR:2.5 in SP 800-152 specify the minimum security 592  strengths required for the Low, Moderate and High impact levels, respectively. 593  Important considerations that apply to the selection of a key-management approach include: 594  • The exposure of a key by any entity having access to that key compromises all data 595  protected by that key; 596  • The more entities that share a key, the greater the probability of exposure of that key to 597  unauthorized entities; 598  21 SP 800-90A, Random Number Generation Using Deterministic Random Bit Generator Mechanisms.  22 FIPS 199, Standards for Security Categorization of Federal Information and Information Systems.  23 FIPS 200, Minimum Security Requirements for Federal Information and Information Systems.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  15  • The longer that a key is used, the greater the chance that it will become known by 599  unauthorized entities during its use; 600  • The greater the amount of data that is protected by the key, the greater the amount of data 601  that is exposed if the key is compromised; 602  • It is essential that the source of a secret or private key is trustworthy, and that a secure 603  channel be used for key distribution; and 604  • The key used to initiate a keying relationship must be obtained through a secure channel, 605  often using an out-of-band process. 606  Each of these considerations must be addressed in any application of symmetric-key cryptography. 607  When using asymmetric cryptography, one entity can make one public key available to other 608  entities and use the corresponding private key in secured communications with those other entities. 609  However, when using symmetric-key cryptography, a different key is often required for each 610  correspondent. Some organizations choose to reduce this cryptographic burden by sending the 611  same symmetric key to multiple correspondents, then using that key in multicast transmissions to, 612  or exchanges with, all parties sharing that symmetric key. Drawbacks to this approach include a 613  loss of privacy and integrity protections within what are effectively cryptographic communities-614  of-interest, and a loss of cryptographic protection by all members of the community-of-interest if 615  the shared key is compromised. There is also significant management and accounting overhead 616  associated with the distribution, installation, revocation and post-revocation access management 617  for what can be complex combinations of both distinct and overlapping cryptographic 618  communities. 619  Symmetric-key cryptography is attractive in applications that cannot afford the processing 620  overhead associated with asymmetric cryptography. This is becoming a more important factor, 621  given the rapid growth of the Internet of Things (IoT). Symmetric-key cryptography is an 622  increasingly common choice for Wireless Sensor Networks (WSN), for example, due to the limited 623  processing, storage, and electrical power available to sensors. As of 2018, asymmetric-key 624  encryption, even for key-establishment and integrity protection is impractical for many IoT sensor 625  components. An initial response to this situation has resulted in research to develop “lightweight” 626  block ciphers (see NISTIR 811424) to protect sensor data and control. These “lightweight” block 627  ciphers can be defeated by current personal computers in one to a few hours (see KM in WSN).  628  24 NIST 8114, Report on Lightweight Cryptography.  The exposure of a key by any entity having access to that key compromises all data protected by that  key, and the more entities that share a key, the greater the probability of exposure of that key to  unauthorized entities.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  16  Some applications of symmetric-key cryptography reduce the initial key-management overhead 629  by establishing \"crypto nets\" in which many entities share the same secret key. Although there are 630  cases where operational considerations encourage the adoption of this course, the exposure of any 631  secret key tends to become more likely as the number of entities sharing the secret key increases. 632  Cyber threats, personnel security threats, physical security threats and simple carelessness on the 633  part of any entity that has access to an unencrypted secret key endangers the security of all data 634  protected by that key. This consideration argues in favor of restricting the number of entities that 635  share any given key. Exceptions that can mitigate the effects of this principle are found in isolated 636  environments, such as networks in protected facilities in which no processor that has a secret key 637  is remotely accessible.  638  639  For these reasons, keys shall not be used indefinitely. The period for which a key is to be used, 640  called a cryptoperiod, is established by policy based on a risk assessment. In any event, symmetric-641  key management involves not just the initial distribution of keys, but also the distribution of 642  replacements for expired or compromised keys. Key replacement is required at a frequency 643  determined by the cryptoperiod, but emergency replacement is also required when a key in use is 644  compromised. The distribution and accounting requirements imposed by cryptoperiods and 645  emergency key replacement add significantly to key-management overheads. Note that even the 646  management of asymmetric-key pairs imposes a sufficient overhead burden that many 647  organizations seek to minimize when using cryptography. However, the key-management burden 648  is greater in the case of symmetric-key cryptography.  649  The source of any secret key has the ability to defeat any confidentiality or integrity mechanism 650  for which the key is used. Consequently, keys shall be accepted only from sources that can be 651  trusted with all information that is to be protected by cryptography using those keys. 652  When using asymmetric-key cryptography, a secure communications relationship can be 653  established with a new correspondent simply by making a key-establishment public key available 654  to the new correspondent. In the case of symmetric-key cryptography, a secret key must be 655  securely provided to the new correspondent. This requires either a physical transfer between 656  correspondents, a shared relationship with a center (e.g., a key distribution center) or the 657  establishment of an initial symmetric key using asymmetric key-establishment techniques. 658  The longer that a key is in use, the greater the chance that it will become known by unauthorized parties  while still in use, and the greater the amount of data protected by the key, the greater the amount of  data that is compromised if the key is compromised.  It is essential that the source of a secret or private key be trustworthy; the key used to initiate a keying  relationship must be obtained using a secure channel.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  17  Cloud-computing facilities and other large data repositories that store and/or process information 659  for physically remote customers should protect that information while in transit and at rest. Due 660  to its superior processing efficiency, symmetric-key cryptography is used for the encryption of the 661  information, although asymmetric-key cryptography has generally been used for key transport and 662  integrity protection and for the generation of digital signatures. Some cloud-computing facilities 663  and networks serve very large numbers of customers. Secure storage, retrieval, and general 664  management of the symmetric keys is essential to the confidentiality of customer information. It 665  also represents significant key-management overhead. Symmetric keys must never be stored or 666  transferred in unprotected form. 667  In the past, most distributions of symmetric keys involved a transfer of the keys by human couriers 668  or secure government mail systems. However, as the number of entities using a system grows, the 669  work involved in the distribution of the secret keying material could grow to be prohibitive. The 670  Internet Engineering Task Force (IETF’s) provides guidelines for key management in RFC 410725, 671  which discusses issues associated with manual versus automated key distribution, as well as best 672  practices for key management. Consistent with RFC 4107’s conclusion that, in general, automated 673  key management should be employed, this Recommendation focuses primarily on automated key-674  establishment schemes. However, for any cryptographic key-management scheme that is solely 675  dependent on symmetric-key cryptography for key establishment, the initial distribution of keys 676  without the use of asymmetric-key algorithms must be manual. This is a significant cost constraint 677  and introduces architectural complexity as the size of the supported organization increases. 678  3.3 Symmetric Algorithm and Key Types 679  NIST has approved several basic cryptographic algorithms and \"modes\" for using them. 680  • Block cipher algorithms (e.g., AES and TDEA26) that are used in specified modes to 681  perform encryption/decryption, message authentication and integrity protection, key 682  wrapping, key derivation and random bit generation.  683  • Hash functions (algorithms) that can be used to provide message authentication and 684  integrity protection, key derivation and random bit generation. The methods for providing 685  these services can be considered as hash function modes, although that term is not normally 686  used in relation to hash functions. 687  Several types of keys are used in symmetric-key cryptography. 688  25 RFC 4107, Guidelines for Cryptographic Key Management.  26 Although TDEA is currently an approved algorithm, its use is being discouraged because of security  considerations (see SP 800-131A and the NIST announcement for using TDEA).  https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  18  • Key wrapping keys (KWKs) are used to wrap (i.e., encrypt and integrity protect) other 689  keys, including other KWKs. KWKs are used with a block cipher algorithm as specified in 690  SP 800-38F.27 691  • Data encryption keys (DEKs) are used to encrypt data other than keys (i.e., the target data). 692  Block cipher modes for using DEKs are specified in SP 800-38A28, the addendum to SP 693  800-38A29, SP 800-38E30 and SP 800-38G.31  694  • Data authentication keys (DAKs) are used to generate message authentication codes 695  (MACs) that provide integrity protection and (some measure of) source authentication for 696  the target data. Block cipher modes for generating and verifying MACs are specified in SP 697  800-38B32 and SP 800-38D.33 Hash-based techniques for generating and verifying MACs 698  are specified in FIPS 19834 and SP 800-185. 699  • Authenticated encryption keys (AEKs) are used to provide both confidentiality and 700  integrity protection for the target data using the same key. Block cipher modes for using 701  AEKs are specified in SP 800-38C35 and SP 800-38D. 702  • Key Derivation Keys (KDKs) can be used to derive DEKs, DAKs, AEKs and other KDKs. 703  Symmetric-key methods for key derivation are specified in SP 800-108.36 KDKs shall not 704  be used to derive KWKs. 705  DEKs, DAKs and AEKs are collectively called data keys (DKs). 706  3.4 Key Distribution Using Symmetric-Key Techniques  707  Keying material (i.e., keys and other cryptographic variables, such as IVs) shall either be 708  distributed manually (see Section 3.4.1) or using appropriate automated distribution methods (see 709  Section 3.4.2) before secure transactions begin using those keys. Keys, all other cryptographic 710  27 SP 800-38F, Recommendation for Block Cipher Modes of Operation: Methods for Key Wrapping.  28 SP 800-38A, Recommendation for Block Cipher Modes of Operation: Methods and Techniques.  29 SP 800-38A Addendum, Recommendation for Block Cipher Modes of Operation: Tree Variants of Ciphertext  Stealing for CBC Mode.  30 SP 800-38E, Recommendation for Block Cipher Modes of Operation: the XTS-AES Mode for Confidentiality on  Storage Devices.  31 SP 800-38G, Recommendation for Block Cipher Modes of Operation: Methods for Format-Preserving  Encryption.  32 SP 800-38B, Recommendation for the Block Cipher Mode of Operation: the CMAC Mode for Authentication.  33 SP 800-38D, Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC,  SP 800-38D.  34 FIPS 198, The Keyed-Hash Message Authentication Code (HMAC).  35 SP 800-38C, Recommendation for Block Cipher Modes of Operation: the CCM Mode for Authentication and  Confidentiality.  36 SP 800-108, Recommendation for Key Derivation Using Pseudorandom Functions.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  19  variables (where needed), and accompanying documentation shall be protected throughout the 711  distribution process.  712  Keys shall not be used operationally to apply cryptographic protection (e.g., encrypt) prior to 713  sending and/or receiving acknowledgments of successful receipt or if a compromise is suspected.  714  Procedures to follow up and resolve distribution irregularities shall be in place (e.g., included in a 715  Key Management Practices Statement as described in SP 800-57, Part 2.37. 716  3.4.1 Manual Distribution 717  When manual methods are used to distribute cryptographic keying material, that material shall be 718  distributed using couriers, registered mail, or an equivalent distribution service in which the 719  delivery agent is trusted by both the sending and receiving entities, with the recipients required to 720  identify themselves to the delivery agent and provide an appropriate receipt upon delivery. The 721  keys shall be transported on a medium that, together with the physical distribution method, 722  provides the required confidentiality and integrity protection for the keys. 723  Electronic media (e.g., smart cards, flash drives, or key loader devices) should be used during 724  manual distribution. If keys or other cryptographic variables are printed (instead of being 725  distributed using electronic media), provision shall be made to protect the keying material from 726  unauthorized disclosure or replacement (e.g., using uniquely identified, tamper-detecting 727  packaging). Whether using electronic media or printed material during delivery, the delivery 728  receipt shall identify the source of the keying material, the delivery agent, the recipient, and 729  indicate the state of the received media (e.g., no tampering detected, valid authentication codes, 730  etc.). 731  For environments where the FIPS 199 impact level associated with the data to be protected by the 732  keying material to be distributed is High, multiparty control and/or split knowledge shall be 733  employed when keys are distributed in plaintext form. 734  Distribution procedures shall ensure that: 735  (1) The distribution of keys and any other variables is authorized; 736  (2) The keying material has been received by the authorized recipient; and 737  (3) The key has not been disclosed, modified or replaced in transit. 738  The distributor (i.e., the source of the keying material) and receiver of the manually distributed 739  keys shall identify (to each other) those individuals who are authorized to originate, receive and 740  change keys and shall not reassign or delegate such responsibilities without proper notice. 741  37 SP 800-57, Part 2: Recommendation for Key Management: Part 2: Best Practices for Key Management  Organizations.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  20  3.4.2 Automated Distribution 742  Automated key distribution is the electronic transmission of cryptographic keys (and, where 743  needed, other cryptographic variables such as IVs) via a communication channel (e.g., the 744  Internet). This requires the prior distribution of an initial key-wrapping key (KWK) and an 745  authentication key (i.e., a DAK), either manually (see Section 3.4.1) or using asymmetric key-746  establishment techniques (e.g., the key agreement or key transport schemes specified in SP 800-747  56A or SP 800-56B). The KWK and DAK may then be used to distribute all key types discussed 748  in Section 3.3. 749  Keying material distributed after the initial KWK and DAK have been established shall be  750  wrapped with a KWK shared between communicating entities38 in key-establishment messages 751  defined using a protocol that provides confidentiality, integrity protection assured delivery, and 752  replay protection; the content of the protocol message shall be integrity protected using a DAK39 753  (see Section 5.4). The recipient(s) shall unwrap the protected keys and verify their source and 754  integrity before any cryptographic process can begin for communications using the transported 755  key(s).  If a recipient has multiple KWKs that may be used to unwrap the received keys, 756  information shall be available to identify the KWK to be used (e.g., sent with the transported 757  keying material) (see Section 5.2). Likewise, if multiple DAKs are available, a method shall be 758  available to indicate the DAK used. 759  An SP 800-38F-compliant key-wrapping algorithm shall be used with a KWK for wrapping keys 760  for automated key distribution.  The key-wrapping algorithm shall use an approved symmetric 761  encryption algorithm (i.e., AES) for wrapping one or more keys during the same key-wrapping 762  process. Keys being wrapped may be either KWKs, KDKs, DEKs, DAKs or AEKs. The algorithm 763  and key size used to perform the key wrapping shall provide security equal to or greater than the 764  security strength to be provided to any data to be subsequently protected by the wrapped keys. 765  A means of protection against replay shall be provided in a key-establishment protocol. The use 766  of time-variant parameters may be used to afford this protection.  A nonce is a time-varying value 767  that has (at most) an acceptably small chance of repeating (where the meaning of “acceptably 768  small” may be application specific). See Section 5.4 of SP 800-56A or SP 800-56B for more 769  information on nonces.  770  3.5 Key Hierarchies 771  A hierarchy of keys is often used when symmetric-key cryptography is employed for 772  communications and storage applications.  773  38 Either the initial KWK or a KWK subsequently distributed between the communicating  entities.  39 Either the initial DAK or a DAK subsequently distributed between entities.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  21  774  Figure 1: Examples of Symmetric-Key Hierarchies 775  Figure 1 provides several examples of symmetric-key hierarchies. 776  • The top-most layer (Layer 1) can be any of the key types. This layer establishes a keying 777  relationship.  778  • When the Layer 1 key is a KWK, further keys may be distributed using that KWK (see 779  examples A, B, C and E in which KWKs, KDKs, and DKs are shown at Layer 2 in the 780  figure).  781  • A KDK at any layer has the data keys and KDKs that it derives as a lower layer (see 782  examples A, C and F).  783  • DKs (i.e., DEKs, DAKs and AEKs) are always at the bottom of the implemented hierarchy, 784  even if the DK is a Layer 1 key, in which DKs form the only layer in the hierarchy (see 785  example D).  786  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  22  • KWKs, KDKs and DKs in a layer immediately below KWKs are wrapped by the KWK 787  above them in the hierarchy (see examples A, B, C and E). 788  The key hierarchy may not be \"vertical\" as shown in Figure 1 but may be somewhat more 789  horizontal; two examples are shown in Figure 2. 790  791  Figure 2: Key Hierarchy Structure Examples 792  In example 1 of the figure, the Layer 1 KWK was used to wrap a Layer 2 DAK; these keys were 793  used to establish a keying relationship (indicated in the left-hand oval). Subsequently, the KWK 794  was used to wrap a Layer 2 KDK, which was used to generate a Layer 3 DEK and DAK. 795  In example 2 of the figure, the KWK and DAK established the keying relationship (indicated in 796  the right-hand oval), but the DAK was not wrapped using the KWK as was done in the first 797  example. In this case, both the KWK and DAK are Layer 1 keys. Subsequently, the  KWK was 798  used to wrap a Layer 2 KWK, which was later used to wrap two Layer 3 AEKs. 799  For the most part, the number of layers is irrelevant; the important issue is where the key is located 800  in a hierarchy, especially if the revocation of a key is required (see Section 5.5).  801  3.5.1 Storage Applications 802  All keys used to protect stored target data shall be either generated by the system in which the 803  target data is stored or generated by the sender of cryptographically protected data that is stored 804  by the recipient upon receipt. As stated in Section 3.5, the lowest layer in the key hierarchy consists 805  of the data keys (i.e., DEKs, DAKs and AEKs) used to protect the stored target data. Higher-layers 806  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  23  of keys, if used, are the KWKs used to protect the data keys or the KDKs used to derive them (see 807  Figure 1 and Figure 2).  808  3.5.2 Communicating Groups 809  The use of symmetric keys for communications between correspondents requires the establishment 810  of cryptographic keying relationships among two or more entities that form a communicating 811  group (i.e., a group of entities that correspond among themselves); often, a communicating group 812  consists of only two entities. An entity may be a member of more than one communicating group.  813  When using symmetric-key cryptography, a keying relationship is established when each member 814  of the group shares common keys − the Layer 1 keys of that relationship. Symmetric keying 815  relationships among communicating groups are established using the methods in Section 3.4 or 816  using key centers (see Section 4.1). Section 4.2 provides more details regarding the establishment 817  of communicating groups. 818  The keys used during communications among communicating group members (either the Layer 1 819  keys or keys below them in a key hierarchy) may be either uni-directional or bi-directional.  820  • Uni-directional keys are used in only one direction during communications among group 821  members. Each group member that is authorized to send data has its own key for applying 822  cryptographic protection (e.g., encrypting data) to be sent to other group members. Other 823  members of the group have copies of the keys, but only use them for processing (e.g., 824  decrypting) the cryptographically protected information. For example, if Entities A and B 825  are the members of a communicating group, Entity A would use a key for encryption, but 826  Entity B would use that key only for the decrytion of information from Entity A. Entity B 827  would use a different key for encryption, and Entity A would use that same key only for 828  the decryption of information from Entity B. This approach is most appropriate for very 829  small groups (e.g., communicating pairs), or when very few group members are authorized 830  to apply protection. 831  • Bi-directional keys can be used in both directions during a communication between group 832  members; the same symmetric key is used by each member for both protecting (e.g., 833  encrypting) sensitive data to be sent to other group members and for processing (e.g., 834  decrypting) protected data received from other group members. 835  836  3.5.3 Key-Establishment Transactions 837  A key-establishment transaction is an instance of establishing keying material among or between 838  entities. This includes requests for generating keys, the generation of the keys, the distribution of 839  those keys and a confirmation of delivery. This applies to both manual and automated key 840  distribution. 841  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  24  For automated key distribution, this requires multiple protocol messages. The integrity of each 842  message and assurance of the message source is provided using a message authentication code 843  (MAC) that is generated using a transaction authentication key generated for the transaction or a 844  DAK shared between the message sender and receiver when a transaction authentication key is 845  not available (e.g., in error messages in response to messages containing the transaction 846  authentication key).  847  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  25  4. Key Management Architectures for Symmetric Keys  848  This section describes architectural considerations for the establishment of symmetric keys and 849  specifies architectures for different key-establishment environments. Because the security of 850  cryptographically protected systems is largely dependent on the effectiveness of key management 851  architectures, any such architecture must take into account organizational structures and 852  responsibilities, and operational requirements.  Key-management architecture design is best 853  undertaken by specialists who have a comprehensive understanding of the organization, its 854  requirements, and the risks to which it is exposed. This section describes architectural elements in 855  general and some of the considerations associated with the design, selection, and acceptance of 856  key management architectures.  857  This section provides high-level examples of key-establishment using symmetric-key systems.  858  The general architectural approaches described include center-based key establishment and key 859  establishment for communicating groups. Section 5 provides further information on the messages 860  used for key establishment, and Appendix A provides more in-depth examples. 861  4.1 Center-based Key Establishment Architectures 862  Key centers can be used to mitigate one of the primary objections to the use of symmetric keys for 863  cryptographic protections: the number of keys required to initiate and maintain cryptographic 864  keying relationships between communicating entities (i.e., members of communicating groups) 865  when asymmetric keys are not available for this purpose. When using key centers, each entity 866  becomes a subscriber of a mutually trusted key center by establishing a cryptographic keying 867  relationship with that center consisting of a KWK and a DAK. The KWK is used to wrap keying 868  material for transport, and the DAK is used to authenticate messages when another authentication 869  key is not available. A KWK and DAK shared between any subscribing entity and a center permits 870  secure communications to be established between that entity and any other subscribing entity that 871  has a KWK shared with the center. 872  A keying relationship between a center and its subscribers is normally established using a manual 873  process whereby either the center or the subscriber generates the keying material and provides it 874  to the other party. The relationship is rekeyed using the same process. Alternatively, if an 875  asymmetric key-establishment capability is available (e.g., asymmetric key agreement or key 876  transport), the keying material could be established using that capability. See Section 3.4. 877  For center-based key establishment, the center is responsible for verifying the identity of each of 878  its subscribers, authorizing communications between subscribers by providing or not providing 879  the services of the center, and may provide secure key-generation services. 880  Key center architectures have several variants: Key Distribution Centers (KDCs), Key Translation 881  Centers (KTCs) and Multiple-Center Groups of KDCs and/or KTCs. Figure 3 depicts the keying 882  relationships between a single center and its subscribers. The center may be either a KDC or KTC. 883  As shown in the figure, each subscriber shares a different KWK with its center.  884  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  26  885  886  Figure 3: Center-Subscriber Keying Relationships 887  The keying relationship between a subscriber and a center can be used to establish keying 888  relationships between non-center entities (e.g., subscribers A, B and C in the figure) to form 889  communicating groups of two or more entities using automated key-establishment protocols. In 890  cases where a KWK and DAK are established as the Layer 1 keys among subscribing entities, and 891  at least one of those entities has key generation capabilities, subsequent key-establishment 892  transactions may be performed without using the key center (see Section 4.2.2). The KWK and DAK 893  that are established using the services of a key center shall only be replaced using the services of 894  that center. 895  4.1.1 Key Distribution Centers (KDCs) 896  A KDC is responsible for the secure generation and distribution of keys to its subscribers, either 897  to be used by a single subscriber for its own purposes or to be shared by multiple subscribers. 898  KDCs may send keys either unsolicited or upon request. 899  When keys are intended to be shared by multiple subscribers, the KDC generates and distributes 900  keys to subscribing entities who: 901  • Need to communicate with each other but either 1) do not currently share keys, 2) need to 902  replace keys previously established using that KDC or 3) the KDC determines (of its own 903  volition) that keys need to be shared between a subset of subscriber entities that will form 904  a communicating group; 905  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  27  • Each share a KWK and DAK with the same KDC (i.e., each entity is a subscriber of the 906  same KDC); and 907  • May not have the ability to generate keys. 908  A copy of the keys for each identified subscribing entity is wrapped by the KDC using a KWK 909  shared between that entity and the KDC. The wrapped keys may be sent to one subscribing entity 910  (e.g., the requesting entity) to be forwarded to the other entity(ies) (see Figure 4), or may be sent 911  directly to the (recipient) entities (including the requesting entity), depending on the protocol (see 912  Figure 5).  913  914  Figure 4: Obtaining Keys from a KDC (Distributing through a Single Subscriber) 915  Using Figure 4 as an example:  916  1) Subscriber A may optionally request that the KDC generate keying material, indicating 917  other subscribers that need to share the key (i.e., Subscribers B and C in the figure); the 918  DAK shared between Subscriber A and the KDC is used for message authentication.  919  2) Alternatively, the KDC may initiate the key distribution process without a subscriber 920  request by generating keying material to be shared by some subset of its subscribers 921  (e.g., Subscribers A, B and C in the figure).  922  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  28  3) In either case, the KDC generates the requested keying material, wraps it separately 923  using the KWK shared with each subscriber intended as a recipient. A transaction 924  authentication key (i.e., DAK) is also generated and wrapped; this DAK is in addition 925  to any other DAK included in the requested keying material. 926  4) In this example, the KDC sends all wrapped copies of the keys to Subscriber A in a 927  message that uses the transaction authentication key to generate a MAC on the outgoing 928  protocol message. 929  5) Subscriber A extracts its copy of the keys from the message and unwraps them using 930  the KWK shared with the KDC. The unwrapped transaction authentication key and the 931  received authentication code are used to check the authenticity of the message. 932  6) If the message appears to be authentic, subscriber A forwards the appropriate copy of 933  the keying material to the other intended recipient subscribers (i.e., Subscribers B and 934  C in this example) using the transaction authentication key to generate a (different) 935  MAC on each outgoing message. 936  7) Each recipient unwraps the received keying material using the KWK that is shares with 937  the KDC and uses the unwrapped transaction authentication key to check the 938  authenticity of the message.  939  940  Figure 5: Obtaining Keys from a KDC (KDC Distributes Keys to Each Subscriber Separately) 941  Using Figure 5 as an example: steps 1, 2 and 3 are the same as the example above. 942  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  29  4) The KDC sends a message to each intended recipient (including Subscriber A) containing 943  the appropriate copy of the wrapped keying material and using the unwrapped transaction  944  authentication key to generate a (different) MAC on each outgoing message.  945  5) Each recipient unwraps the received keying material using the KWK that it shares with the 946  KDC and uses the unwrapped transaction authentication key to check the authenticity of 947  the message. 948  The scenario described in Figure 5 places more responsibility for key management overhead (e.g., 949  accounting, revocation and suspension notice, etc.) on the KDC, while that described in Figure 4 950  places more overhead responsibility on Subscriber A. Organizational structures and assignments 951  of responsibilities can play a significant role in deciding which approach is preferable. 952  4.1.2 Key Translation Centers (KTCs) 953  A Key Translation Center has the ability to translate keys for distribution to a subset of its 954  subscribers.  955  A KTC is used to translate keys for future communication between subscriber entities of the same 956  KTC who: 957  • Need to communicate with each other, but may not currently share keys; 958  • Each share a KWK and DAK with the same KTC (i.e., each entity is a subscriber of the 959  same KTC); and 960  • At least one of the subscribing entities has the ability to generate keys. 961  Keying material is generated and sent by one of the subscribers (the requesting entity) to the KTC, 962  wrapped using the KWK shared with the KTC. The KTC unwraps the keying material to be 963  translated and rewraps it using the KWK shared with other identified subscribing entity(ies) (i.e., 964  the ultimate recipient(s)). The rewrapped keying material may be returned to the requesting entity 965  to be forwarded to the ultimate recipient(s) (see Figure 6), or may be sent directly to the ultimate 966  recipient(s), depending on the protocol (see Figure 7). 967  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  30  968  Figure 6: Requesting Key Translation, with Keys Provided through a Single Subscriber 969  Using Figure 6 as an example: 970  1) Subscriber A generates keying material to be shared among other KTC subscribers (i.e., 971  Subscribers B and C in the figure); a transaction authentication key (i.e., DAK) is also 972  generated.  973  2) Subscriber A wraps the keying material (including the transaction authentication key) using 974  a KWK shared with the KTC and sends it to the KTC, indicating other subscribers that 975  need to share the keys (i.e., Subscribers B and C); the transaction authentication key is used 976  to generate a MAC on the outgoing message.  977  3) The KTC unwraps the received keying material using the KWK shared with Subscriber A 978  and uses the unwrapped transaction authentication key to check the authenticity of the 979  received message.  980  4) If the received message appears to be authentic, the KTC then rewraps the keying material 981  separately for each intended recipient using the KWK shared with that recipient. 982  5) The KTC prepares a message containing the newly wrapped keys, generates a MAC on the 983  message using the (plaintext) transaction authentication key, and sends the message to 984  Subscriber A. 985  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  31  6) Subscriber A forwards the appropriate copy of the keying material to the other intended 986  recipient subscribers (i.e., Subscribers B and C) using the transaction authentication key to 987  generate a (different) MAC on each outgoing message. 988  7) Each recipient unwraps the received keying material using the KWK that is shares with the 989  KTC and uses the unwrapped transaction authentication key to check the authenticity of 990  the message. 991  992  Figure 7: Requesting Key Translation, with Keys Returned Separately to Each Subscriber 993  Using Figure 7 as an example, steps 1 through 4 are the same as the above example. 994  5) The KTC sends a message to each intended recipient (B and C) containing the appropriate 995  copy of the wrapped keying material, using the transaction authentication key to generate 996  a (different) MAC on each outgoing message.  997  6) Each recipient unwraps the received keying material using the KWK that it shares with the 998  KTC and uses the unwrapped transaction authentication key to check the authenticity of 999  the message. 1000  As in the case of KDCs (see Section 4.1.1), organizational structures and assignments of 1001  responsibilities can play a significant role in deciding which approach is preferable. 1002  4.1.3 Multiple-Center Architectures 1003  A multiple-center group is a set of two or more centers (KDCs and/or KTCs) that have formally 1004  agreed to work together to provide cryptographic keying services to their respective subscribers.  To 1005  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  32  the subscribers of a key center, the multiple-center group functions as if it were a single key center. 1006  Key centers may belong to more than one multiple-center group, but care shall be taken to separate 1007  domains of subscribers (e.g., subscribers for one organization from subscribers of another 1008  organization).  1009  Each center within the group has a keying relationship with at least one other center in the group: 1010  the centers share a KWK and a DAK to transport keying material between them. The centers may 1011  also distribute other keying material using their shared keys to protect messages exchanged between 1012  the centers.  1013  Every center within a multiple-center group shall have either a direct or an indirect keying 1014  relationship with every other center within the group (see Figure 8).  Two centers have a direct 1015  keying relationship when they share a KWK and DAK (established as discussed in Section 3.4). 1016  Once the multiple-center group is established, the multiple center group shall use either manual or 1017  automated protocols to maintain these keying relationships (i.e., to change the shared key(s)). 1018  Two centers have an indirect keying relationship when they do not share a KWK and DAK, but there 1019  is a chain of direct keying relationships between them.  In Figure 8, for example, direct keying 1020  relationships exist between Centers 1 and 2, and between Centers 2 and 3.  An indirect keying 1021  relationship exists between Centers 1 and 3 because of the direct relationships that form a chain of 1022  keying relationships through Center 2. 1023  1024  Figure 8: Multiple-Center Group Direct and Indirect Keying Relationships 1025  The use of indirect keying relationships can reduce the key management overhead associated with 1026  deploying keys among the multiple-center group members but can also reduce central control over 1027  relationships in a hierarchical environment. 1028  Centers within multiple center groups may provide key generation services. All centers within the 1029  group that have subscribers shall be capable of providing key translation; only a subscriber's agent 1030  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  33  (i.e., a key center to which an entity is subscribed) shall translate (i.e., wrap) keys for that subscriber.  1031  Some centers within the multiple-center group may only forward the keys or a request for services 1032  to the next center.  1033  Intermediate centers within the multiple center group forward information when a direct keying 1034  relationship does not exist between the agents or between an agent and a center that will generate the 1035  key(s) or perform the translation.  The intermediate centers used in one portion of the information 1036  flow need not be the same as those used in another portion of the information flow.  However, the 1037  number of intermediate centers used should be minimized.  1038  A multiple-center group shall be well-defined; all centers within a multiple-center group must be 1039  aware of what other centers are members of the group as well as the conditions and restrictions for 1040  group interactions. If a center belongs to more than one group, the interactions of one group shall be 1041  separated from the interactions of another group. 1042  The centers within a multiple-center group have specific keying relationships between them and use 1043  communication protocols to manage those keying relationships40 and fulfill requests from their 1044  subscribers.  1045  Multiple-center groups can be used to support the establishment of keying relationships between 1046  subscribers of different centers that belong to the multiple-center group (e.g., to establish 1047  communicating groups). Depending on the group design, every subscriber of a center within the 1048  group may or may not be able to establish keys with all subscribers of all centers within the group.  1049  Each subscribing entity associated with a KDC or KTC within a multiple-center group has a keying 1050  relationship with at least one center that is a member of the group; this center is the subscriber's 1051  \"agent\" for the group; however, a center need not have subscribers of its own.  Entities (i.e., 1052  subscribers) may have more than one agent for a multiple-center group, and a subscriber may 1053  subscribe to more than one multiple-center group using the same or a different agent. Using a center 1054  as an agent to a group does not preclude using the same center as a single-center KDC or KTC.  1055  Interaction with the other members of a multiple-center group by an agent is a service provided by 1056  that agent center. Key transactions initiated by a subscriber to one of its agents shall be fulfilled or 1057  acknowledged to the subscriber through that same agent.  1058  The following services may be provided to the subscribers by a multiple-center group.  1059  •  A key-distribution service is equivalent to the service provided by a single-center KDC.  One 1060  or more centers within the group shall be capable of generating keying material; however, 1061  only one center (i.e., only one KDC) within the multiple-center group shall generate the 1062  keying material for a single key-distribution process. Key generation may be in response to 1063  a request from a subscriber to its agent (one of the centers within the multiple-center group) 1064  or as determined by a center within the group. Agent centers within the multiple-center group 1065  40 This is similar in concept to the use of cross certification between PKI Certification Authorities.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  34  are responsible for wrapping the key(s) intended for their subscriber(s) under KWKs shared 1066  with those subscribers. All copies of the wrapped keys may be sent to a single subscriber for 1067  forwarding to the other intended recipients or provided to each recipient subscriber by its 1068  multiple-center agent.  1069  •  A key-translation service is equivalent to the service provided by a single-center KTC. KTCs 1070  forward copies of the key to the appropriate center(s) within the group for each subscriber 1071  designated to receive a copy of the key. All copies of the wrapped keys may be sent to a 1072  single subscriber or provided to the subscribers by their respective multiple-center agent. 1073  The following subsections provide high-level examples of interactions between subscribers and their 1074  agent centers and between centers within the multiple-center group. In these examples, all keying 1075  material is sent directly to the intended recipient(s). However, the keying material could also be 1076  returned to one subscriber, who distributes it to other subscribers. The examples do not address error 1077  handling; this is included in the more-detailed examples in Appendices A.5 and A.6.  1078  4.1.3.1 A Subscriber Requests Key Generation and Distribution Services 1079  In this example, a subscriber of an agent center requests key-generation services for keying 1080  material to be subsequently shared among a list of entities that are subscribers of some agent within 1081  the multiple-center group; this process starts at step 1) below. Alternatively, a center within the 1082  group could initiate the process for a predetermined list of entities (starting at step 2a or 3a).  1083  1) A subscriber (i.e., the requesting subscriber) sends a key-generation request to its agent 1084  center, indicating the other intended recipients of the keying material. A MAC is generated 1085  on the outgoing message using the DAK shared with the agent.  1086  2) If the agent can generate the requested keying material: 1087  a) The agent generates the requested keying material and a transaction authentication key, 1088  wraps a copy of the keys (including the transaction authentication key) for the requesting 1089  subscriber using the KWK shared with that subscriber, and sends them to the subscriber, 1090  using the transaction authentication key to generate a MAC on the outgoing message.  1091  b) For each intended recipient that is a subscriber of that agent: The agent wraps a copy of 1092  the keys using the KWK shared with each intended recipient and sends them to that 1093  subscriber, using the transaction authentication key to generate a MAC on the outgoing 1094  message. Alternatively, these copies could be sent in the same message as those intended 1095  for the requesting subscriber (see step 2a). 1096  c) For each intended recipient that is not a subscriber of that agent: 1097  • The agent attempts to determine a path through the multiple-center group to that 1098  recipient's agent for translation of the keys to be sent to that recipient.  1099  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  35  • The keying material is wrapped using a KWK shared with the next center in the path 1100  for transport to that center. A separate transaction authentication key is generated for 1101  multiple-center group communications, wrapped using the KWK shared with the 1102  next center in the path, and used to generate a MAC on the outgoing message. 1103  d) If a center receives a translation request from another center within the multiple center 1104  group, and that center is not the agent for the intended recipient (i.e., the center is an 1105  intermediate center): 1106  • The receiving center unwraps the received keying material using the KWK shared 1107  with the previous center and uses the unwrapped group transaction authentication 1108  key to check the authenticity of the received message. 1109  • If the received message appears to be authentic, the center then attempts to determine 1110  a path to the intended recipient's agent and wraps the keying material (including the 1111  group transaction authentication key) using a KWK shared with the next center in the 1112  path for transport to that center.  1113  • A MAC is generated on the outgoing message using the unwrapped group transaction 1114  authentication key. 1115  e) If a center receives a translation request from another center within the multiple center 1116  group, and the receiving center is the agent for the intended recipient: 1117  • The agent center unwraps the received keying material using the KWK shared with 1118  the previous center and uses the unwrapped group transaction authentication key to 1119  check the authenticity of the received message. 1120  • If the received message appears to be authentic, the agent center wraps the keying 1121  material to be translated (including the transaction authentication key, but not the 1122  group transaction authentication key) and sends it to the intended recipient, using the 1123  transaction authentication key to generate a MAC on the outgoing message. 1124  f) Any subscriber receiving wrapped keying material unwraps it using the KWK shared 1125  with its agent and uses the unwrapped transaction authentication key to check the 1126  authenticity of the received message. 1127  3) If the agent  center or another center within the group receives a request to generate keying 1128  material but is unable to do so:  1129  a) The center checks the authenticity of the received message using the DAK shared with 1130  the subscriber or center having sent the generation request. 1131  The center then forwards the request to a center within the group that can generate the 1132  requested keying material. Intermediate centers may be required. The forwarded request 1133  uses the DAK shared with the next center to generate a MAC on the outgoing message. 1134  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  36  b) When a center with a key-generation capability (a key-generation center) receives the 1135  request: 1136  • The authenticity of the received message is checked using the DAK shared with the 1137  subscriber or center that sent or forwarded the generation request.  1138  • The requested keying material is generated, as well as a transaction authentication 1139  key.  1140  • Keying material destined for any subscriber of that center is wrapped using a KWK 1141  shared with that subscriber and sent to that subscriber, using the transaction 1142  authentication key to generate a MAC on the outgoing message.  1143  • For any intended recipient that is not a subscriber of the key-generation center, go to 1144  step 2c above, proceeding through steps 2 d, e and f, as appropriate.  1145  4.1.3.2 A Subscriber Requests Key-Translation Services 1146  In this example, a subscriber of an agent center generates keying material and requests translation 1147  services for keying material to be subsequently shared among a list of entities that are subscribers 1148  of some agent within the multiple-center group.  1149  1) A subscriber generates keying material (including a transaction authentication key), wraps 1150  the keys using a KWK shared with its agent center and sends a translation request to the 1151  agent, indicating the intended recipients. The transaction authentication key is used to 1152  generate a MAC on the outgoing message.  1153  2) When an agent center receives a translation request: 1154  • The center unwraps the keying material using the KWK shared with the requesting 1155  subscriber and checks the authenticity of the received request using the unwrapped 1156  transaction authentication key. 1157  • If any intended recipient is also a subscriber of that agent center, the agent wraps the 1158  keying material (including the transaction authentication key) using a KWK shared with 1159  that recipient and sends it to the recipient, using the transaction authentication key to 1160  generate a MAC on the outgoing message. 1161  • For any intended recipient that is not a subscriber of that agent: 1162  - The agent attempts to determine a path through the multiple-center group to that 1163  recipient's agent for translation of the keying material. 1164  - If the agent is capable of generating keys, a group transaction authentication key is 1165  generated. 1166  - The keying material is wrapped (including the newly generated group transaction 1167  authentication key, if available) using a KWK shared with the next center in the path 1168  for transport in a translation request to that center. A MAC is generated on the 1169  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  37  outgoing message using the newly generated group transaction authentication key 1170  (if available) or using the transaction authentication key sent in the translation key 1171  if not; an indication of which key is used must be present (referred to as the 1172  \"appropriate authentication key\" below).  1173  3) If a center receives a translation request from another center within the multiple center group, 1174  and that center is not the agent for the intended recipient (i.e., the center is an intermediate 1175  center):  1176  • The receiving center unwraps the received keying material using the KWK shared with 1177  the previous center and checks the authenticity of the received message using the 1178  \"appropriate authentication key.\" 1179  • The center then attempts to determine a path to the intended recipient's agent and wraps 1180  the keying material (including the \"appropriate authentication key\") using a KWK shared 1181  with the next center in the path for transport to that center.  1182  • A MAC is generated on the outgoing message using the \"appropriate authentication 1183  key.\" 1184  4) If a center receives a translation request from another center within the multiple center 1185  group, and that center is the agent of the intended recipient: 1186  • The agent center unwraps the received keying material using the KWK shared with 1187  the previous center and uses the unwrapped \"appropriate authentication key\" to check 1188  the authenticity of the received message. 1189  • The agent center wraps the keying material to be translated (including the transaction 1190  authentication key, but not the group transaction authentication key, if present) and 1191  sends it to the intended recipient, using the transaction authentication key to generate 1192  a MAC on the outgoing message. 1193  5) Any subscriber receiving wrapped keying material unwraps it using the KWK shared with 1194  its agent and uses the unwrapped transaction authentication key to check the authenticity of 1195  the received message. 1196  4.2 Communicating Groups 1197  This section discusses the establishment of a communicating group and the subsequent distribution 1198  of additional keying material within that group. Also see Section 3.5.2. 1199  4.2.1 Establishing Communicating Groups 1200  Communicating groups of two or more entities share keys for communication among the group 1201  members. Prior to or during the establishment of a communicating group, each prospective 1202  member of the group shall have assurance of the validity of the group, the source and method of 1203  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  38  group establishment, the identity of the other group members and the rules for group operation 1204  (e.g., using contracts, security policies, memoranda of agreement). 1205  The Layer 1 keys that establish the keying relationship among the group members shall be 1206  established using one of the following methods: 1207  a) Manual distribution as discussed in Section 3.4.1, 1208  b) Use key centers or multiple-center groups: Each member of a prospective communicating 1209  group would become a subscriber of the same key center or of an agent center of the same 1210  multiple-center group (see Section 3.4 and Section 4.1). 1211  • One member of the intended group requests the generation of a key for distribution to 1212  the other intended members of the group from a KDC or multiple center group (see 1213  Sections  4.1.1 and 4.1.3),  1214  • A KDC or multiple-center group (of its own volition) generates a key and sends it to 1215  the intended group members (see Sections 4.1.1 and 4.1.3), 1216  • One member of the intended communicating group generates a key and sends it to a 1217  KTC for translation for the intended members of the group (see Section 4.1.2), or 1218  c) The key is established using asymmetric key-establishment methods. Each member of a 1219  prospective communicating group could obtain an asymmetric key-establishment key pair 1220  and the associated public key certificate. The entity generating the Layer 1 keys could then 1221  use the public key associated with each group member to distribute the Layer 1 keys to 1222  that member. 1223  4.2.2 Communicating Group Requirements  1224  1) A key used by any communicating group shall not intentionally be used by any other 1225  communicating group.  1226  2) When replacing a Layer 1 key (e.g., at the end of its cryptoperiod or because of a 1227  compromise), the key shall be replaced in the same manner as it was established. 1228  3) A key shared among a communicating group shall not be disclosed to a different 1229  communicating group. If a member of a communicating group is also a member of another 1230  group, that member shall not use or disclose that key to other members of the other group. 1231  For example, if entity A is a member of both group 1 and group 2, a key used in group 1 1232  shall not be either used or disclosed to other members of group 2 unless they are also 1233  members of group 1. 1234  4) A key shared among a communicating group shall be secured from third entity usage, 1235  except for an entity that was involved in the distribution of that key (e.g., a key center, see 1236  Section 4.1). 1237  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  39  5) A key that has been used by a communicating group or other cryptographic keying 1238  relationship and revoked shall not be intentionally re-used for any subsequent interaction 1239  (also see Section 5.5). 1240  4.2.3 Subsequent Key Distribution within a Communicating Group 1241  Once a communicating group is established (see Section 4.2.1), the members can operate as peers 1242  or in master/recipient relationships for subsequent key-distribution operations. A peer relationship 1243  exists when all members of the group are allowed to generate or otherwise obtain (e.g., using a 1244  KDC) keying material for distribution to the other members of the group. In a master/recipient 1245  relationship, one (or more) members of the group (i.e., masters) are allowed to generate keying 1246  material and distribute it to all other members of the group, while other members (i.e., recipients) 1247  are only allowed to receive keying material.  1248  Note that keys can only be distributed using automated methods if the group shares a KWK. 1249  When the group shares a KDK (e.g., examples A, C and F in Figure 1), some member (or pre-1250  established rule) needs to decide when to derive a new data key or KDK from the already-shared 1251  KDK. 1252  If a communicating group shares a KWK (e.g., examples A, B, C and E in Figure 1), and at least 1253  one member of the group has a key generation capability, then additional keys may be generated 1254  and distributed within the group without the assistance of key centers. The member entity that 1255  generates the key wraps the newly generated key under a KWK shared with the other members of 1256  the group (the recipients); the recipients unwrap the received key using the same shared KWK.  1257  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  40  5. Key-Establishment Communications 1258  This section addresses key-establishment communication requirements for communicating 1259  groups; communications between KDCs, KTCs and multiple-center groups and their subscribers; 1260  and communications among the member centers in a multiple-center group. 1261  5.1 General Communications Requirements 1262  Automated symmetric-key establishment is dependent on communications among components of 1263  the key-management infrastructure.  Communications in support of key establishment should be 1264  accomplished according to system-wide protocols.  The protocols shall establish the key-1265  establishment information content to be used for the automated establishment of keying material.  1266  Although this Recommendation does not specify key-management protocols, some general 1267  guidelines are offered regarding processing rules to be followed in key establishment. 1268  a) All key-establishment messages shall have integrity and source authentication protection 1269  using an approved message authentication algorithm (e.g., HMAC or KMAC) and a secret 1270  DAK shared between the sender and receiver. 1271  b) When a key-generation capability is available, a newly generated authentication key should 1272  be generated for an outgoing message containing keys if a KWK is available for wrapping 1273  the authentication key. 1274  c) Messages carrying keys shall include the key(s) used to authenticate the message, protected 1275  by a shared KWK or a KWK sent in the message. 1276  d) Before taking action on received key-establishment messages, the receiving entity shall: 1277  • Attempt to verify the authentication code in the received message (see Section 5.4). If an 1278  error is detected, an error message shall be sent to the message sender. 1279  • Check the authenticity/validity/authorizations/reasonableness of other information 1280  carried in the received message (e.g., using nonces or sender IDs). If an error is detected, 1281  an error message shall be sent to the message sender. 1282  • If another message is not to be immediately sent to the message sender in response to a 1283  request, an acknowledgement message shall be sent to the message sender. 1284  e) Messages sent in response to messages carrying keys should use the authentication key sent 1285  in the previous message for computing the authentication code on the responding message. 1286  However, if the authentication code in the received message could not be verified, another 1287  authentication key shared by the message sender and receiver shall be used for computing 1288  the message authentication code on the responding error message.  1289  f)  In order to facilitate secure key establishment, keys may need to be uniquely identified by 1290  key names or labels.  The assignment of a label to a key shall be made only by the entity 1291  or center that generates the key or requests the generation of a key with a specified label.  1292  Once a key is labeled, the label shall not be changed. 1293  Keys may be uniquely identified by: 1294  (1) The sharing entities, 1295  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  41  (2) A key identifier (i.e., key name), 1296  (3) The key type (e.g., KWK or DEK), 1297  (4) The key subtype (i.e., manually or electronically distributed KWK, authentication 1298  or encryption data key) and/or 1299  (5) The effective date of the key41. 1300  The sharing entities and key type of a key carried in a key-establishment message or used 1301  to wrap a key carried in a key-establishment message should be specified in that message. 1302  5.2  Notation 1303  In Section 5.3 and the examples in Appendix A, information sets to be included in protocol 1304  messages are formatted as follows: 1305  information_name(parameter_set_1; parameter_set 2 {; ...; parameter_set_n}), 1306  where each parameter set has one or more items separated by commas. 1307  Keys and variable information in a parameter set is italicized; other information is not.  1308  Keys are indicated by the type of key (e.g., KWK), subscripted by the identities of the sharing 1309  entities or the name of the key, e.g., KWKA, B or DAKname. 1310  Keys are wrapped as follows: 1311  wrapped_keys = WRAP(wrapping_key, concatenation_of_keys_to_be_wrapped). 1312  5.3 Message Content and Handling 1313  This section recommends information that should be included in key-establishment messages 1314  and provides guidance in handling them when received. The section identifies information that 1315  needs to be included in each type of message, but not the format to be employed or other 1316  information to be included in a specific protocol message.  1317  Key-establishment messages are used to: 1318  • Request the generation or translation of keying material, 1319  • Acknowledge the receipt of a request for key generation or translation services, 1320  • Provide keying material to other entities, 1321  • Acknowledge the receipt of keying material, 1322  • Request the revocation of keys, 1323  • Confirm that keys have been destroyed in response to a revocation request, and 1324  • Report errors in key-establishment messages, providing information that may allow error 1325  recovery.  1326  41 The effective date could be the begin date, the end date, or the cryptoperiod.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  42  Additional message types may be required by a particular key-management infrastructure. 1327  The following key-establishment information sets are recommended for incorporation into 1328  protocol messages. Specific protocols may combine the functionality of two or more sets of 1329  recommended information into a single protocol message when appropriate.  Similarly, a protocol 1330  may employ more than one protocol message to convey the information identified for each 1331  information set listed below. The specification of the actual messages to be used in a 1332  communication protocol should be carefully designed to fulfill the participant's policy 1333  requirements for secure communications. 1334  Examples for using these information types are provided in Appendix A.  1335  5.3.1 Key Generation Request  1336  A key generation request permits entities within a key-management infrastructure to request that 1337  keys be generated. The request may be sent: 1338  • By one member of a communicating group (entity B) to another member of that group 1339  (entity A), 1340  • From one entity (B) to another entity (A) to request the services of a KDC, KTC or 1341  multiple-center group (e.g., to establish a communicating group), 1342  • By a KDC subscriber (A) to a KDC or a multiple-center group, or  1343  • By a center within a multiple-center group (Center 1) to another center within the group 1344  (Center 2) who may or may not have a key-generation capability.  1345  The request may be transitive (e.g., from Subscriber B through Subscriber A to a KDC), and the 1346  request may be forwarded until it is received by an entity that is capable of servicing the request 1347  (e.g., from B to A to Center 1 to Center 2) or until it is determined that the service is not available. 1348  A key-generation request shall indicate the types of keying material to be generated 1349  (requested_keys) and the intended communicating group 42  for using those keys. The 1350  requested_keys information might include the key types (e.g., KWK and DAK), the algorithm 1351  (e.g., AES), the key length (e.g., 256 bits) and a label for each key, or other information, as 1352  appropriate.  1353  The request shall provide for the authentication of the requesting entity and for integrity protection 1354  of the message containing the key-generation request information using an authentication key 1355  (auth_key) to generate an authentication code (auth_code) on the message (see Section 5.4): 1356  key-generation_request(requested_keys; communicating_group; auth_code). 1357  See example scenarios in Appendices A.1, A.2, A.3 and A.5 for the use of key-generation request 1358  information. Appendix A.1 discusses the distribution of a key in a communicating group (i.e., the 1359  group members already share a KWK and DAK). Appendix A.2 discusses the distribution of keys 1360  using a KDC; Appendix A.3 discusses the establishment of a communicating group using a KDC; 1361  and Appendix A.5 discusses the establishment of a communicating group using a multiple-center 1362  group to generate and distribute keys to the communicating group. 1363  42 This could, for example, be a list of entity IDs or a number assigned to a communicating group.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  43  5.3.2 Key Transfers  1364  Keying material is transferred from one entity (i.e., the sender) to one or more other entities (i.e., 1365  the receiver(s)). The keying material is sent as key transfer information from a KDC, KTC or agent 1366  of a multiple-center group to one of its subscribers, or from one member of a communicating group 1367  to one or more other members of that group.  1368  Keying material transported in a message containing key transfer information shall be wrapped 1369  using a KWK shared between the sender and the intended receiver. Keying material to be 1370  transported in the key transfer information shall be cryptographically protected as follows: 1371  Let KWKS, R be a KWK shared between the key transfer information sender (S) and the key 1372  transfer information receiver (R). 1373  If one or more KWKs are included in the key transfer information:  1374  • At least one KWK shall be wrapped using KWKS, R.  1375  • Other KWKs shall be wrapped using either KWKS, R or another KWK included in the 1376  key transfer information, with an indication of the specific KWK that was used. 1377  If one or more KDKs or DKs (i.e., DEKs, DAKs, or AEKs) are included in the key transfer 1378  information:  1379  • If no KWKs are included in the key transfer information, then the KDK(s) and/or DKs 1380  shall be wrapped using KWKS, R 1381  • If KWKs are included in the key transfer information, the KDK(s) and/or DK(s) shall 1382  be wrapped using either KWKS, R or a KWK included in the key transfer information, 1383  with an indication of the specific KWK that was used. 1384  Key transfer information shall include the wrapped keying material (wrapped_keys), an indication 1385  of the communicating group members,  and provide integrity protection for the entire message and 1386  authentication of the entity sending the keying material using an authentication key (auth_key) that 1387  is included with the wrapped keys and used to generate an authentication code (auth_code) that is 1388  generated on the message (see Section 5.4):  1389  key_transfer(wrapped_keys; communicating_group; auth_code). 1390  Appendix A provides multiple examples of using key transfer information in various scenarios.  1391  5.3.3 Translation Requests 1392  A translation request transfers keying material from one entity to a second entity for translation 1393  of that keying material for delivery to a third entity. Use cases include the following: 1394  a) The first entity is a KTC subscriber, who generates keys and sends the translation request 1395  to a KTC (the second entity), who is being requested to translate the keying material for 1396  another KTC subscriber (the third entity). An example is provided in Appendix A.4. 1397  b) The first entity is a subscriber of a center that serves as an agent to a multiple-center group 1398  (the second entity). The group is being requested to translate the keying material for a third 1399  entity, who is presumed to be a subscriber of some center within the multiple-center group. 1400  An example is provided in Appendix A.6. 1401  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  44  c) The sender of the translation request is a center within a multiple-center group, and the 1402  receiver is another center within the group. The request may need to be forwarded until a 1403  center is found that can perform the requested translation for the ultimate recipient of the 1404  keying material (the third party, a subscriber of some center within the multiple-center 1405  group). Examples are provided in Appendices A.5 and A.6. 1406  In order to send translation request information, the sending entity shall share a KWK with the 1407  receiver of the  1408  translation request (e.g., a KTC or agent center within a multiple-center group). In order to fulfill 1409  the request, a KTC or another center within the multiple-center group shall share a KWK with the 1410  intended ultimate recipient of the keying material.  1411  A message containing translation request information shall include wrapped keying material 1412  (wrapped_keys) and indicate who requested the translation (requester) and the communicating 1413  group that will use the keying material. Integrity protection shall be provided using an 1414  authentication key (auth_key) generated for each message containing  translation request 1415  information for computing an authentication code (auth_code) on the message (see Section 5.4).  1416  translation_request(wrapped_keys; requester; communicating group; auth_code). 1417  5.3.4 Revocation Request  1418  Revocation request information is used to request the destruction of the operational and backup 1419  copies of keying material. Keys may be revoked by any entity authorized to do so (e.g., authorized 1420  in an organization's security policy; by agreement among communicating group; or in an 1421  agreement with a KDC, KTC or multiple-center group). The revocation request and corresponding 1422  revocation confirmation information (see Section 5.3.5) may be forwarded if required. 1423  The revocation request information shall identify the keying material to be destroyed (key_list) 1424  and provide for the authentication and authorization of the entity requesting the destruction 1425  (requester) and the integrity of the message using an authentication code (auth_code) that is 1426  generated using an authentication key (auth_key). The authentication key shall be newly generated 1427  for the message containing the revocation request information if the sender can generate keys, and 1428  the sender (S) and receiver (R) share a KWK (KWKS, R). Otherwise, the authentication key shall 1429  be a key already shared by the sender and receiver. 1430  In either case, the authentication key (auth_key) shall be used to compute an authentication code 1431  (auth_code) on the message (see Section 5.4):  1432  (1) If a newly generated authentication key is used, then: 1433  revocation_request(key_list; requester; wrapped_auth_key; auth_code), 1434  where wrapped_auth_key = WRAP(KWKS, R, auth_key). 1435  (2) If the sender cannot generate keys, or a KWK is not shared between the sender and 1436  receiver: 1437  revocation_request(key_list; requester; auth_key_ID; auth_code), 1438  where auth_key_ID is used to identify the key used to compute the authentication code 1439  (auth_code). 1440  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  45  Any keys shared between the sender and the receiver(s) may be revoked. If a key at a given layer 1441  is revoked, all keys below it in the key hierarchy shall be revoked. For example, if a keying 1442  relationship was established by a KWK, and the KWK was used later to wrap a KDK, then the 1443  revocation of that KDK also revokes all data keys and other KDKs derived from that KDK. 1444  Note that if all Layer 1 keys shared with the receiver(s) are revoked, the relationship among the 1445  sender and those receivers is terminated.  1446  Archived copies of a revoked key may be retained if stored in a secure archive facility. 1447  Examples of using revocation requests are provided in Appendix A.8. 1448  5.3.5 Revocation Confirmation  1449  A message containing revocation confirmation information provides notification that keys were 1450  destroyed as requested in previously received revocation request information. The revocation 1451  confirmation information shall indicate the message containing the revocation request information 1452  to which it is responding (revocation_request_id) and provide for the authentication of the entity 1453  sending the confirmation and a method of detecting the integrity of the message containing the 1454  revocation confirmation information using an authentication code (auth_code) computed using the 1455  authentication key used for the message containing the revocation request information.  An 1456  indication of the key(s) that were destroyed (list_of_revoked_keys) shall also be included if this 1457  can be accomplished without introducing security weaknesses: 1458  revocation_confirmation(revocation_request_id; list_of_revoked_keys; auth_code). 1459  Examples of using revocation confirmations in response to revocation requests are provided in 1460  Appendix A.8. 1461  5.3.6 Acknowledgements  1462  An acknowledgement is used to report the receipt of a message without communication errors or 1463  other reasons for not acting upon the received message. An acknowledgement is appropriate when: 1464  a) A message containing key-generation request information is received, but the request is 1465  forwarded to another entity (e.g., a KDC or multiple-center group); in this case, the 1466  recipient of the key-generation request information cannot generate the requested keying 1467  material. 1468  b) A message containing key transfer information has been received correctly; 1469  c) A message containing translation request information is received, but the request is 1470  forwarded to another entity. 1471  A message containing acknowledgement information shall indicate the communication being 1472  acknowledged (previous_message_id) and provide for the authentication of the entity sending the 1473  message and a method of detecting its integrity using a previously established authentication key 1474  (auth_key) to generate an authentication code (auth_code) (see Section 5.4): 1475  acknowledgement(previous_msg_id; auth_code). 1476  1. If the acknowledgement information is sent in response to a message containing key-1477  generation request information, the sender (of the acknowledgement information) 1478  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  46  presumably does not have a key-generation capability (otherwise, a newly generated key 1479  would be returned). In this case, an authentication key shall use a previously established 1480  key for the purpose. 1481  2. If the acknowledgement is sent in response to messages containing key transfer or 1482  translation request information, the authentication code shall be generated using the 1483  authentication key (auth_key) used for the message being acknowledged.  1484  Multiple examples of the use of messages containing acknowledgement information are provided 1485  in Appendix A. 1486  5.3.7 Error Reports 1487  An error message is used to report an error in the previously received key-establishment message. 1488  The error message is used to notify the sender of the previous message that the receiver could not 1489  act on the previous message information because of an error (e.g., the authentication code for the 1490  received message could not be verified, or the request cannot be fulfilled). 1491  The error report information in the message shall indicate the previous message that is in error, 1492  provide for the authentication of the entity sending the error message and a method of detecting 1493  its integrity using a previously established authentication key (auth_key) to compute an 1494  authentication code (auth_code) on the message (see Section 5.4). An indication of the specific 1495  error (error_type) shall also be provided if this can be accomplished without introducing 1496  weaknesses in the protocol: 1497  error_report(previous_message_id; error_type; auth_code). 1498  Multiple examples of the use of messages containing error report information are provided in 1499  Appendix A. 1500  5.4 Authentication Codes in Key-Establishment Messages 1501  As required in Section 5.1, an authentication code is required on all key-establishment messages. 1502  The authentication code is generated on the entire message (with the exception of the 1503  authentication code itself) using an approved authentication algorithm and the authentication key 1504  (auth_key). The authentication algorithm may be indicated in the key-establishment message, 1505  negotiated between the sender and receiver or determined by the communications protocol. 1506  The authentication key may have been previously established between the sender and receiver 1507  (e.g., manually or in a previous message) or may be carried in the message itself (e.g., in a message 1508  containing key transfer or translation request information). If carried in a message, the sender (of 1509  the outgoing message) shall wrap the authentication key using a KWK either contained in the 1510  message or already shared between the sender and receiver; a receiver must unwrap the key in 1511  order to verify the authentication code in the message. 1512  The authentication code shall be verified by a receiver before taking action on the key-1513  establishment information in any received message (see Section 5.1).  1514  • If the verification fails, a message containing error report information shall be sent to the 1515  message sender (see Section 5.3.7).  1516  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  47  • If the verification is successful and another message is not to be immediately sent to the 1517  message sender in response to a request, an acknowledgement shall be sent to the message 1518  sender (see Section 5.3.6).  1519  5.5 Revocation and Destruction 1520  General guidance regarding the destruction of cryptographic keys is provided in SP 800-57 Part 1 1521  and in SP 800-88. Except for archival purposes, when keys have been compromised, suspected of 1522  having been compromised, or revoked, they shall be physically or logically destroyed so that they 1523  cannot be recovered (e.g., by overwriting with another key or a constant value). 1524  For a keying relationship (e.g., between members of a communicating group or between a center 1525  and a subscriber), if a key is revoked, all keys that are lower in that key's hierarchy shall be 1526  revoked. For example, if a Layer 1 KWK shared by a communicating group is used to protect a 1527  KDK distributed within the group, a revocation of the KDK requires the destruction of that KDK 1528  and all data keys and other KDKs derived from that KDK; a revocation of the Layer 1 KWK 1529  requires the destruction of the KWK and all keys below it in the key hierarchy. If a Layer 1 key is 1530  revoked, and there is no other Layer 1 key to continue a keying relationship (e.g., for a 1531  communicating group), then the relationship shall be terminated. 1532  Cryptographic keys shall be destroyed in accordance with SP 800-88.  FIPS140 contains suggested 1533  methods for the destruction of keying materials within cryptographic modules. 1534  • The destruction of keys shall be accomplished under conditions of full accountability, with 1535  appropriate records retained for audit trail purposes.  Note that some keys (e.g., derived 1536  keys, and some other locally generated one-time or short-term keys) are not usually 1537  recorded and may be exempt from accounting rules.  See SP 800-57, Part 2, for accounting 1538  guidelines for cryptographic keys.  1539  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  48  Appendix A: Example Scenarios 1540  This appendix contains examples using the key-establishment information specified in Section 5 1541  in various scenarios.  1542  Note that error handling of received acknowledgements is often suggested, but is not included in 1543  detail. 1544  A.1 Communicating Group Key Transfer 1545  In this example, a communicating group was established between two entities as discussed in 1546  Section 4.2. As shown in Figure A.1, Entities A and B share a KWK to be used for key wrapping, 1547  and a DAK to be used for authentication when needed (i.e., KWKA,B and DAKA,B); these two keys 1548  are the Layer 1 keys shared by the group. In this example, Entity A can generate keys, but Entity 1549  B cannot. 1550  1551  Figure A.1: Key-Generation Request and Key Transfer in a Communicating Group 1552  1. If Entity B would like to exchange information with Entity A, then Entity B could, for example, 1553  send a key-generation request to Entity A asking for an AEK to be used with the AES-128 1554  block cipher: 1555  key-generation_request(AEK: AES-128; communicating group: Entity_A, Entity_B; 1556  auth_code1). 1557  where auth_code1 is generated using the shared DAK (DAKA,B). 1558  2. Entity A generates keys in response to requests from Entity B or of its own volition. 1559  (a) If Entity A receives a key-generation request: Entity A attempts to verify that the message 1560  containing the key-generation request (see step 1) was correctly received from a member 1561  of the communicating group (i.e., Entity B).  If the verification fails, then an error message 1562  is sent to Entity B containing error report information, and further interaction is 1563  terminated.  1564  error_report(previous_message_id; error_type; auth_code2), 1565  where previous_message_id is the ID for the key-generation_request (see step 1), the 1566  error_type is the type of error, and auth_code2 is generated using DAKA, B. 1567  Entity B could choose to resend the key-generation request (see step 1). 1568  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  49  (b) When Entity A generates a key for Entity B (either in response to a verified request from 1569  Entity B or of its own volition), a transaction authentication key is also generated 1570  (Transaction_DAKA,B) rather than using the already-shared authentication key (i.e., 1571  DAKA,B). Entity A wraps the key to be sent (K) and the transaction authentication key using 1572  the shared KWK (KWKA,B):  1573  wrapped_keys = WRAP(KWKA,B, K || Transaction_DAKA,B). 1574  (c) The wrapped_key is sent to Entity B in a message containing key transfer information: 1575  key_transfer(wrapped_keys; communicating_group: Entity_A, Entity_B; auth_code3), 1576  where auth_code3 is generated using Transaction_DAKA,B. 1577  3. When the key transfer information is received, Entity B sends either an acknowledgement or 1578  an error report.  1579  (a) Entity B unwraps the wrapped keys and uses Transaction_DAKA,B to attempt a verification 1580  of the message. If the verification fails, an error message is sent to Entity A containing 1581  error report information: 1582  error_report(previous_message_id; error_type; auth_code4), 1583  where previous_message_id is the ID for the message containing the key transfer 1584  information (see step 2c), the error_type is the type of error, and auth_code4 is generated 1585  using DAKA, B. Since the message had an error, Transaction_DAKA, B may not have been 1586  received correctly, so DAKA, B is used as the authentication key. 1587  Entity A may resend the key transfer information (see step 2c).  1588  (b) If the verification of the authentication code is successful, a message containing 1589  acknowledgment information is sent: 1590  acknowledgement(previous_msg_id; auth_code5), 1591  where previous_message_id is the ID for the message containing the key transfer 1592  information (see step 2c), and auth_code5 is generated using Transaction_DAKA, B. 1593  Note that for the sake of brevity, Entity A's receipt and handling of the acknowledgement 1594  information is not discussed in detail here. However, if the message containing the 1595  acknowledgement information cannot be verified, then Entity A could send an error 1596  message to Entity B, and Entity B could resend the acknowledgement information (see step 1597  3b). 1598  A.2  Using a KDC to Distribute Keys to an Already-Established Communicating 1599  Group 1600  Entities A and B are members of a communicating group; they share KWKA, B and  1601  DAKA, B as their Layer 1 keys. Neither entity can generate keying material. However, they are 1602  subscribers of the same KDC.  1603  Entity A shares KWKA, KDC and DAKA, KDC with the KDC; Entity B shares KWKB, KDC and DAKB, 1604  KDC with the KDC. Additional keying material can be generated by the KDC and distributed to A 1605  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  50  and B. Figure A.2a and Figure A.2b depict two alternatives, differing only in how the keys are 1606  distributed to A and B after generation by the KDC.  1607  1608  Figure A.2a: Using a KDC (Alternative 1) 1609  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  51  1610  Figure A.2b: Using a KDC (Alternative 2) 1611  1. Entity B may optionally send a key-generation request to Entity A asking for a KWK to be 1612  used with the AES-128 block cipher. 1613  key-generation_request(KWK: AES-128; communicating_group: Entity_A, Entity_B; 1614  auth_code1). 1615  where auth_code1 is generated using the shared DAK (DAKA,B). 1616  2. (a) If Entity A receives a key-generation request (see step 1): Entity A attempts to verify that 1617  the message containing the key-generation request was correctly received from a member 1618  of the communicating group (i.e., Entity B).  If the verification fails, then an error message 1619  is sent to Entity B containing error report information, and further interaction is 1620  terminated.  1621  error_report(previous_message_id; error_type; auth_code2), 1622  where previous_message_id is the ID for the message containing the key-1623  generation_request (see step 1), the error_type is the type of error, and auth_code2 is 1624  generated using DAKA, B. 1625  Entity B could choose to resend the key-generation request (see step 1). 1626  (b) If the verification of the authentication code is successful, a message containing 1627  acknowledgment information is sent to Entity B: 1628  acknowledgement(previous_msg_id; auth_code3), 1629  where previous_message_id is the ID for the message containing the key-generation 1630  request (see step 1) and auth_code3 is generated using DAKA, B. 1631  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  52  3. Entity A sends a key-generation request to the KDC asking for a KWK to be used with the 1632  AES-128 block cipher and shared with Entity B: 1633  key-generation_request(KWK: AES-128; communicating_group: Entity_A, Entity_B; 1634  auth_code4), 1635  where auth_code4 is generated on the message containing the key-generation request using the 1636  DAK shared with the KDC (DAKA, KDC). 1637  4. (a) The KDC attempts to verify auth_code4 using the DAK shared with Entity A (DAKA, KDC). 1638  If the verification fails or if Entity B is not a subscriber of the KDC, error report 1639  information is returned to Entity A in an error message, and the process is terminated.  1640  error_report(previous_message_id; error_type; auth_code5), 1641  where previous_message_id is the ID for the message containing the key-generation 1642  request (see step 3), error_type is the type of error, and auth_code5 is generated using 1643  DAKA, KDC. 1644  If the error was because of a verification failure, Entity A may choose to resend the key-1645  generation request (see step 3). If a key-generation request was received from Entity B 1646  (see step 1), Entity A may notify Entity B of the problem in an error message (not shown 1647  in the figures). 1648  (b) If the verification of the key-generation_request is successful, and Entity B is a subscriber 1649  of the KDC, the KDC generates the requested key (K) and an authentication key 1650  (Transaction_auth_key), and wraps one copy of the keys using the KWK shared with 1651  Entity A (KWKA, KDC) and another copy of the keys using the KWK shared with Entity B 1652  (KWKB, KDC).  1653  Entity_A_wrapped_keys = WRAP(KWKA, KDC, K || Transaction_auth_key) 1654  Entity_B_wrapped_keys = WRAP(KWKB, KDC, K || Transaction_auth_key). 1655  At this point in the process, go to Alternative 1 or Alternative 2. 1656  Alternative 1 (using Figure A.2a): Continuing at step 4 (c). 1657  (c) The two copies of the wrapped keys are sent to Entity A in a key transfer message: 1658  key_transfer(Entity_A_wrapped_keys, Entity_B_wrapped_keys; 1659  communicating_group: Entity_A, Entity_B; auth_code6), 1660  where auth_code6 is generated using Transaction_auth_key. 1661  5. (a) Upon receiving the key_transfer information, Entity A extracts its copy of the wrapped 1662  keys from the message (see step 4c), unwraps the keys using the KWK shared with the 1663  KDC (KWKA, KDC), and checks the message's authentication code (auth_code6) using the 1664  unwrapped transaction authentication key (Transaction_auth_key).  1665  (b) If the verification of the authentication code fails, then an error-report message is sent to 1666  the KDC containing error_report information:  1667  error_report(previous_message_id; error_type; auth_code7), 1668  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  53  where previous_message_id is the ID for the message containing the key_transfer 1669  information (see step 4c), the error_type is the type of error, and auth_code7 is generated 1670  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 1671  authentication key (Transaction_auth_key) in the message may not be correct, so DAKA, 1672  KDC is used as the authentication key.  1673  The KDC may choose to resend the key_transfer information (see step 4c). 1674  (c) If the verification of the authentication code is successful, a message containing 1675  acknowledgment information is sent to the KDC: 1676  acknowledgement(previous_msg_id; auth_code8), 1677  where previous_message_id is the ID for the message containing the key transfer 1678  information (see step 4c), and auth_code8 is generated using Transaction_auth_key. 1679  6. Entity A creates and sends a message to Entity B containing key transfer information that 1680  includes Entity B's copy of the wrapped keys: 1681  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; auth_code9), 1682  where auth_code9 is computed on the message using the transaction authentication key 1683  received from the KDC (Transaction_auth_key). 1684  7. Entity B sends either acknowledgement or error_report information to Entity A after receiving 1685  the message. 1686  (a) Entity B extracts the wrapped keys from the received key transfer information (see step 6), 1687  unwraps the keys using the KWK shared with the KDC (KWKB, KDC), and checks the 1688  message's authentication code (auth_code9) using the unwrapped authentication key 1689  (Transaction_auth_key).  1690  (b) If the verification of the authentication code fails, then an error message is sent to Entity A 1691  containing error report information.  1692  error_report(previous_message_id; error_type; auth_code10), 1693  where previous_message_id is the ID for the message containing the key transfer 1694  information (see step 6), the error_type is the type of error, and auth_code10 is computed 1695  on the message using DAKA, B. Since the received message had an error, 1696  Transaction_auth_key may have been received incorrectly, so DAKA, B is used as the 1697  authentication key. 1698  Entity A may resend the key transfer message (see step 6). 1699  (c) If the verification of the authentication code is successful, then a message containing 1700  acknowledgement information is sent to Entity A:  1701  acknowledgement(previous_msg_id; auth_code11), 1702  where previous_message_id is the ID for the message containing the key transfer 1703  information (see step 6), and auth_code11 is generated using Transaction_auth_key. 1704  Note that for the sake of brevity, Entity B's receipt and handling of the acknowledgement 1705  information is not discussed in detail here. However, if the message containing the 1706  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  54  acknowledgement information cannot be verified, then Entity B could send an error 1707  message to Entity A, and Entity A could resend the acknowledgement information (see step 1708  7c). 1709  At this point, both Entity A and Entity B know that they have successfully received the new KWK. 1710  Alternative 2 (using Figure A.2b): Continuing at step 4 (c). 1711  (c) The KDC sends a message containing key transfer information to Entity A with the 1712  appropriate copy of the wrapped keys: 1713  key_transfer(Entity_A_wrapped_keys; communicating_group: Entity_A, Entity_B; 1714  auth_code12),  1715  where auth_code12 is generated using Transaction_auth_key. 1716  5. (a) Entity A extracts the wrapped keys from the received message (see step 4c), unwraps the 1717  keys using the KWK shared with the KDC (KWKA, KDC), and checks the message's 1718  authentication code (auth_code12) using the unwrapped authentication key 1719  (Transaction_auth_key).  1720  (b) If the verification of the authentication code fails, then an error message containing error 1721  report information is sent to the KDC.  1722  error_report(previous_message_id; error_type; auth_code14), 1723  where previous_message_id is the ID for the message containing the key transfer 1724  information (see step 4c), the error_type is the type of error, and auth_code14 is generated 1725  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 1726  authentication key (Transaction_auth_key) in the message may not be correct, so DAKA, 1727  KDC is used as the authentication key.  1728  The KDC may resend the message containing the key transfer information (see step 4c). 1729  (c) If the verification of the authentication code is successful, then a message containing 1730  acknowledgement information is sent to the KDC.  1731  acknowledgement(previous_msg_id; auth_code15), 1732  where previous_message_id is the ID for the message containing the key transfer 1733  information (see step 4c), and auth_code15 is generated using Transaction_auth_key. 1734  6. If the KDC receives an acknowledgement from Entity A (indicating that Entity A has the 1735  keying material), the KDC sends a message containing key transfer information to Entity B 1736  with the appropriate copy of the wrapped keys: 1737  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; 1738  auth_code13), 1739  where auth_code13 is generated using Transaction_auth_key. 1740  7. (a) Entity B extracts the wrapped keys from the key transfer information in the received 1741  message (see step 4c), unwraps the keys using the KWK shared with the KDC (KWKB, 1742  KDC), and checks the message's authentication code (auth_code13) using the unwrapped 1743  authentication key (Transaction_auth_key).  1744  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  55  (b) If the verification of the authentication code fails, then an error message is sent to the KDC 1745  containing error report information.  1746  error_report(previous_message_id; error_type; auth_code16), 1747  where previous_message_id is the ID for the message containing the key transfer 1748  information (see step 4c), the error_type is the type of error, and auth_code16 is generated 1749  using DAKB, KDC. Note that since there was an error in the received message, the wrapped 1750  authentication key (Transaction_auth_key) in the key transfer information may not be 1751  correct, so DAKB, KDC is used as the authentication key.  1752  The KDC may resend the message (see step 4c). 1753  (c) If the verification of the authentication code is successful, then a message containing 1754  acknowledgement information is sent to the KDC.  1755  acknowledgement(previous_msg_id; auth_code17), 1756  where previous_message_id is the ID for the message containing the key transfer 1757  information (see step 4c), and auth_code17 is generated using Transaction_auth_key. 1758  Note that for the sake of brevity, the KDC's receipt and handling of the acknowledgement 1759  information is not discussed in detail here. However, if the message containing the 1760  acknowledgement information cannot be verified, then the KDC could send an error 1761  message to Entity B, and Entity B could resend the acknowledgement information (see step 1762  7c). 1763  8. At this point, the KDC and Entity B know that Entities A and B share the new keys (because 1764  of the protocol flow; see steps 5 and 6), but Entity A has has not been notified of this fact. 1765  The KDC sends an a message to Entity A containing acknowledgement information indicating 1766  that Entity B has successfully received the new keys: 1767  acknowledgement(previous_msg_id; auth_code18), 1768  where previous_message_id is the ID for the message containing the key generation request 1769  (see step 3), and auth_code18 is generated using Transaction_auth_key. 1770  Note that for the sake of brevity, Entity A's receipt and handling of the acknowledgement 1771  information is not discussed in detail here. However, if the message containing the 1772  acknowledgement information cannot be verified, then Entity A could send an error message 1773  to the KDC, and the KDC could resend the acknowledgement information (see step 7c). 1774  If the acknowledgement message is successfully verified, Entities A and B now know that they 1775  share the new keys. 1776  A.3 Using a KDC to Establish a Communicating Group 1777  Entities A and B do not share keys, but a decision has been made that they need to communicate 1778  securely. This can be done using the services of a KDC to form a communicating group. 1779  Both entities share keys with the same KDC. Entity A shares KWKA, KDC and DAKA, KDC with the 1780  KDC; Entity B shares KWKB, KDC and DAKB, KDC with the KDC (see Figure A.3). 1781  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  56  In this example, Entity A (the requesting subscriber) requests the KDC to generate keys to be 1782  shared with Entity B in order to form a communicating group. The KDC generates the requested 1783  keys and sends them to Entity B. After receiving an acknowledgement from Entity B that the keys 1784  have been received correctly, the KDC sends the keys to Entity A. When an acknowledgement of 1785  correct receipt has been received from Entity A, the communicating group is considered to be 1786  established. 1787  Variants of this scenario are possible but would require other message flows. For example, when 1788  the KDC begins the process by sending keys to a subset of subscribers without receiving a request, 1789  one or more additional messages may be required to provide assurance to the entities that they do 1790  indeed share keys and form a communicating group (e.g., messages from the KDC or between the 1791  entities). If communicating groups are larger than two entities, then additional messages will be 1792  required to distribute the keys to the additional entities and to provide mutual assurance that the 1793  group has been completely established. 1794  The steps following Figure A.3 discuss the case where one subscriber (Entity A) requests the KDC 1795  to generate keys for Entity B. 1796  1797  Figure A.3: Establishing a Communicating Group Using a KDC 1798  1. Entity A sends a key-generation request to the KDC asking for a KWK and DAK to share with 1799  Entity B: 1800  key-generation_request(KWK, DAK; communicating_group: Entity_A, Entity_B; 1801  auth_code1), 1802  where auth_code1 is generated on the message containing the key-generation request using the 1803  DAK shared with the KDC (DAKA, KDC). 1804  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  57  2. The KDC attempts to verify that the message containing the key-generation request was 1805  correctly received and that Entity B is a KDC subscriber. If the verification fails, then an error 1806  message is sent to Entity A containing error report information, and further interaction is 1807  terminated.  1808  error_report(previous_message_id; error_type; auth_code2), 1809  where previous_message_id is the ID for the message containing the key-generation_request 1810  (see step 1), the error_type is the type of error, and auth_code2 is generated using DAKA, KDC. 1811  Entity A could choose to resend the key-generation request (see step 1). 1812  3. (a) The KDC generates the requested keying material to be shared between Entities A and B 1813  (KWKA, B and DAKA, B) and a transaction authentication key (Transaction_auth_key).  In 1814  this example, KWKA, B is intended to be a Layer 1 key, with DAKA, B beneath it in the key 1815  hierarchy. This will allow a termination of the communicating group in the future by 1816  revoking just the Layer 1 key (see Section 5.5 and Appendix A.8, Example 1). Therefore, 1817  KWKA, B is wrapped using the KWK shared with the intended receiving entity (A or B), 1818  and DAKA, B is wrapped using KWKA, B. For efficiency reasons, the transaction 1819  authentication key is wrapped using the KWK shared with the intended receiving entity:  1820  Entity_A_wrapped_KWK_and auth_key = WRAP(KWKA, KDC, KWKA, B || 1821  Transaction_auth_key); 1822  Entity_B_wrapped_KWK_and auth_key = WRAP(KWKB, KDC, KWKA, B || 1823  Transaction_auth_key); 1824  wrapped_DAK = WRAP(KWKA, B, DAKA, B). 1825  (b) The KDC creates and sends a message containing key transfer information to Entity B (see 1826  step 3a): 1827  key_transfer(Entity_B_wrapped_KWK_and auth_key, wrapped_DAK; 1828  communicating_group: Entity_A, Entity_B; auth_code3), 1829  where auth_code3 are generated using Transaction_auth_key. 1830  4. (a) Entity B extracts and unwraps KWKA, B and Transaction_auth_key using the KWK shared 1831  with the KDC (KWKB, KDC), and checks the message's authentication code (auth_code3) 1832  using the unwrapped authentication key (Transaction_auth_key).  1833  (b) If the verification of the authentication code fails, or if Entity B does not wish to establish 1834  a communicating group with Entity A, then an error message is sent to the KDC containing 1835  error report information.  1836  error_report(previous_message_id; error_type; auth_code4), 1837  where previous_message_id is the ID for the message containing the key transfer 1838  information (see step 3b), the error_type is the type of error, and auth_code4 is generated 1839  using DAKB, KDC. Note that when there is an error in the received message, the wrapped 1840  authentication key (Transaction_auth_key) in the key transfer information may not be 1841  correct, so DAKB, KDC is used as the authentication key. Also, if Entity B does not want to 1842  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  58  establish a communicating group with Entity A, using the authentication key received in 1843  the key transfer information (Transaction_auth_key) may not be desirable.  1844  The KDC may resend the key transfer message (see step 3b). Alternatively, the KDC may 1845  send error report information to Entity A indicating that the keys could not be established 1846  with Entity B (not shown in the figure). 1847  (c) If the verification of the authentication code is successful, and Entity B wants to establish 1848  a communicating group with Entity A, then Entity B unwraps DAKA, B using KWKA, B. 1849  (d) Entity B sends a message to the KDC containing acknowledgement information:  1850  acknowledgement(previous_msg_id; auth_code5), 1851  where previous_message_id is the ID for the message containing the key transfer 1852  information (see step 3c), and auth_code5 is generated using Transaction_auth_key. 1853  5.  Upon receiving a message from Entity B containing the acknowledgement information and 1854  verifying its correct receipt (left as an exercise for the reader!), the KDC prepares and sends 1855  key transfer information to Entity A: 1856  key_transfer(Entity_A_wrapped_keys; communicating_group: Entity_A, Entity_B; 1857  auth_code6), 1858  where auth_code6 are generated using Transaction_auth_key. 1859  6. (a) Entity A extracts the wrapped keys from the received message (see step 5), unwraps the 1860  keys using the KWK shared with the KDC (KWKA, KDC), and checks the message's 1861  authentication code (auth_code6) using the unwrapped authentication key 1862  (Transaction_auth_key).  1863  (b) If the verification of the authentication code fails, then an error message containing  error 1864  report information is sent to the KDC.  1865  error_report(previous_message_id; error_type; auth_code7), 1866  where previous_message_id is the ID for the message containing the key transfer 1867  information (see step 5), the error_type is the type of error, and auth_code7 is generated 1868  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 1869  authentication key (Transaction_auth_key) in the message may not be correct, so DAKA, 1870  KDC is used as the authentication key.  1871  The KDC may resend the message containing the key transfer information (see step 5). 1872  (c) If the verification of the authentication code is successful, then a message containing 1873  acknowledgement information is sent to the KDC.  1874  acknowledgement(previous_msg_id; auth_code8), 1875  where previous_message_id is the ID for the message containing the key transfer 1876  information (see step 5), and auth_code8 is generated using Transaction_auth_key. 1877  At this point, Entities A and B share a KWK and DAK as members of the same communicating 1878  group. However, only Entity A knows for sure that the keys are shared (because of the order that 1879  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  59  the keys were distributed by the KDC in this example). Entity B could be notified of this fact in a 1880  couple of ways: 1881  • By Entity A or B sending a cryptographically protected message to the other party (e.g., 1882  protected using the newly established KWK and DAK); or 1883  • By the KDC sending acknowledgement information to Entity B indicating that the 1884  establishment of the communicating group has been completed.  1885  A.4 Using a KTC to Establish a Communicating Group  1886  Entities A and B do not share keys, but a decision has been made that they need to communicate 1887  securely. This can be done using the services of a KTC to form a communicating group. 1888  In this example, Entity A generates Layer 1 keys to be shared with Entity B and sends them to the 1889  KTC for translation. The KTC translates the keys and sends them to Entity B. After receiving an 1890  acknowledgement that the keys have been received correctly by Entity B, the KTC sends an 1891  acknowledgement of correct receipt to Entity A; the communicating group is then considered to 1892  be established. 1893  Variants of this scenario are possible but would require other message flows. For example, if 1894  communicating groups are larger than two entities, then additional messages will be required to 1895  distribute the keys to the additional entities and to provide mutual assurance that the group has 1896  been completely established. 1897  Figure A.4 shows the use of a KTC by two entities (A and B) that want to establish a 1898  communicating group. Both entities are subscribers of the same KTC; Entity A shares KWKA, KTC 1899  and DAKA, KTC with the KTC; Entity B shares KWKB, KTC and DAKB, KTC with the KTC. In this case, 1900  Entity A can generate keying material. For this example, the KTC does not generate keys. 1901  1902  Figure A.4: Using a KTC 1903  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  60  1.  (a) Entity A generates a KWK (KWKA, B) and an authentication key (DAKA, B) to be sent to 1904  Entity B, and another authentication key (Transaction_auth_key) to provide authentication 1905  for the translation request to be sent to the KTC. 1906  (b) Entity A wraps the generated keys using the KWK shared with the KTC (KWKA, KTC): 1907  wrapped_keys = WRAP(KWKA, KTC, KWKA, B || DAKA, B || Transaction_auth_key). 1908  Note that in this example, KWKA, B and DAKA, B are wrapped using the same key (i.e., 1909  KWKA, KTC). In this case, KWKA, B and DAKA, B are both Layer 1 keys.  1910  (c) Entity A prepares and sends a message containing translation request information to the 1911  KTC with the wrapped keys: 1912  translation_request(wrapped_keys; requester: Entity_A; sharing_entities: Entity_A, 1913  Entity_B; auth_code1), 1914  where auth_code1 is generated using the message's authentication key 1915  (Transaction_auth_key). 1916  2. The KTC unwraps the wrapped keying material in the translation request information and uses 1917  the unwrapped message authentication key (Transaction_auth_key) to verify the message. If 1918  the verification fails, an error report is sent to Entity A: 1919  error_report(previous_message_id; error_type; auth_code2), 1920  where previous_message_id is the ID for the message containing the translation request 1921  information (see step 1), the error_type is the type of error, and auth_code2 is generated using 1922  DAKA, KTC. Note that since there was an error in the message, the wrapped authentication key 1923  (Transaction_auth_key) in the translation request information may not be correct, so DAKA, 1924  KTC is used as the authentication key. 1925  Entity A may choose to resend the translation request information (not shown in the figure). 1926  3. (a) If the authentication code is successfully verified, the KTC wraps the received keys for 1927  Entity B using the KWK shared with B (KWKB, KTC): 1928  wrapped_keys = WRAP(KWKB, KTC, KWKA, B || DAKA, B || Transaction_auth_key). 1929  (b)  The KTC prepares and sends a message to Entity B containing the wrapped keys as key 1930  transfer information and generates auth_code3 on the message using the received 1931  authentication key (Transaction_auth_key): 1932  key_transfer(wrapped_keys; communicating_group: Entity_A, Entity_B; auth_code3). 1933  4. (a) Entity B unwraps the received keys and attempts to verify auth_code3 using the 1934  authentication key included in the message containing the key transfer information 1935  (Transaction_auth_key); see step 3b.  1936  (b) If the verification fails or if Entity B does not want to establish a communicating group 1937  with Entity A, a message containing error report information is returned to the KTC, and 1938  the process is terminated.  1939  error_report(previous_message_id; error_type; auth_code4), 1940  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  61  where previous_message_id is the ID for the message containing the key transfer 1941  information (see step 3b), error_type is the type of error, and auth_code4 is generated on 1942  the error message using DAKB, KTC. Note that when there is an error in the received 1943  message, the wrapped authentication key (Transaction_auth_key) in the key transfer 1944  information may not be correct, so DAKB, KTC is used as the authentication key. Also, if 1945  Entity B does not want to establish a communicating group with Entity A, using the 1946  authentication key received in the key transfer information (Transaction_auth_key) may 1947  not be desirable. 1948  The KTC may choose to resend the key transfer information (not shown in the figure). 1949  (c) If the verification is successful, and Entity B wants to establish a communicating with 1950  Entity A, Entity B sends a message containing acknowledgement information to the KTC: 1951  acknowledgement(previous_msg_id; auth_code5), 1952  where previous_message_id is the ID for the message containing the key-transfer 1953  information (see step 3b), and auth_code5 is generated on the message using 1954  Transaction_auth_key. 1955  5. If the message containing the acknowledgement information is received correctly from Entity 1956  B43, then the KTC prepares and sends a message containing acknowledgement information to 1957  Entity A indicating that the communicating group has been established successfully: 1958  acknowledgement(previous_msg_id; auth_code6), 1959  where previous_message_id is the ID for the message containing the translation request 1960  information (see step 1b), and auth_code6 is generated using Transaction_auth_key. 1961  Note that for the sake of brevity, Entity A's receipt and handling of the acknowledgement 1962  information is not discussed in detail here. However, if the message containing the 1963  acknowledgement information cannot be verified, then Entity A could send an error message 1964  to the KTC, and the KTC could resend the acknowledgement information above. 1965  Note: alternatively, a special-purpose confirmation message could be used to indicate 1966  successful communicating-group establishment. 1967  A.5 Using a Multiple-Center Group to Generate a Key for Establishing a 1968  Communicating Group 1969  A communicating group may be established using the services of a multiple-center group to 1970  generate the Layer 1 keys to be shared by the members of a communicating group. In this example 1971  (shown as Figure A.5), the multiple-center group consists of Center 1 and Center 2; these centers 1972  share a KWK and a DAK (e.g., KWK1, 2 and DAK1, 2). Center 1 is Entity A's agent to the group; 1973  they share KWKA, 1 and DAKA, 1. Center 2 is Entity B's agent to the group; they share KWKB, 2 and 1974  DAKB, 2. Entities A and B do not currently share keys.  1975  In this example, Center 1 generates keying material at Entity A's request and sends it to Center 2 1976  for translation for Entity B. Center 2 translates the keying material for Entity B and sends it to B. 1977  After receiving an acknowledgement that the keys have been received correctly by Entity B, Center 1978  43 The handling of errors in the received acknowledgement is left to the reader.  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  62  2 sends an acknowledgement of correct receipt to Center 1, who forwards the acknowledgement 1979  to Entity A; the communicating group is then considered to be established. 1980  1981  Figure A.5: Establishing a Communicating Group Using a Multiple-Center Group for Key 1982  Generation 1983  1. Entity A may optionally send a key-generation request to its agent asking for the generation of 1984  a KWK and DAK to be used with Entity B. 1985  key-generation_request(KWK, DAK; communicating_group: Entity_A, Entity_B; 1986  auth_code1). 1987  where auth_code1 is generated on the message containing the key_generation request 1988  information using DAKA, 1. 1989  2. Center 1 attempts to verify auth_code1 using the DAK shared with Entity A (i.e., DAKA, 1). If 1990  the verification fails, an error message containing error report information is returned to Entity 1991  A, and the process is terminated.  1992  error_report(previous_message_id; error_type; auth_code2), 1993  where previous_message_id is the ID for the message containing the key-generation request 1994  information (see step 1), the error_type is the type of error, and auth_code2 is generated 1995  using DAKA, 1. 1996  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  63  Entity A may choose to resend the key-generation request information (not shown in the 1997  figure). 1998  3. (a) If the verification of the message containing the key-generation request information is 1999  successful, but the other entity identified in the key-generation request (Entity B) is not a 2000  subscriber of Center 1, then Center 1 suspects that Entity B may be a subscriber of another 2001  center in the multiple-center group (i.e., Center 2 in this example).  2002  (b) Center 1 generates the requested keying material (KWKA, B and DAKA, B) and an 2003  authentication key (Transaction_auth_key). 2004  (c) Center 1 needs to send translation request information to Center 2, so another 2005  authentication key is generated (Group_Transaction_auth_key) and wrapped with the keys 2006  to be translated using the KWK shared with Center 2 (KWK1,2). 2007  Center_2_wrapped_keys = WRAP(KWK1, 2, KWKA, B || DAKA, B || Transaction_auth_key || 2008  Group_Transaction_auth_key). 2009  (d) Center 1 prepares and sends a message to Center 2 containing translation request 2010  information with the wrapped keys: 2011  translation_request(Center_2_wrapped_keys; requester: Center_1; communicating_group: 2012  Entity_A, Entity B; auth_code3), 2013  where auth_code3 is generated using Group_Transaction_auth_key. 2014  4. (a) Center 2 unwraps the keys in the translation request information using KWK1,2 to obtain 2015  the authentication key used for the message (Group_Transaction_auth_key). 2016  (b) Center 2 attempts to verify auth_code3 using the unwrapped authentication key 2017  (Group_Transaction_auth_key). If the verification fails, or Entity B is not a subscriber of 2018  Center 2, a message containing error report information is returned to Center 1, and the 2019  process is terminated.  2020  error_report(previous_message_id; error_type; auth_code4), 2021  where previous_message_id is the ID for the message containing the translation request 2022  information (see step 3d), the error_type is the type of error, and auth_code4 is generated 2023  using DAK1, 2. Note that since there was an error in the received message, the wrapped 2024  authentication key (Group_Transaction_auth_key) in the received message may not be 2025  correct, so DAK1, 2 is used as the authentication key. 2026  Center 1 may choose to resend the translation request information (not shown in the 2027  figure). 2028  Center 1 may notify Entity A of the problem in an error message (not shown in the figure). 2029  5. (a) If the verification was successful and Entity B is a subscriber of Center 2, Center 2 2030  translates the keying material by wrapping it in the KWK shared with Entity B (KWKB, 2): 2031  Entity_B wrapped_keys = WRAP(KWKB, 2, KWKA, B, DAKA, B || Transaction_auth_key). 2032  (b) Center 2 then prepares and sends a message containing the key transfer information to 2033  Entity B. 2034  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  64  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; 2035  auth_code5), 2036  where auth_code5 is generated using Transaction_auth_key. 2037  6. (a) Entity B unwraps the received keying material and attempts to verify auth_code5 using the 2038  transaction authentication key provided in the key transfer information 2039  (Transaction_auth_key). If the verification fails, or Entity B does not wish to establish a 2040  communicating group with Entity A, a message containing error report information is 2041  returned to Center 2:  2042  error_report(previous_message_id; error_type; auth_code6), 2043  where previous_message_id is the ID for the message containing the key transfer 2044  information (see step 5b), the error_type is the type of error, and auth_code6 is generated 2045  using DAKB, 2. Note that when there is an error in the received message, the wrapped 2046  authentication key (Transaction_auth_key) in the key transfer information may not be 2047  correct, so DAKB, 2 is used as the authentication key. Also, if Entity B does not want to 2048  establish a communicating group with Entity A, using the authentication key received in 2049  the key transfer information (Transaction_auth_key) may not be desirable. 2050  Center 2 may choose to resend the key transfer information if the previous message was in 2051  error (not shown in the figure). 2052  (b) If the verification is successful, and Entity B wishes to establish a communicating group 2053  with Entity A, Entity B sends a message containing acknowledgement information to 2054  Center 2: 2055  acknowledgement(previous_msg_id; auth_code7), 2056  where previous_message_id is the ID for the message containing the key-transfer 2057  information (see step 5b), and auth_code7 is generated using Transaction_auth_key. 2058  7. If the acknowledgement is received correctly from Entity B, then the Center 2 forwards the 2059  acknowledgement information to Center 1, indicating that the communicating group has been 2060  established successfully: 2061  acknowledgement(previous_msg_id; auth_code8), 2062  where previous_message_id is the ID for the message containing the translation request 2063  information (see step 3d), and auth_code8 is generated using Group_Transaction_auth_key. 2064  For the sake of brevity, Center 1's receipt and verification of the message received from Center 2065  2 containing the acknowledgement information is not discussed in detail here. However, if 2066  there is an error in the message, Center 1 could send a message to Center 2 containing error 2067  report information, and Center 2 could resend the acknowledgement information above. 2068  8. (a) Assuming that the message containing the acknowledgement information is received 2069  correctly from Center 2, Center 1 wraps the keys for Entity A using the KWK shared with 2070  Entity A (KWKA,1): 2071  Entity_A_wrapped_keys = WRAP(KWKA, 1, KWKA, B || DAKA, B || Transaction_auth_key). 2072  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  65  (b) Center 1 then prepares and sends a message containing the key transfer information to 2073  Entity A: 2074  key_transfer(Entity_A_wrapped_keys; communicating_group: Entity_A, Entity_B; 2075  auth_code9), 2076  where auth_code9 is generated using Transaction_auth_key. 2077  9. (a) Entity A attempts to verify auth_code9 using the transaction authentication key provided 2078  in the key transfer information (Transaction_auth_key). If the verification fails, a message 2079  containing error report information is returned to Center 1:  2080  error_report(previous_message_id; error_type; auth_code10), 2081  where previous_message_id is the ID for the message containing the key transfer 2082  information (see step 8b), the error_type is the type of error, and auth_code6 is generated 2083  using DAKA, 1. Note that when there is an error in the received message, the wrapped 2084  authentication key (Transaction_auth_key) in the key transfer information may not be 2085  correct, so DAKA, 1 is used as the authentication key.  2086  Center 1 may choose to resend the key transfer information if the previous message was in 2087  error (not shown in the figure). 2088  (b) If the message containing the key transfer information is received correctly from Center 1, 2089  then the Entity A sends the acknowledgement information to Center 1 indicating that the 2090  key transfer information was received correctly: 2091  acknowledgement(previous_msg_id; auth_code11), 2092  where previous_message_id is the ID for the message containing the key transfer 2093  information (see step 8b), and auth_code11 is generated using Transactiun_auth_key. 2094  Note that for the sake of brevity, Center 1's receipt and handling of the acknowledgement 2095  information is not discussed in detail here. However, if the message containing the 2096  acknowledgement information cannot be verified, then Center 1 could send an error 2097  message to Entity A, and Entity A could resend the acknowledgement information above. 2098  At this point, Entities A and B share a KWK and DAK as members of the same communicating 2099  group. However, only Entity A knows for sure that the keys are shared (because of the order that 2100  the keys were distributed by the multiple-center group in this example). Entity B could be notified 2101  of this fact by Entity A or B sending a cryptographically protected message to the other party (e.g., 2102  protected using the newly established KWK and DAK). Alternatively, a special purpose-2103  confirmation message could be used to indicate successful establishment of the communicating 2104  group. 2105  A.6 Using a Multiple-Center Group to Establish a Communicating Group Only 2106  Using its Key-Translation Services 2107  Figure A.6 depicts an example of information flow for establishing a communicating group using 2108  the key-translation services of a multiple-center group. In this example, Center 1 and Center 2 are 2109  members of the same multiple-center group and share a KWK 2110  (KWK1, 2) and an authentication key (DAK1, 2). Entity A's agent to the group is Center 1; they share 2111  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  66  KWKA, 1 and DAKA, 1. Entity B's agent to the group is Center 2; they share KWKB, 2 and DAKB, 2. 2112  Entity A and Center 1 can generate keys, but Center 2 cannot. Entities A and B wish to establish 2113  a communicating group. 2114  Note that this example is very similar to the example in Appendix A.5; the main difference is that 2115  Entity A can generate keys. 2116  In this example, Entity A generates keying material and sends it to its agent for translation for 2117  Entity B. Center 1 forwards the keying material to Center 2 for translation and providing the 2118  translated keying material to Entity B. After receiving an acknowledgement from Entity B that the 2119  keys have been received correctly, Center 2 sends an acknowledgement of correct receipt to Center 2120  1, who forwards the acknowledgement to Entity A; the communicating group is then considered 2121  to be established. 2122  2123  Figure A.6: Using the Translation Services of a Multiple-Center Group to Establish a 2124  Communicating Group 2125  1. (a) Entity A generates a KWK, a DAK and a transaction authentication key 2126  (Transaction_auth_key) to be sent to Entity B. 2127  (b) Entity A wraps the keys in the KWK shared with its agent (KWKA, 1): 2128  wrapped_keys = WRAP(KWKA, 1, KWKA, B || DAKA, B || Transaction_auth_key). 2129  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  67  (c) Entity A prepares and sends a message containing translation request information to Center 2130  1 that includes the wrapped keys: 2131  translation_request(wrapped_keys; requester: Entity_A; communicating_group: 2132  Entity_A, Entity B; auth_code1), 2133  where auth_code1 is generated using the generated authentication key 2134  (Transaction_auth_key). 2135  2. (a) Center 1 unwraps the wrapped keying material in the translation request information and 2136  uses the unwrapped transaction authentication key (Transaction_auth_key) to verify the 2137  message containing the translation request information.  2138  (b) If the verification fails, a message is sent to Entity A containing the error report 2139  information: 2140  error_report(previous_message_id; error_type; auth_code2), 2141  where previous_message_id is the ID for the message containing the translation request 2142  information (see step 1c), the error_type is the type of error, and auth_code2 is computed 2143  using DAKA, 1. Note that since there was an error in the received message, the wrapped 2144  authentication key (Transaction_auth_key) in the translation request information may not 2145  be correct, so DAKA, 1 is used as the authentication key. 2146  Entity A may choose to resend the translation request information (not shown in the 2147  figure). 2148  3. If the verification of the message containing the key-generation request is successful, but the 2149  other entity identified in the key-generation request information (Entity B) is not a subscriber 2150  of Center 1, then Center 1 suspects that Entity B may be a subscriber of another center in the 2151  multiple-center group (i.e., Center 2 in this example).  2152  (a) Center 1 needs to send translation request information to Center 2, so generates an 2153  authentication key (Group_Transaction_auth_key) and wraps it with the keys to be 2154  translated using the KWK shared with Center 2 (KWK1,2). 2155  Center_2_wrapped_keys = WRAP(KWK1,2, KWKA, B || DAKA, B || Transaction_auth_key || 2156  Group_Transaction_auth_key). 2157  (b) Center 1 prepares and sends a message containing translation request information to 2158  Center 2 that includes the wrapped keys: 2159  translation_request(Center_2_wrapped_keys; requester: Center_1; communicating_group: 2160  Entity_A, Entity B; auth_code3), 2161  where auth_code3 is generated using Group_Transaction_auth_key. 2162  4.  (a) Center 2 unwraps the translation request information to obtain the authentication key 2163  (Group_Transaction_auth_key). 2164  (b) Center 2 attempts to verify auth_code3 using the unwrapped authentication key 2165  (Group_Transaction_auth_key). If the verification fails, or if Entity B is not a subscriber 2166  of Center 2, a message containing error report information is returned to Center 1, and the 2167  process is terminated.  2168  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  68  error_report(previous_message_id; error_type; auth_code4), 2169  where previous_message_id is the ID for the message containing the translation request 2170  information (see step 3b), the error_type is the type of error, and auth_code4 is computed 2171  on the message using DAK1, 2. Note that since there was an error in the received message, 2172  the wrapped authentication key (Group_Transaction_auth_key) in the translation request 2173  information may not be correct, so DAK1, 2 is used as the authentication key for the message 2174  containing the error report information. 2175  Center 1 may choose to resend the translation request information or to notify Entity A of 2176  the problem in an error message (not shown in the figure). 2177  5. (a) If the verification is successful, and Entity is a subscriber of Center 2, Center 2 translates 2178  the keys (KWKA, B || DAKA, B || Transaction_auth_key) by wrapping them in the KWK 2179  shared with Entity B (KWKB, 2): 2180  Entity_B wrapped_keys = WRAP(KWKB, 2, KWKA, B || DAKA, B || Transaction_auth_key). 2181  (b) Center 2 then prepares and sends a message containing the key transfer information to 2182  Entity B. 2183  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_A, Entity_B; 2184  auth_code5), 2185  where auth_code5 is generated on the message using Transaction_auth_key. 2186  6. (a) Entity B unwraps the key transfer information and attempts to verify auth_code5 using the 2187  unwrapped authentication key (Transaction_auth_key).  2188  (b) If the verification fails, or Entity B does not want to establish a communicating group with 2189  Entity A, a message is sent to Center 2 containing error report inoformation.  2190  error_report(previous_message_id; error_type; auth_code6), 2191  where previous_message_id is the ID for the message containing the key transfer 2192  information (see step 5b), the error_type is the type of error, and auth_code6 is computed 2193  using DAKB,2. Note that since there was an error in the received message, the wrapped 2194  authentication key (Transaction_auth_key) in the key transfer information may not be 2195  correct, so DAKB, 2 is used as the authentication key for the message containing the error 2196  report information. 2197  Center 2 may choose to resend the key transfer information (not shown in the figure) (see 2198  step 5b).  2199  Alternatively, Center 2 could send a message containing error report information to Center 2200  1 indicating that the keys could not be established between Entities A and B, authenticating 2201  the message using DAK1, 2; Center 1 could then forward the information to Entity A, 2202  authenticating the message using DAKA,1. The transaction would then be considered as 2203  terminated. These messages are not shown in the figure.  2204  (c) If the verification is successful, and Entity B wants to establish a communicating group 2205  with Entity A, Entity B sends a message containing acknowledgement information to 2206  Center 2: 2207  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  69  acknowledgement(previous_msg_id; auth_code7), 2208  where previous_message_id is the ID for the message containing the key transfer 2209  information, and auth_code7 is generated using Transaction_auth_key. 2210  7. If a message containing acknowledgement information is received correctly from Entity B, 2211  then Center 2 sends a message containing acknowledgement information to Center 1, indicating 2212  that the communicating group has been established successfully: 2213  acknowledgement(previous_msg_id; auth_code8), 2214  where previous_message_id is the ID for the message containing the translation request 2215  information (see step 3b), and auth_code8 is generated using Group_Transaction_auth_key. 2216  8. If a message containing acknowledgement information is received correctly from Center 2, 2217  then Center 1 sends a message containing acknowledgement information to Entity A indicating 2218  that the communicating group has been established successfully: 2219  acknowledgement(previous_msg_id; auth_code9), 2220  where previous_message_id is the ID for the message containing the key-generation request 2221  information (see step 1c), and auth_code9 is generated using Transaction_auth_key. 2222  At this point, Entities A and B share a KWK and DAK as members of the same communicating 2223  group. However, only Entity A knows for sure that the keys are shared. Entity B could be notified 2224  of this fact by Entity A or B sending a cryptographically protected message to the other party (e.g., 2225  protected using the newly established KWK and DAK). Alternatively, a special-purpose 2226  confirmation message could be used to indicate successful establishment of the communicating 2227  group. 2228  A.7 Forwarding Keys Through an Intermediate Entity 2229  Keying material can be forwarded to the ultimate recipient(s) through intermediate entities (see 2230  Figure A.7 for an example). In this example, a KDC shares a KWK and DAK with Entity A, and 2231  Entity A shares KWKs and DAKs as the Layer 1 keys with Entities B and C, i.e.,  2232  • The KDC shares KWKA, KDC and DAKA, KDC with Entity A; 2233  • Entity A shares KWKA, B and DAKA, B with Entity B; and 2234  • Entity A shares KWKA, C and DAKA, C with Entity C. 2235  In this example, the KDC generates keying material (e.g., an AEK) to be shared by Entities B and 2236  C and distributes it via one of its subscribers (Entity A). Entities B and C become a communicating 2237  group, but since they do not share a KWK, they cannot generate further keys without the assistance 2238  of the KDC. Although Entity A is privy to the keys (since it assisted in their distribution), Entity 2239  A is not intended to be part of that communicating group for this example.  2240  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  70  2241  Figure A.7: key transfer through an Intermediate Entity  2242  1. (a) The KDC generates an AEK and authentication keys (Transaction_auth_key1 and 2243  Transaction_auth_key2) to be used for message authentication and wraps them for Entity 2244  A. 2245  wrapped_keys = WRAP(KWKA, KDC, AEKB,C || Transaction_auth_key1 || Transaction_auth_key2). 2246  (b) The KDC prepares and sends a message containing key transfer information to Entity A: 2247  key_transfer(wrapped_keys; communicating_group: Entity B, Entity C; auth_code1), 2248  where auth_code1 is computed on the message containing the key transfer information 2249  using Transaction_auth_key2.  2250  2. Entity A unwraps the key transfer information using the KWK shared with the KDC (KWKA, 2251  KDC) and attempts to verify the received message using Transaction_auth_key2. 2252  (a) If the verification fails, an error message is sent to the KDC containing error report 2253  information: 2254  error_report(previous_message_id; error_type; auth_code2), 2255  where previous_message_id is the ID for the message containing the key transfer information 2256  (see step 1b), the error_type is the type of error, and auth_code2 is generated using DAKA, KDC. 2257  Note that since there was an error in the received message, the wrapped authentication key 2258  (Transaction_auth_key2) in the message may not be correct, so DAKA, KDC is used as the 2259  authentication key. 2260  The KDC may choose to resend the key transfer information (not shown in the figure). 2261  Steps 3 and 5 (these steps are combined to avoid repetitious descriptions):  2262  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  71  (a) If the verification is successful, the wrapped keys destined for Entities B and C are 2263  extracted and wrapped for each intended recipient: 2264  Entity_B_wrapped_keys = WRAP(KWKA, B, AEKB,C || Transaction_auth_key1). 2265  Entity_C_wrapped_keys = WRAP(KWKA, C, AEKB,C || Transaction_auth_key1). 2266  (b) The appropriate wrapped keys are placed in key transfer messages for each recipient, and 2267  an authentication code is computed for each message (auth_code3 and auth_code4) using 2268  the appropriate transaction authentication key (Transaction_auth_key1): 2269  key_transfer(Entity_B_wrapped_keys; communicating_group: Entity_B, Entity_C; 2270  auth_code3) is sent to Entity B. 2271  key_transfer(Entity_C_wrapped_keys; communicating_group: Entity_B, Entity_C; 2272  auth_code4) is sent to Entity B. 2273  Steps 4 and 6:  2274  (a) Entities B and C unwrap the keys received in the key transfer information of their 2275  respective messages and attempt to verify the authentication codes (auth_code3 and 2276  auth_code4, respectively) using Transaction_auth_key1.  2277  (b) If the verification fails, or the receiving entity does not want to be a member of the 2278  communicating group, a message is sent to Entity A containing error report information: 2279  Entity B would send error_report(previous_message_id; error_type; auth_code5) 2280  Entity C would send error_report(previous_message_id; error_type; auth_code6) 2281  where previous_message_id is the ID for the message containing the key transfer 2282  information (see step 3/5 b), and the error_type is the type of error. Entity B would 2283  generate auth_code5 using DAKA, B; Entity C would generate auth_code6 using DAKA, C. 2284  Note that since there was an error in the received message, the wrapped authentication 2285  key (Transaction_auth_key1) in the key transfer information may not be correct, so DAKA, 2286  B and DAKA, C would be used as the authentication keys. 2287  Entity A may choose to resend the key transfer information (not shown in the figure). 2288  (c) If the verification is successful, and both entities want to establish a communicating 2289  group with each other, a message containing acknowledgement information is sent to 2290  Entity A: 2291  Entity B would send acknowledgement(previous_msg_id; auth_code7) 2292  Entity C would send acknowledgement(previous_msg_id; auth_code8), 2293  where previous_message_id is the ID for the message containing the key transfer 2294  information (see step 3/5 b), and auth_code7 and auth_code8 are generated using 2295  Transaction_auth_key1. 2296  7. If the message containing the acknowledgement information is received correctly from both 2297  Entities B and C, then Entity A sends a message to the KDC containing acknowledgement 2298  information indicating that the communicating group has been established successfully: 2299  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  72  acknowledgement(previous_msg_id; auth_code9), 2300  where previous_message_id is the ID for the message containing the key-transfer information 2301  (see step 1b), and auth_code9 is generated using Transaction_auth_key2. 2302  At this point, Entities B and C share an AEK as members of the same communicating group. 2303  However, only Entity A and the KDC know for sure that the keys are shared. Enitites B and C 2304  could be notified of this fact in a couple of ways: 2305  • By Entity B or C sending a cryptographically protected message to the other party (e.g., 2306  protected using the newly established AEK); or 2307  • By Entity A sending acknowledgement information to Entities B and C indicating that the 2308  establishment of the communicating group has been completed (not shown in the figure). 2309  A.8 Requesting Key Revocation and Confirmation 2310  A.8.1 Example 1 2311  Figure A.8a is an example of using a revocation request and corresponding revocation 2312  confirmation. In this example, a KDC sends a revocation request to the members of a 2313  communicating group (Entities A and B) to terminate the group by revoking the Level 1 key in 2314  their key hierarchy (KWKA, B); presumably, the KDC was a participant in establishing that key. 2315  Entity A shares KWKA, KDC and DAKA, KDC with the KDC; Entity B shares KWKB, KDC and DAKB, 2316  KDC with the KDC. 2317  The keys shared by Entities A and B consist of a Layer 1 key (KWKA,B) and a layer 2 DAKA, B, 2318  which were established previously using the KDC (see Appendix A.3), and several lower-layer 2319  keys established within the communicating group (i.e., Entities A and B) using KWKA, B after the 2320  group was established (see Appendix A.1 for the process): 2321  • KWKA, B was used to wrap KWKLayer_2 and DAKLayer_2. 2322  • KWKLayer_2 was used to wrap KDKLayer_3, and 2323  • KDKLayer_3 was used to derive DEKLayer_4 and DAKLayer_4.  2324  In this example, the revocation request is sent directly to each entity by the KDC so that each will 2325  acknowledge that they have fulfilled the request. Note that in this example, both revocation 2326  requests are sent before expecting the return of the corresponding revocation confirmation or error 2327  report information. This is a design decision for this example (not a requirement) to allow each 2328  entity to find and destroy all copies of keys affected by the revocation request information (i.e., 2329  all keys lower in the key hierarchy). 2330  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  73  2331  Figure A.8a:  KDC Revocation of a Communicating Group 2332  1. (a) The KDC generates an authentication key (Transaction_auth_keyA) for the message 2333  containing the revocation request information to be sent to Entity A and wraps it using the 2334  KWK shared with Entity A (KWKA, KDC):  2335  wrapped_auth_key_A = WRAP(KWKA, KDC, Transaction_auth_keyA). 2336  (b) The KDC prepares and sends a message to Entity A containing revocation request 2337  information that requests that Entity A revoke the Level 1 KWK (KWKA, B) shared with 2338  Entity B and all keys beneath it in the key hierarchy: 2339  revocation_request(ID of KWKA, B; wrapped_auth_key_A; auth_code1), 2340  where auth_code1 is generated on the message using Transaction_auth_keyA. 2341  2. (a) Likewise, the KDC generates an authentication key (Transaction_auth_keyB) for the 2342  message containing the revocation request information to be sent to Entity B and wraps it 2343  using the KWK shared with Entity B (KWKB, KDC):  2344  wrapped_auth_key_B = WRAP(KWKB, KDC, Transaction_auth_keyB). 2345  (b) The KDC prepares and sends a message to Entity B containing the revocation request 2346  information that requests that Entity B revoke the Level 1 KWK (KWKA, B)  shared with 2347  Entity A: 2348  revocation_request(ID_of_KWKA, B; wrapped_auth_key_B; auth_code2), 2349  where auth_code2 is generated on the message using Transaction_auth_keyB. 2350  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  74  3. (a) Entity A unwraps the authentication key and attempts to verify the received message. If 2351  the verification fails, a message containing error report information is sent to the KDC and 2352  the process is terminated: 2353  error_report(previous_message_id; error_type; auth_code3), 2354  where previous_message_id is the ID for the message containing the revocation request 2355  information (see step 1b), the error_type is the type of error, and auth_code3 is computed 2356  using DAKA, KDC. Note that since there was an error in the received message, the wrapped 2357  authentication key (Transaction_auth_keyA) in the message may not be correct, so DAKA, 2358  KDC is used as the authentication key. 2359  The KDC would most likely resend the message, in this case. 2360  (b) If the verification is successful, Entity A destroys all copies of KWKA, B and any keys lower 2361  in the key hierarchy (i.e., KWKLayer_2, DAKLayer_2, KDKLayer_3, DEKLayer_4 and DAKLayer_4). 2362  (c) Entity A prepares and sends a message containing revocation confirmation information to 2363  the KDC: 2364  revocation_confirmation(ID_of_KWKA, B; auth_code4), 2365  where auth_code4 is computed on the message using Transaction_auth_keyA. 2366  4. The KDC attempts to verify auth_code4 using the authentication key used for the message 2367  containing the revocation request information (see step 1b) (i.e., Transaction_auth_keyA).  2368  (a) If the verification fails, a message containing error report information is returned to Entity 2369  A, and the process is terminated.  2370  error_report(previous_message_id; error_type; auth_code5), 2371  where previous_message_id is the ID for the message containing the revocation 2372  confirmation information (see step 3c), the error_type is the type of error, and auth_code5 2373  is computed on the message using Transaction_auth_keyA. Since the revocation request 2374  was received correctly, Transaction_auth_keyA can be used. 2375  Entity A may choose to resend the message (not shown in the figure). 2376  (b) If the verification is successful, the KDC sends a message containing acknowledgement 2377  information to Entity A: 2378  acknowledgement(previous_msg_id; auth_code6), 2379  where previous_message_id is the ID for the message containing the revocation 2380  confirmation information (see step 3c), and auth_code6 is generated on the message using 2381  Transaction_auth_keyA. 2382  5. (a) Entity B unwraps the authentication key and attempts to verify the received message. If the 2383  verification fails, a message containing error report information is sent to the KDC and 2384  the process is terminated: 2385  error_report(previous_message_id; error_type; auth_code7), 2386  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  75  where previous_message_id is the ID for the message containing the revocation request 2387  information (see step 2b), the error_type is the type of error, and auth_code7 is computed 2388  on the message using DAKB, KDC. Note that since there was an error in the received message, 2389  the wrapped authentication key (Transaction_auth_keyB) in the message may not be 2390  correct, so DAKB, KDC is used as the authentication key. 2391  The KDC would most likely resend the message, in this case. 2392  (b) If the verification is successful, Entity B destroys all copies of KWKA, B and any keys lower 2393  in the key hierarchy (i.e., KWKLayer_2, DAKLayer_2, KDKLayer_3, DEKLayer_4 and DAKLayer_4). 2394  (c) Entity B prepares and sends a message containing revocation confirmation information to 2395  the KDC: 2396  revocation_confirmation(ID_of_KWKA, B; auth_code8), 2397  where auth_code8 is computed on the message using Transaction_auth_keyB. 2398  6. The KDC attempts to verify auth_code8 using the authentication key used for the message 2399  containing the revocation request information (see step 2b) (i.e., Transaction_auth_keyB).  2400  (a) If the verification fails, a message containing the error report information is returned to 2401  Entity B, and the process is terminated.  2402  error_report(previous_message_id; error_type; auth_code9), 2403  where previous_message_id is the ID for the message containing the revocation 2404  confirmation information (see step 5c), the error_type is the type of error, and auth_code9 2405  is computed on the message using Transaction_auth_keyB. Since the revocation request 2406  was received correctly, Transaction_auth_keyB can be used. 2407  Entity B may choose to resend the message (not shown in the figure). 2408  (b) If the verification is successful, the KDC sends a message containing acknowledgement 2409  information to Entity B: 2410  acknowledgement(previous_msg_id; auth_code10), 2411  where previous_message_id is the ID for the message containing the revocation 2412  confirmation information (see step 5c), and auth_code10 is generated on the message using 2413  Transaction_auth_keyB. 2414  A.8.2 Example 2 2415  In this example, a communicating group consists of Entities A and B, with shared keys shown in 2416  Figure A.8b. Entity A wishes to revoke the KDK and all keys below it in the key hierarchy (e.g., 2417  because the KDK has been compromised or has been used too many times to derive keys).  2418  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  76  2419  Figure A.8b: Revocation of Lower-level Keys 2420  1. (a) If Entity A has a key-generation capability: 2421  • Entity A generates an authentication key (Transaction_auth_key) for the message 2422  containing the revocation request information to be sent to Entity B and wraps it using 2423  the KWK shared with Entity B (KWKA, B):  2424  wrapped_auth_key  = WRAP(KWKA, B, Transaction_auth_key). 2425  • Entity A prepares and sends a message to Entity B containing revocation request 2426  information that requests that Entity B revoke the KDK shared with Entity A and all 2427  keys beneath it in the key hierarchy: 2428  revocation_request(ID_of_KDKLayer_3; wrapped_auth_key; auth_code1), 2429  where auth_code1 is generated on the message using Transaction_auth_key. 2430  (b) If Entity A does not have a key-generation capability: 2431  • Entity A will use DAKA, B as the authentication key for the message containing the 2432  revocation request information. Let \"DAKAB\" be the name of that key. 2433  • Entity A prepares and sends a message to Entity B containing revocation request 2434  information that requests that Entity B revoke the KDK shared with Entity A and all 2435  keys beneath it in the key hierarchy: 2436  revocation_request(ID_of_KDKLayer_3; DAKAB ; auth_code2), 2437  where auth_code2 is generated on the message using DAKA, B. 2438  2. (a) If a wrapped key is included in the revocation request information: Entity B unwraps the 2439  authentication key using KWKA, B, obtaining Transaction_auth_key. 2440  (b) If the ID of an authentication key is included in the revocation request information, that 2441  key is used as the authentication key (i.e., DAKA, B, in this case). 2442  (c) Entity B attempts to verify the received message. If the verification fails, a message 2443  containing error report information is sent to Entity A, and the process is terminated: 2444  error_report(previous_message_id; error_type; auth_code3), 2445  where previous_message_id is the ID for the message containing the revocation request 2446  information (see step 1), the error_type is the type of error, and auth_code3 is computed 2447  using DAKA, B. Note that since there was an error in the received message, DAKA, B is used 2448  as the authentication key. 2449  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  77  Entity A would most likely resend the message, in this case. 2450  3. (a) If the verification is successful, Entity B destroys all copies of KDKLayer_3 and any keys 2451  lower in the key hierarchy (i.e., DEKLayer_4 and DAKLayer_4). 2452  (b) Entity B prepares and sends a message containing revocation confirmation information to 2453  Entity A: 2454  revocation_confirmation(ID_of_ KDKLayer_3; auth_code4), 2455  where auth_code4 is computed on the message using the authenication key usd for the 2456  message containing the revocation request information (i.e., either Transaction_auth_key 2457  or DAKA, B).  2458  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  78  Appendix B: References 2459  [DSKPP] Dynamic Symmetric Key Provisioning Protocol (DSKPP); RFC 6063; Doherty, 2460  Pei, Machani, and Nystrom; Internet Engineering Task Force, December 2010. 2461  https://tools.ietf.org/html/rfc6063 2462  [FIPS140-2] Security Requirements for Cryptographic Modules, Federal Information 2463  Processing Standards (FIPS) Publication FIPS 140-2, U.S. Department of 2464  Commerce/NIST, December 3, 2002. 2465  https://doi.org/10.6028/NIST.FIPS.140-2 2466  [FIPS 180-4] The Secure Hash Standard, Federal Information Processing Standards (FIPS) 2467  Publication FIPS-180-4, U. S. Department of Commerce/NIST, August 4, 2468  2015. 2469  https://doi.org/10.6028/NIST.FIPS.186-4  2470  [FIPS-197] Advanced Encryption Standard (AES), Federal Information Processing 2471  Standards (FIPS) Publication FIPS 197, U. S. Department of Commerce/NIST, 2472  November 26, 2001. 2473  https://doi.org/10.6028/NIST.FIPS.197 2474  [FIPS 198-1] The Keyed-Hash Message Authentication Code (HMAC), Federal Information 2475  Processing Standards (FIPS) Publication FIPS 198-1, U. S. Department of 2476  Commerce/NIST, July 2008. 2477  https://doi.org/10.6028/NIST.FIPS.198-1 2478  [FIPS 199] Standards for Security Categorization of Federal Information and Information 2479  Systems, Federal Information Processing Standards (FIPS) Publication FIPS 2480  199, U. S. Department of Commerce/NIST, March 2006. 2481  https://doi.org/10.6028/NIST.FIPS.199  2482  [FIPS 200] Minimum Security Requirements for Federal Information and Information 2483  Systems, , Federal Information Processing Standards (FIPS) Publication FIPS 2484  200, U. S. Department of Commerce/NIST, February 2004. 2485  https://doi.org/10.6028/NIST.FIPS.200  2486  [FIPS 202] SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions, 2487  Federal Information Processing Standards (FIPS) Publication FIPS-202, U. S. 2488  Department of Commerce/NIST, August 4, 2015. 2489  https://doi.org/10.6028/NIST.FIPS.202  2490  [Kerberos] Kerberos: The Network Authentication Protocol, Massachusetts Institute of 2491  Technology, September 25, 2017 2492  https://web.mit.edu/kerberos/ 2493  https://tools.ietf.org/html/rfc6063 https://doi.org/10.6028/NIST.FIPS.140-2 https://doi.org/10.6028/NIST.FIPS.186-4 https://doi.org/10.6028/NIST.FIPS.197 https://doi.org/10.6028/NIST.FIPS.198-1 https://doi.org/10.6028/NIST.FIPS.199 https://doi.org/10.6028/NIST.FIPS.200 https://doi.org/10.6028/NIST.FIPS.202 https://web.mit.edu/kerberos/  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  79  [KM in WSN] “Key Management in Wireless Sensor Networks;” Mansour, Chalhoub, and 2494  Lafourcade; Journal of Sensor and Actuator Networks, ISSN 2224-2708; 2495  September 7, 2015. 2496  http://www.mdpi.com/2224-2708/4/3/251 2497  [NISTIR 8105] Report on Post-Quantum Cryptography; Chen, Jordan, Liu, Moody, Peralta, 2498  Perlner, and Smith-Tone; National Institute of Standards and Technology, April 2499  2016. 2500  https://doi.org/10.6028/NIST.IR.8105 2501  [NISTIR 8114] Report on Lightweight Cryptography; NISTIR 8114; McKay, Bassham, Turan, 2502  and Mouha; National Institute of Standards and Technology, March 2017. 2503  https://doi.org/10.6028/NIST.IR.8114 2504  [RFC 4107] Guidelines for Cryptographic Key Management, RFC 4107, Bellovin and 2505  Housley, The Internet Society, June 2005. 2506  https://tools.ietf.org/html/rfc4107 2507  [S/MIME] Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message 2508  Specification, RFC 5751, Ramsdell and Turner, The Internet Society, January 2509  2010. 2510  https://tools.ietf.org/html/rfc5751 2511  The IETF LAMPS working group (see https://tools.ietf.org/wg/lamps/) has 2512  been developing a replacement for RFC 5751; the latest draft is available at 2513  https://tools.ietf.org/wg/lamps/draft-ietf-lamps-rfc5751-bis/. 2514  [SP 800-38A] Recommendation for Block Cipher Modes of Operation: Methods and 2515  Techniques, SP 800-38A, M. Dworkin, National Institute of Standards and 2516  Technology, December 2001. 2517  https://doi.org/10.6028/NIST.SP.800-38A  2518  [SP800-38B] Recommendation for Block Cipher Modes of Operation: the CMAC 2519  Authentication Mode for Authentication, SP 800-38B, M. Dworkin, National 2520  Institute of Standards and Technology, October, 2016. 2521  https://doi.org/10.6028/NIST.SP.800-38B  2522  [SP 800-38C] Recommendation for Block Cipher Modes of Operation: the CCM Mode for 2523  Authentication and Confidentiality, SP 800-38C, M. Dworkin, National 2524  Institute of Standards and Technology, May 2004. 2525  https://doi.org/10.6028/NIST.SP.800-38C  2526  [SP 800-38D] Recommendation for Block Cipher Modes of Operation: Galois/Counter 2527  Mode (GCM) and GMAC, SP 800-38D, M. Dworkin, National Institute of 2528  Standards and Technology, November 2007. 2529  https://doi.org/10.6028/NIST.SP.800-38D  2530  http://www.mdpi.com/2224-2708/4/3/251 https://doi.org/10.6028/NIST.IR.8105 https://doi.org/10.6028/NIST.IR.8114 https://tools.ietf.org/html/rfc4107 https://tools.ietf.org/html/rfc5751 https://tools.ietf.org/wg/lamps/ https://tools.ietf.org/wg/lamps/draft-ietf-lamps-rfc5751-bis/ https://doi.org/10.6028/NIST.SP.800-38A https://doi.org/10.6028/NIST.SP.800-38B https://doi.org/10.6028/NIST.SP.800-38C https://doi.org/10.6028/NIST.SP.800-38D  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  80  [SP800-38E] Recommendation for Block Cipher Modes of Operation: the XTS-AES Mode 2531  for Confidentiality on Storage Devices, SP 800-38E, M. Dworkin, January 2532  2010. 2533  https://doi.org/10.6028/NIST.SP.800-38E 2534  [SP 800-38F] Recommendation for Block Cipher Modes of Operation: Methods for Key 2535  Wrapping, SP 800-38F, M. Dworkin, National Institute of Standards and 2536  Technology, December 2012. 2537  https://doi.org/10.6028/NIST.SP.800-38F  2538  [SP 800-38G] Recommendation for Block Cipher Modes of Operation: Methods for Format-2539  Preserving Encryption, M. Dworkin, National Institute of Standards and 2540  Technology, March 2016. 2541  https://doi.org/10.6028/NIST.SP.800-38G  2542  [SP 800-56A] Recommendation for Pair-Wise Key Establishment Schemes Using Discrete 2543  Logarithm Cryptography; SP 800-56A, Revision 2; E. Barker, L. Chen, A. 2544  Roginsky, and M. Smid; May 2010. 2545  https://doi.org/10.6028/NIST.SP.800-56Ar3  2546  [SP 800-56B] Recommendation for Pair-Wise Key Establishment Schemes Using Integer 2547  Factorization Cryptography; SP 800-56B, Revision 1; E. Barker, L. Chen, and 2548  D. Moody; September 2014. 2549  https://doi.org/10.6028/NIST.SP.800-56Br1  2550  [SP800-57 Pt. 1] Recommendation for Key Management: Part 1: General, Special Publication 2551  800-57 Part 1, Revision 4, E. Barker, National Institute of Standards and 2552  Technology, January 2016. 2553  https://doi.org/10.6028/NIST.SP.800-57pt1r4  2554  [SP 800-57 Pt. 2] Recommendation for Key Management: Part 2: Best Practices for Key 2555  Management Organizations; Special Publication 800-57 Part 2, Revision 1 2556  DRAFT, E. Barker, and W. Barker; National Institute of Standards and 2557  Technology; April 2018. 2558  https://csrc.nist.gov/CSRC/media/Publications/sp/800-57-part-2/rev-2559  1/draft/documents/sp800-57pt2-r1-draft.pdf  2560  [SP 800-57 Pt. 3] Recommendation for Key Management: Part 3: Application-Specific Key 2561  Management Guidance, Special Publication 800-57 Part 3, E. Barker and Dang, 2562  National Institute of Standards and Technology January 2015. 2563  https://doi.org/10.6028/NIST.SP.800-57pt3r1  2564  [SP 800-88] Guidelines for Media Sanitization; Special Publication 800-88; R. Kissel, M. 2565  Scholl, S. Skolochenko, and X. Li; National Institute of Standards and 2566  Technology; September 2006. 2567  https://doi.org/10.6028/NIST.SP.800-88r1 2568  https://doi.org/10.6028/NIST.SP.800-38E https://doi.org/10.6028/NIST.SP.800-38F https://doi.org/10.6028/NIST.SP.800-38G https://doi.org/10.6028/NIST.SP.800-56Ar3 https://doi.org/10.6028/NIST.SP.800-56Br1 https://doi.org/10.6028/NIST.SP.800-57pt1r4 https://csrc.nist.gov/CSRC/media/Publications/sp/800-57-part-2/rev-1/draft/documents/sp800-57pt2-r1-draft.pdf https://csrc.nist.gov/CSRC/media/Publications/sp/800-57-part-2/rev-1/draft/documents/sp800-57pt2-r1-draft.pdf https://doi.org/10.6028/NIST.SP.800-57pt3r1 https://doi.org/10.6028/NIST.SP.800-88r1  NIST SP 800-71 (DRAFT)  RECOMMENDATION FOR KEY ESTABLISHMENT  USING SYMMETRIC BLOCK CIPHERS  81  [SP 800-90A] Recommendation for Random Number Generation Using Deterministic 2569  Random Bit Generators, SP 800-90A, Revision 1, E. Barker and J. Kelsey, 2570  National Institute of Standards and Technology; June 2015. 2571  https://doi.org/10.6028/NIST.SP.800-90Ar1  2572  [SP 800-108] Recommendation for Key Derivation Using Pseudorandom Functions 2573  (Revised), Special Publication 800-108, L. Chen, National Institute of 2574  Standards and Technology, October 2009. 2575  https://doi.org/10.6028/NIST.SP.800-108  2576  [SP 800-131A] Transitions: Recommendation for the Use of Cryptographic Algorithms and 2577  Key Lengths, NIST SP 800-131A, Revision 1, E. Barker and Q. Dang, 2578  November 2015. 2579  https://doi.org/10.6028/NIST.SP.800-131Ar1  2580  [SP 800-152] A Profile for U.S. Federal Cryptographic Key Management Systems (CKMS); 2581  NIST SP 800-152; E. Barker, Smid, and Branstad; National Institute of 2582  Standards and Technology; October 2015 2583  https://doi.org/10.6028/NIST.SP.800-152 2584  [SP 800-175B] Guideline for Using Cryptographic Standards in the Federal Government: 2585  Cryptographic Mechanisms, E. Barker, National Institute of Standards and 2586  Technology, August 2016. 2587  https://doi.org/10.6028/NIST.SP.800-175B  2588  [SP 800-185] SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash, and ParallelHash; 2589  NIST SP 800-185; Kelsey, Chang, and Perlner; National Institute of Standards 2590  and Technology; December 2016. 2591  https://doi.org/10.6028/NIST.SP.800-185 2592  [X9.17] American National Standard X9.17, Financial Institution Key Management 2593  (Wholesale), April 1985, Withdrawn. 2594  [X9.28] American National Standard X9.28, Financial Institution Multiple Center Key 2595  Management (Wholesale), June 1991, Withdrawn. 2596  https://doi.org/10.6028/NIST.SP.800-90Ar1 https://doi.org/10.6028/NIST.SP.800-108 https://doi.org/10.6028/NIST.SP.800-131Ar1 https://doi.org/10.6028/NIST.SP.800-152 https://doi.org/10.6028/NIST.SP.800-175B https://doi.org/10.6028/NIST.SP.800-185  Executive Summary  1. Introduction  1.1 Scope  1.2 Content and Organization  2. Definitions and Common Abbreviations  2.1 Definitions  2.2 Common Abbreviations  3. Symmetric-Key-Management Fundamentals  3.1 Uses of Symmetric Keys  3.2 Application Considerations  3.3 Symmetric Algorithm and Key Types  3.4 Key Distribution Using Symmetric-Key Techniques  3.4.1 Manual Distribution  3.4.2 Automated Distribution  3.5 Key Hierarchies  3.5.1 Storage Applications  3.5.2 Communicating Groups  3.5.3 Key-Establishment Transactions  4. Key Management Architectures for Symmetric Keys  4.1 Center-based Key Establishment Architectures  4.1.1 Key Distribution Centers (KDCs)  4.1.2 Key Translation Centers (KTCs)  4.1.3 Multiple-Center Architectures  4.1.3.1 A Subscriber Requests Key Generation and Distribution Services  4.1.3.2 A Subscriber Requests Key-Translation Services  4.2 Communicating Groups  4.2.1 Establishing Communicating Groups  4.2.2 Communicating Group Requirements  4.2.3 Subsequent Key Distribution within a Communicating Group  5. Key-Establishment Communications  5.1 General Communications Requirements  5.2  Notation  5.3 Message Content and Handling  5.3.1 Key Generation Request  5.3.2 Key Transfers  5.3.3 Translation Requests  5.3.4 Revocation Request  5.3.5 Revocation Confirmation  5.3.6 Acknowledgements  5.3.7 Error Reports  5.4 Authentication Codes in Key-Establishment Messages  5.5 Revocation and Destruction  Appendix A: Example Scenarios  A.1 Communicating Group Key Transfer  A.2  Using a KDC to Distribute Keys to an Already-Established Communicating Group  A.3 Using a KDC to Establish a Communicating Group  A.4 Using a KTC to Establish a Communicating Group  A.5 Using a Multiple-Center Group to Generate a Key for Establishing a Communicating Group  A.6 Using a Multiple-Center Group to Establish a Communicating Group Only Using its Key-Translation Services  A.7 Forwarding Keys Through an Intermediate Entity  A.8 Requesting Key Revocation and Confirmation  A.8.1 Example 1  A.8.2 Example 2  Appendix B: References",
    "abstract": ""
}
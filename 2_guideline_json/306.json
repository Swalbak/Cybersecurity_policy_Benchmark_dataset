{
    "number": 306,
    "label": 2,
    "source": "ENSIA",
    "subject": "Crypto Assets: Introduction to Digital Currencies and Distributed Ledger Technologies",
    "document(english)": "CRYPTO ASSETS An Introduction to Digital Currencies andDistributed Ledger Technologies  FEBRUARY 2021  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  ABOUT ENISA The European Union Agency for Cybersecurity, ENISA, is the Union’s agency ded-icated to achieving a high common level of cybersecurity across Europe. Estab-lished in 2004 and strengthened by the EU Cybersecurity Act, the European UnionAgency for Cybersecurity contributes to EU cyber policy, enhances the trustwor-thiness of ICT products, services and processes with cybersecurity certificationschemes, cooperates with Member States and EU bodies, and helps Europe pre-pare for the cyber challenges of tomorrow. Through knowledge sharing, capac-ity building and awareness raising, the Agency works together with its key stake-holders to strengthen trust in the connected economy, to boost resilience of theUnion’s infrastructure, and, ultimately, to keep Europe’s society and citizens digi-tally secure. For more information, visit www.enisa.europa.eu. CONTACT  For contacting the authors please use evangelos.rekleitis@enisa.europa.euFor media enquiries about this paper, please use press@enisa.europa.eu AUTHOR  Nigel Smart, Thynnus Limited EDITORS  Evangelos Rekleitis, ENISAAngeliki Aktypi, ENISAAthanasios Vasileios Grammatopoulos, ENISA LEGAL NOTICE  Notice must be taken that this publication represents the views and interpreta-tions of ENISA, unless stated otherwise. This publication should not be construedto be a legal action of ENISA or the ENISA bodies unless adopted pursuant to theRegulation (EU) No 2019/881. This publication does not necessarily representstate-of the-art and ENISA may update it from time to time. Third-party sourcesare quoted as appropriate. ENISA is not responsible for the content of the exter-nal sources including external websites referenced in this publication. This pub-lication is intended for information purposes only. It must be accessible free ofcharge. Neither ENISA nor any person acting on its behalf is responsible for theuse that might be made of the information contained in this publication. COPYRIGHT NOTICE  © European Union Agency for Cybersecurity (ENISA), 2020Reproduction is authorised provided the source is acknowledged. Copyright for the image on the cover: © ShutterstockFor any use or reproduction of photos or other material that is not under theENISA copyright, permission must be sought directly from the copyright holders.ISBN: 978-92-9204-467-1, DOI: 10.2824/035503  1  www.enisa.europa.eu evangelos.rekleitis@enisa.europa.eu press@enisa.europa.eu  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  EXECUTIVE SUMMARY The European Commission on the 24th September 2020 adopted a comprehen-sive package of legislative proposals for the regulation of crypto-assets, updat-ing relevant financial market rules 1, and is moving forward with creating a Pan-European blockchain regulatory sandbox facility to test innovative solutions andidentify obstacles that arise in using Distributed Ledger Technnologies (DLTs) inthe trading and post trading of securities. Crypto-assets may qualify as \"finan-cial instruments\", in which case they fall under the Markets in Financial Instru-ments Directive (e.g.: tokenised equities or tokenised bonds). But there are alsotypes that do not qualify as \"financial instruments\", such as utility tokens or pay-ment tokens, generally refered to as digital currencies. Further, digital currecieswhen based on DLTs, like the Blockchain, are usually called cryptocurrencies; asopposed to centralized digital currencies. These timely policy intiatives make evident that crypto-assets are a playground ofnot only technical, but also financial innovation that demands scrutiny in all its as-pects. With this first introductory study focusing on the rise of cryptocurrencies &DLT, the European Union Agency for CyberSecurity is launching a series of infor-mation security studies in the area of crypto-assets to support policy-makers andraise awareness on the arising security and data protection. The creation of BitCoin by Nakamoto [Nak08] in 2008 created a flurry of interest inso-called ‘digital currencies’. The basic ideas of a blockchain, a consensus mecha-nism, and operations on a public ledger have potentially wide application outsideof the narrow confines of creating a digital currency. The technological ideas behind such distributed ledger technologies go back toway before 2008, often to the 1970s. What digital ledger technologies do is bringvarious technical components such as digital signatures, cryptographic hash func-tions, Merkle-Trees, consensus mechanisms, zero-knowledge proofs, secret shar-ing, together into an interesting combination which can address a number of ap-plication needs. However, the hype behind such technologies understandably also creates unre-alistic expectations as to what problems the technology can solve. This has led toa common quote of ‘If you think your problem can be solved by blockchain, thenyou do not understand your problem’. This report aims to increase the under-standing of blockchain technologies. It aims to explain the underlying technicalconcepts and how they relate to each other. The goal is to explain the compo-nents, and illustrate their use by pointing to deployed instances where the ideasare utilized.  1Digital Finance Package: Commission sets out new, ambitious approach to encour-age responsible innovation to benefit consumers and businesses, https://ec.europa.eu/commission/presscorner/detail/en/IP_20_1684  2  https://ec.europa.eu/commission/presscorner/detail/en/IP_20_1684 https://ec.europa.eu/commission/presscorner/detail/en/IP_20_1684  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  CONTENTS 1 The Genesis Of Bitcoin 41.1 Hash Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41.2 Merkle Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41.3 Digital Signature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51.4 Secret Sharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61.5 Byzantine Agreement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61.6 Electronic Cash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61.7 Zero-Knowledge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71.8 Time Stamps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71.9 Multi-Party Computation and Threshold Cryptography . . . . . . . . . . 81.10 Proof of Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 2 Distributed Ledger  Technologies and Bitcoin 102.1 The Word ‘Ledger’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102.2 The Word ‘Distributed’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112.3 The Words ‘Distributed Ledger Technology’ . . . . . . . . . . . . . . . . . 112.4 Provisioned Blockchains . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122.5 Non-Provisioned Blockchains . . . . . . . . . . . . . . . . . . . . . . . . . 122.6 Rewarding Validators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 3 Applications 16  4 Smart Contracts 19  5 Securing Secret Keys 20  6 Zero-Knowledge Proofs 226.1 Applications of Zero-Knowledge Proofs . . . . . . . . . . . . . . . . . . . 236.2 Removing Trusted Setups . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 7 Conclusions 25  Bibliography 26  3  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  1 THE GENESIS OF BITCOIN To understand how Bitcoin came about, and the resulting different forms of dis-tributed ledger technology, one needs to see the genesis of the ideas as a con-tinuum. Distributed Ledger Technologies (DLT) are at their heart simply a novelcombination of existing simpler technologies. In this first section we aim to recapon these technologies and give their historical genesis.  1.1 HASH FUNCTIONS The most important underlying cryptographic function in a DLT is a cryptographichash function. These were introduced in the seminal paper of Diffie and Hellman[DH76] in 1976 as a means to construct digital signatures. A cryptographic hashfunction is a function with an (essentially) unlimited domain, but a fixed finite co-domain  H : {0, 1}∗ −→ {0, 1}h.  The length of bitstrings in the co-domain h is called the hash-length. Hash func-tions are used extensively in Computer Science, and generally they must ‘look like’a random function. However secure cryptographic hash functions take this con-cept of looking random further and require three major security properties: 1. The hash function should be pre-image resistant – Given an output value  y it is computationally infeasible to find a matching input value x such that y = H(x). Thus it is said to be hard to solve the pre-image problem.  2. The hash function should be collision resistant – It is hard to find twovalues x and x′ in the input’s domain which map to the same output value,i.e. it is hard to find x and x′ such that H(x) = H(x′). Thus it is said to behard to find collisions in the hash function. 3. The hash function should be second pre-image resistant – Given an in-put/ouput pair (x, y) such that y = H(x) it is hard to find another x′, with  x′ 6= x, such that H(x′) = y. Thus it is said to be hard to solve the secondpre-image problem. Modern secure cryptographic hash functions - such as the SHA-2 and SHA-3 fam-ilies [NIS12] - are usually used with a hash-length that satisfy h ≥ 256 to providestrong security.  1.2 MERKLE TREE Invented in 1979 [Mer79], Merkle Trees enable a large amount of data to be hashedinto a small key, whilst at the same time allowing a short proof that a given dataitem has been included within the final hash value. Consider the example in Fig-ure 1.1, the value h00 is obtained by hashingm000 andm001, i.e. h00 = H(m000‖m001).The value h0 is obtained by hashing h00 and h01, i.e. h0 = H(h00‖h01). Whilst thefinal value h (known as Merkle Tree root) is obtained by hashing h0 and h1, i.e. h = H(h0‖h1).  4  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  h  h0  h00  m000 m001  h01  m010 m011  h1  h10  m100 m101  h11  m110 m111  Figure 1.1: Merkle Tree of Depth d = 4  In this Merkle Tree we have stored the eight valuesm000, . . . ,m111, but we pub-lish a single value h, which authenticates all eight values at once. To prove that adata itemm100, held at a leaf node, is authenticated by the root node h, the proverneeds to reveal the path of hashes required to reproduce h givenm100. Thus toauthenticatem100 in our example one reveals the values (m101, h11, h0), since h = H ( h0 ‖ H ( H (m100 ‖m101 ) ‖ h11 ) )  The key property is that a tree of depth d allows us to store 2d values on the leaves,whilst requiring us to reveal only d− 1 values to show that a data item has been in-cluded in the tree.  1.3 DIGITAL SIGNATURE Digital signatures were also introduced in the famous paper of Diffie and Hell-man [DH76]. They provide a means for a signer (who holds a private key sk) toauthenticate a messagem, so that a verifier (who only holds the public key pk) canverify that the signer did indeed ‘sign’ the messagem with their correspondingprivate key. Formally we have three algorithms (KeyGen,Sign,Verify) such that  • KeyGen : Produces a public/private key pair (pk, sk)← KeyGen(). • Sign : Generates a signature σ ← Sign(sk,m). • Verify : Verifies a signature on a message Verify(pk, σ,m) ∈ {0, 1}.  We require that valid sigantures verify, i.e. ∀(pk, sk)← KeyGen(), ∀m, Verify(pk,Sign(sk,m),m) = 1,  and that an adversary, who does not know sk, is unable to construct a valid signa-ture σ, on a messagem for the public key pk. For the whole system to be secure, it has to be computational infeasible for anadversary who does not know the private key sk to generate a valid signature σon a messagem and a public key pk. Note that, as the name suggests, the privatekey sk should be kept secret by the signer while the public key pk can be publiclyknown by everyone. Over the years many digital signature schemes have been proposed. The pre-ferred signature scheme in deployed applications at the time of writing is the EC-DSA algorithm [NIS13], whose genesis goes back to the mid 1980’s. The digital sig-nature scheme used in Bitcoin is the EC-DSA algorithm specialised for use with theelliptic curve secp256k1 from [Sta10].  5  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  1.4 SECRET SHARING A secret sharing scheme is a methodology to enable a secret, lets call this s, to beshared amongst a set of parties. This is done in such a way that if a certain set ofparties come together (call a qualified set) then the secret can be recovered, but ifan unqualified set come together then nothing can be learnt about the secret. Theset of all qualified sets is called an access structure. Various secret sharing schemes exist, and their constructions depends on the ac-cess structure. The simplest scheme is the full threshold scheme, which enablesone to share a secret amongst n players in such a way that the only qualified set isthe complete set of n players. To share a secret x ∈ Fp in this manner we write  s = s1 + . . .+ sn  and give si to player i. The most famous non trivial secret sharing scheme is that of Shamir [Sha79] whichsupports so-called threshold access structures (n, t). This allows a set of n partiesto share a secret s so that one requires t + 1 of the parties to come together so asto recover the secret. The construction is very simple, one selects a random poly-nomial F (X) of degree t over Fp such that F (0) = s. Then party i ∈ [1, . . . , N ] isgiven the value si = F (i). The recovery of the secret by t + 1 parties is performedby Lagrange interpolation.  1.5 BYZANTINE AGREEMENT The Byzantine Generals problem, or the problem of Byzantine Agreement, is aclassic problem in distributed systems going back to 1982 [LSP82]. The basic prob-lem is for a set of n entities to agree on a given value. If a proportion t of the enti-ties are faulty (and actively so, a so-called Byzantine fault) then it is impossible tocreate consensus if t ≥ n/3. A standard (classic) protocol by Lamport et al usingdigital signatures shows that agreement can be reached when t < n/3. See thebook [CGR11] for a modern and readable introduction to various protocols in thisspace. The problem was dubbed the Byzantine Generals problem by Lamport due to theanalogy with a story of a group of generals trying to attack a city. If all the generalsagree on attacking then the attack will succeed, if they all agree on retreating thenthey will not lose, however if there is disagreement then their army will be routed.The problem becomes complicated in the case where treacherous generals arehidden among the generals and they wish the army to be routed, and maybe al-ter, forge, or delete messages sent from one general to another.  1.6 ELECTRONIC CASH The idea of creating a form of electronic money is older than the Internet. Themost famous early example is a method of Chaum [Cha82] from 1982, whicheventually led to the DigiCash project. Physical currency has an anonymity prop-erty that standard digital payment systems do not. A bank can trace who sentwhat to whom with digital payments, but one cannot trace bank notes as theypass through the economy. The standard model of a financial payment involves four entities, the customer(who is paying for something), the merchant (who is receiving the payment), theissuer (the bank of the customer) and the acquirer (the bank of the merchant). Ina traditional digital payment the payment is performed between the issuer andthe acquirer, thus who paid what to whom and how much is visible to the banking  6  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  system. Cash transactions on the other hand happen between the customer andthe merchant, with only the withdrawal and the final desposit being visible to thebanking system. The precise link between the withdrawal and the deposit is beinghidden. Electronic Cash systems aim to provide the anonymity of physical cash in this re-gards. Chaum’s system utilized blind signature schemes (a form of digital signa-ture in which the signer does not know what they are signing) in order to createa form of digital cash. The DigiCash system still maintained the concept of a with-drawal and deposit from a ‘bank’, but the tracing of the withdrawn money throughthe system was anonymized. A key problem with electronic cash, which DigiCash’s complexity solved, is that ofpreventing double spending. With physical cash this prevented by being unableto copy a banknote or coin easily. In the electronic world copying bits is easy, thusavoiding double spending requires a different solution.  1.7 ZERO-KNOWLEDGE One can consider a digital signature scheme as a proof that the signer knowssome secret sk associated to a public key and a message. The interesting thingabout the digital signature is that knowledge of the signature reveals no knowl-edge about the secret key, but the fact that it was used to produce the signa-ture. This is an example of a more general concept called a zero-knowledge proof,which was introduced by Goldwasser et al in [GMR85]. Suppose you are given a statement S, along with a witness w that the statement istrue. For example, this could be the statement that your bank account has morethan 100 euros in it; with the witness w being the exact value of money in your ac-count. A zero-knowledge proof is a means to prove to a third party that the state-ment is indeed true, without revealing any information about the witness. Thesecurity properties we require of a zero-knowledge proof are:  • Correctness: An honest prover can always convince a verifier that the state-ment is true if the prover holds a valid witness. • Soundness: A dishonest prover finds it computationally hard to convince averifier that a statement is true if the prover does not hold a valid witness. • Zero-Knowledge: The proof itself reveals no information about the witness,but the fact that it exists and is known to the prover.  The advent of DLT technologies has created a huge new interest in Zero-Knowledgeproof techniques, and their application, with many advances having been madeover the last few years. We will discuss some of these below.  1.8 TIME STAMPS The idea of using a ‘blockchain’, namely a sequence of hashed values, with eachhashed value linked to the previous one by inclusion, goes back to 1990 and amethod of time stamping of documents presented in [HS91]. See Figure 1.2 foran example. At a given time interval a series of documents, in this example called Tx0, . . . ,Tx3 are hashed via a Merkle Tree into a single root node TxRoot1. Thishash TxRoot1 along with a given timestamp value Timestmp1, a nonce Nonce1 andthe hash of the previous block’s hash PrecHash0 constructs one block of the chainthat can be hashed to generate the PrevHash1. The PrevHash1 hash will be used toconstruct the next block on the chain, and so on, thus the PrevHashi hashes are  7  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  used to link each block to the previous and next block. The sequence of linkedblocks at the top of the diagram is called a blockchain.  TxRoot1 PrevHash2 Timestmp2  TxRoot2 Nonce2  Hash01 Hash23 Hash0 Hash1 Hash2 Hash3 Tx0 Tx1 Tx2 Tx3  PrevHash1 Timestmp1  Nonce1  PrevHash0 Timestmp0  TxRoot0 Nonce0  Figure 1.2: Time stamping documents using a blockchain and Merkle Trees  1.9 MULTI-PARTY COMPUTATION AND THRESHOLD CRYP- TOGRAPHY  Multi-Party Computation (MPC) was developed in the 1980’s in a series of works[Yao86, Yao86, BGW88, CCD88, RB89]. The basic concept of MPC is that it allows aset of mutually distrusting parties to compute an arbitrary function of their data.For example it allows two companies to compute a function on their respectivecustomer databases, without revealing the customer details to each other. A closelyrelated concept is that of Threshold Cryptography [Des94] in which the function tobe computed is restricted to a cryptographic function on a secret key (for exam-ple the construction of a digital signature, or a decryption operation). In the lattercase the secret is distributed amongst the parties using a form of secret sharing. It was not until the last decade that the techniques for general MPC have advancedin order to enable useful calculations to be performed. The simpler case of Thresh-old Cryptography had earlier advances, but again for algorithms of interest (for ex-ample the EC-DSA signing algorithm using in Bitcoin) really efficient solutions haveonly become available in the last few years.  1.10 PROOF OF WORK Proofs of work were introduced in 1993 by Dwork and Naor [DN93] as a mecha-nism to prevent denial-of-service attacks and spam email. The term itself was in-troduced by Jakobsson and Juels in 1999 [JJ99]. At their heart they provide a cryp-tographic proof that one party (the prover) has expended a given amount of com-putational effort, which is then checked by the verifier. This is performed by theverifier setting the prover a cryptographic puzzle. A cryptographic puzzle is a com-putational problem which is easy to generate and verify, but for which the solutionis hard to compute. The typical example of a cryptographic puzzle are hash-based puzzles. Here thepuzzle generation is given by bit-string x, a difficulty parameter t and a hash func-tion H with hashlengh h ≥ t. The puzzle solver needs to find a value r such thatthe hash function H when evaluated on the bit-string x‖r produces an output  8  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  whose last t bits are all equal to zero. On the assumption that the hash functionis secure (both pre-image resistant and acts like a random function), the effortneeded by the prover to solve this problem is expected to be 2t hash functioncalls.  9  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  2 DISTRIBUTED LEDGERTECHNOLOGIES AND BITCOIN We now discuss how to put the above components into a system, and what usescould such a system have. It is perhaps more illustrative to now approach theproblem from the top, i.e. what problems are we trying to solve and then see howthe above technologies can be put together into solving this problem. At the endwe discuss the specific technology choices which the Bitcoin system makes. Weuse Bitcoin as an example as it is the most well known of all DLTs. We first pickapart the two words Distributed Ledger.  2.1 THE WORD ‘LEDGER’ A ledger, according to Wikipedia, is “the principal book or computer file for recording and totaling economic transactions measured in terms of a monetary unit of account by account type, with debits and credits in separate columns and a beginning mon- etary balance and ending monetary balance for each account.” In computer termsa ledger is nothing but a means to record data, thus in traditional banking sys-tems a ledger might be implemented by a database. Such a database may (forexample) record balances of individual accounts, but there is a subtle differencebetween such a database solution and a ledger. To change an account amount ina database one simply updates the record, whereas in the ledger we append thetransaction to the ledger and this itself records the transfer of funds. In particular a ledger only allows append operations, thus the state of the systemcan be rewound to see what it was in a previous time period. In a banking system,users get bank statements, which detail the indiviual transactions and these areusually kept for many years. Thus each transaction is appended to the datastore.Not only that but append is the only operation allowed. This means that priortransactions which have been added cannot be removed; in accounting termsthey can be reversed by adding a counter transaction but never removed. Thusone can consider a ledger to be an append only database, thus the database is im- mutable (i.e. one cannot change events in the past). Hence the first question onemust ask when considering DLT for a solution is Question 1 Does your application require data which is stored in an im- mutable form, i.e. would an append only database be suitable? The state of the ledger at time period i is assumed to be given by a state statei.The transactions, or state transitions, to move from time period i to time period i + 1, are given by Txi,j for j = 1, . . . , n. To obtain the new state statei+1 all the(consistent) transactions Txi,j are applied (where consistency will depend on theapplication). In a blockchain system, such as in Figure 1.2, one records these statetransitions by hashing the transactions together using a Merkle Tree, and then in-serting the Merkle root into the blockchain as in Figure 1.2. Assuming you knowthe initial state of the system, and all the transactions, the current hash of the ‘cur-rent block’ (if accepted) will validate all the transactions, and hence the currentstate. To avoid needing to rewind the entire system to the initial position one could also  10  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  store the current state and its hash within the current chain block; much like thevalue Timestmp is stored in the example in Figure 1.2.  2.2 THE WORD ‘DISTRIBUTED’ Having picked apart the word ledger, and shown how this can be implementedusing a blockchain, we now turn to the word ‘distributed’. Again taking a definitionfrom Wikipedia, a distributed system is a “system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another”. Distributed databases already exist, for example a company’s database may becloned across different locations to enable security against accidental data loss, orto provide performance improvements by locating data close to where it is used.However, a major problem in distributed systems is to ensure coordination andtrust between the different components. In the case of a distributed databaseone needs to ensure that read/write operations on one copy of the database re-sult in the same operations when they are applied to a copy in another location.Much of the complexity of modern corporate database systems comes from theneed to enable general read/write queries on the entire database in a way whichensures data consistency. Another reason one may want to apply distribution todata is that one does not trust a single data holder with the data. Thus we use dis-tribution to protect not only against accidental, but also malicious, data loss ormodification. Distribution of data is thus an important property, but only some applications re-quire it. Hence the second question one must ask when considering DLT for a so-lution is Question 2 Does your application require data to be stored in a distribut- ed/decentralized manner for data loss prevention, security, or perfor- mance reasons? However distributed solutions, whilst giving many benefits, come with increasedcost and complexity. The problem of ensuring consistency in the presence of net-work faults, be them accidential or malicious, is exactly the Byzantine Generalsproblem considered earlier.  2.3 THE WORDS ‘DISTRIBUTED LEDGER TECHNOLOGY’ Thus a distributed ledger technology is at its heart an append only database inwhich the database is stored in a distributed manner. Then on top of this technol-ogy one can build applications, namely you decide what data is to be stored in thedatabase and what a transaction to modify that database looks like. The combi-nation of distrubution and ledger can have considerable advantages over using atraditional database solution. The data storage technology can be simpler: Firstly, since we do not need to sup-port all database transititions, only the appending of transactions. Secondly, interms of obtaining consistency, we only need for the parties to agree on the trans-actions which needs to be added to move from one state to the next. Thirdly, asonly hashes of both the state and the transitions are stored on the ‘blockchain’ theentire blockchain could be store publicly. So once a decision for deploying a form of DLT has been made, the next ques-tion which arises is how one obtains the consensus. Consensus is provided by so-called validators (usually calledminers) in the Bitcoin ecosystem. These validatorsactually perform two tasks, the first task is to verify that the state transitions being  11  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  applied to the blockchain are correct and consistent, and secondly to ensure thatall parties agree on which transitions have been applied. There are a number of ways to implement the validators, correspoinding to whetherthe users/deployers of the blockchain are considered trusted parties or not. Thekey distinction is between so-called provisioned blockchains and non-provisionedblockchains. At a high-level, provisioned blockchains are used when one has anatural trusted authority who can regulate and appoint the validators. In provi-sioned blockchains one uses traditional protocols to obtain consensus. In a non-provisioned blockchain there is no authority who is trusted to set up the valida-tors. In this situation one requires different methods to obtain consensus basedon so-called crypto-economics models.  2.4 PROVISIONED BLOCKCHAINS In many commercial applications there is a natural set of semi-trusted validators.Consider a banking application within a given geographic region, the tier-onebanks (clearing banks) within that region are naturally trusted. Whilst one maynot trust an individual bank it is reasonable to assume that a majority will act cor-rectly. In a situation where one has a set of n parties in which one can trust that only t < n/3 of them will be motivated to act dishonestly one can deploy standard Byzan-tine Agreement protocols to validate the blockchain; i.e. to obtain consensus.Such protocols are highly efficient (compared to those used for non-provisionedDLTs), requiring only the passing of digital signatures between each party in asmall number of rounds. We refer to [CGR11] for an explanation of some of theseprotocols in various situations. This situation is called a provisioned blockchain as the set of semi-trusted val-idators provide the basic blockchain infrastructure for themselves (or others)to provide the applications upon them. A key aspect is that the validators for aprovisioned blockchain are appointed or approved by a regulatory central au-thority, called the provisioning authority. The validators are only trusted (as agroup) to provide the consensus mechanism, thus any data which is written tothe blockchain must still be protected if the validator is not supposed to see theraw data.  2.5 NON-PROVISIONED BLOCKCHAINS Sometimes, however, there are no natural semi-trusted parties to act as valida-tors, or such a (relatively small) semi-trusted set is deemed to be a single point offailure. In such situations one moves into the realm of non-provisioned blockchains.In this scenario any one is assumed to be able to elect to become a validator,and security against corrupt validators is provided by having a large number ofthem. However, this comes at the expense of needing an alternative mechanismto provide consensus. There are two popular mechanisms for the consensus to beachieved; Proof of Work and Proof of Stake. Proof of Work: In a Proof of Work system each validator competes to find a so-lution to a cryptographic puzzle, which depends on the next block to be added tothe blockchain. For example the puzzle is to find a hash value terminating with agiven number of zeros, where the input to the hash includes the hash of the nextblock. The first validator to solve the puzzle gets the reward of placing the nextblock onto the top of the blockchain, along with the associated solution to thepuzzle. This solution is propogated through the validation network and then oth-ers try to place more blocks ontop. Due to propogation delays different validators  12  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  could have different views of the current top of the blockchain. However, as thereis no point in validators trying to add blocks not at the current top, eventually aconsensus will emerge as the blocks just below the top. In Bitcoin this process is termed ‘mining’, and the assumption is that all blocks ata depth of six or below in the chain have been assumed to be permently commit-ted to the chain, as the effort needed for a different set of six blocks to eventuallybecome accepted is too great. The methodology works as long as the validatorshave an economic incentive to continue performing their task; we will return tothis below. As for a single miner the probability of solving the cryptographic puzzle before another miner is relative small, and the cost of mining is very large it is common forminers to ‘pool’ their mining capabilities. Such mining pools search for a solutionto the cryptographic puzzle, and when one member of the pool finds a solutionthe ‘rewards’ (see below) are distribued amongst the entire pool. Usually the poolask the miners to solve an easier version of the initial problem – for example byreducing the difficulty t – and share the prise based on each miner’s effort on theeasier problem. By solving the easier problem, by luck a miner will eventually alsosolve the real problem. The original Bitcoin paper [Nak08] argues that for an adversarial miner to haveenough power to overcome the network, and place his own preferred blocks ontothe top of the blockchain, he needs to control a majority of the mining network.This is the so-called 51% attack. However, in 2014 Eyal and Sirer [ES14] introducedthe concept of selfish mining which showed that an adversarial miner can obtainsome advantage when they get control of roughly 1/3 of the network (which wouldbe consistent with over Byzantine Agreement methodologies). See [NRS20] fora more recent analysis of selfish mining. At the time of writing the mining poolcalled F2Pool has about 16% of the mining capacity1, with the top three miningpools having around 1/3 of the capacity. As Proof of Work requires spending computational power the process of mining/-validating becomes expensive, both in terms of electricity and heat dispersal. Pro-fessional mining is performed using application-specific integrated circuit (ASIC)and is dominated by a small number of ‘big player’ mining pools. It is also incredi-ble damaging to the environment. An article from 2019 [SKG19] claims that Bitcoinmining accounts for 0.2% of all electricity consumption worldwide, and producesas much carbon dioxide as a metropolis the size of Kansas City (around 500,000inhabitants). Other research from 2018 [KT18] calculated that Bitcoin mining pro-duced, over a 30 month period, the equivalent of 3 to 13 million tonnes of carbondioxide. Proof of Stake: A Proof of Stake system aims to mitigate the environmental im-pact of Proof of Work systems. In such systems becoming a validator is open toanyone, thus one again does not adopt a central provisioning authority. The val-idators have some form of stored value (called their stake), often a certain amountof the underlying ‘cryptocurrency’. At a given time instance the network decides,via a distributed coin-flip, who the next validator will be. The probability that agiven validator is selected depends on various factors, for example it could be auniformly random selection, or from a distribution which depends on the per-cieved wealth of the validator, or their percieved trustfullness. Once the valdidator for the next block is selected, the validator creates a block ofdata from all parties wishing to add data, validates the data is correct and thenadds it to the top of the chain (along with their digital signature to say they per-formed the operation). Other parties can check that the added block is correct,  1https://www.blockchain.com/pools  13  https://www.blockchain.com/pools  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  and if something wrong is found then the validator has some of their ‘stake’ re-moved, a process called ‘slashing’. Thus validators who do not perform correctlyare given a penalty. To avoid validators stopping certain parties from adding datato the blockchain, or giving preferential service to others, the validator for eachblock is randomly selected. In both proof-of-work and proof-of-stake the correct behaviour of the validators isensured by applying to the self-interest of the validators. Each validator wants toobtain the rewards available to those who contribute to validating a block, and novalidator wants to be slashed. This appealing to selfish behaviour results in a formof economic incentive; with such modeling being dubbed crypto-economics. Thus we are led to our third and fourth questions Question 3 Is your application of a DLT suitable for a provisioned or non- provisioned methodology for implementing the validators? Question 4 If a non-provisioned blockchain, what methodology for con- sensus will be utilized?  2.6 REWARDING VALIDATORS All blockchains, whether provisioned or non-provisioned, rely on the validators toprovide a service. A key issue which needs to be addressed, leading to a new fieldof ‘crypto-economics’ is how one can incentivize the validators to provide the ser-vice. Even in a provisioned blokchain validators have an incentive to ‘free-load’ offthe work of others. One also has to protect the network against malicious valida-tors doing incorrect actions as a form of denial of service attack. There are various mechanisms to both reward and punish validators. We have al-ready discussed, in Proof of Stake blockchains, how the penalty of slashing can beapplied to a misbehaving validator. In addition if the selection of the next validatoris done via a randomized method which is skewed by how ‘trusted’ a validator is toperform their task correctly, then validators who wish to validate blocks will not bechosen if they continually act in damaging the blockchain. One way of rewarding validators used in almost all systems is that of ‘transactionfees’. Thus entities wishing to place data onto the blockchain, or use its function-ality, need to pay a transaction fee for the privalege. This transaction fee is thencharged by the validators who perform the actual validation. This could be theset of validators who complete the Byzantine Agreement protocol in the caseof provisioned blockchains, the validator who is chosen and successfully com-pletes the validation in a Proof of Stake blockchain, or the validator who solves thecryptographic puzzle in the Proof of Work blockchain. In provisioned blockchainstransaction fees are a natural methodology of rewarding validators and avoidingfreeloaders. This can also be user as a method to prioritize transactions. Trans-actions with higher transactions fees are selected first for validation – as verifiersare trying to maximize their profit – and eventually they are served faster by thenetwork. A second methodology is to ‘create’ more digital currency whilst validating blocks.Thus the total amount of value in the system (measured in terms of units of theunderlying ‘currency’) increases as more blocks are added to the blockchain. Thisassumes that the underlying digital currency will eventually be worth something inthe real world, and thus the digital currency can in some sense be either spent onsomething useful to the validators, or can be converted into fiat currency.  14  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  Bitcoin adopts a combination of transaction fees and money generation into its re-ward mechanism for validators. It also has an inbuilt anti-inflationary money con-trol mechanism, which means the total amount of Bitcoins which can ever be cre-ated by ‘mining’ is limited. Thus over time the validators will need to switch theirmain reward mechanism from mining new coins to transaction fees. Thus we come to our next question for anyone wishing to deploy a DLT Question 5 Irrespective of your method of obtaining Byzantine Agree- ment, how will validators be rewarded (resp. penalised) for ‘good’ (resp. bad) behaviour?  15  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  3 APPLICATIONS As remarked above there is a natural fit between DLT applications and finance; aledger is a standard mechanism for recording financial transactions and the re-ward mechanism needed for validators lends itself to some form of financial pay-ment system. BitCoin: The first system to deploy the above architecture for DLTs was obvi-ously BitCoin. This aims to be a completely decentralized digital currency with nocentral issuing bank. The idea of BitCoin is to provide the benefits of cash, withoutthe need to trust a govenment issuing authority. However, cash is a completelyanonymous payment system: An external observer cannot work out how ‘coins’or ‘notes’ pass through the system from one person to another. In addition an ex-ternal observser cannot observe the sizes of payments being made, or even if apayment between two people has occured. BitCoin only provides a limited form of anonymity. The identities of indivudals arehidden behind (hashes of) public keys, but the amount transferred between suchpublic keys is completely in the clear. The transaction graph is completely publicwhich means that analysis can be applied to the graph to determine how moneyflows through the system, thus limiting the level of anonymity actually provided[RS13, RS14]. One way of adding additional privacy into the BitCoin network is touse techniques such as zero-knowledge proofs (which we will come to later). AltCoins: As is clear from the above discussion there can be many forms of dig-ital currency; i.e. BitCoin is only an example (although the most famous). As we al-luded to when discussing non-provisioned blockchains there is behind every suchblockchain a form of digital currency. Thus each application could result in the in-troduction of a new form of digital currency. These ‘alternatives’ to BitCoin arecollectively called AltCoins. The most famous of these are BitCoin and Ethereum,but there are well over one hundred such AltCoins. The different AltCoins can be traded with each other on so-called digital exchanges,where they can also be converted into fiat currencies such as dollars or euros. Thetotal value of each digital currency when expressed in terms of dollars is called its market capitalization. At the time of writing the top five coins (in terms of marketcapitalizations), their ticker symbols, the price per single coin and the total marketcapitilizations are:  Coin Symbol Price Market Cap.  BitCoin BTC $18,115 $336,809,471,651 Ethereum ETH $551.47 $62,711,339,782  XRP XRP $0.62 $28,330,798,428 Tether USDT $1.00 $19,131,222,283  BitCoin Cash BCH $280.55 $5,226,206,168 Tether is slighly different from the other digital currencies as it is a so-called sta- ble coin. The value of each Tether is always claimed to be one dollar. The idea is  16  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  that each Tether in circulation is actually backed up by one dollars worth of as-sets being held by the organizing company, Tether Limited. Although in 2019 thecompanies lawyer filed at the Supreme Court of New York1 that one Tether onlycorresponded to $0.74. Centrally Banked Digital Currencies: DLTs can also be used in traditional bank-ing applications. Within each currency zone it is standard for the amount of moneytransferred between banks, to be recorded by the central bank on a system calledRTGS (Real Time Gross Settlement). Thus when a customer transfers an amountfrom one account in one bank to another account in another bank there is a pay-ment made between the issuing and the acquiring bank on the RTGS (actuallymany such payments are usually put together, leading to the ‘delay’ customerssee when performing interbank transfers). Such RTGS systems are a natural candidate for a provisioned DLT. The centralbank acts as the provisioning authority, with the tier-one banks (a.k.a. clearingbanks) providing validator nodes for the DLT network. Such a proposal, calledRSCoin, was presented in [DM16]. A key problem here is that whilst this is a pri-vate blockchain the validators are competitors and thus one needs to ensure thatthe data on the chain placed by one bank is not readable by another. For exam-ple we do not wish bank C to see a payment made between banks A and B, as thesize or occurance of such a payment is confidential information which should onlybe known to A, B, and the regulator. Again such problems can be solved via zero-knowledge proofs. Financing and Securing Global Supply Chains: Trading of physical items canalso be recorded, tracked, and paid for using DLT technology. Examples in thisspace include We-Trade2 which provides a trade finance platform. The companyhas been set up as a joint venture between 12 European banks and IBM. Manag-ing a global supply chain can also be relatively complex, and something which canutilize DLTs. To address this space IBM and Maersk have developed the Trade-Lens3 platform to enable secure data exchange in the supply chain. In a similar vein, but focused on the energy sector, a company called EnergyWeb4does a supply chain DLT in the electricity market. Their blockchain system bringstogether utilities, grid operators, as well as large energy consumers. In the oil andgas markets Chevron, ExxonMobil and others have teamed up to create a DLTsolution called BlockChain For Energy5. For luxury and high value goods such as gemstones, paintings, fine wines etc. onecan store the provenance and the ownership of items using a DLT; for exampleEverLedger6 provides systems in this space. Of particular interest is the fact thatone can store the ‘atomic fingerprint’ of a diamond on the blockchain in order toidentify it and track its provenance. Provenance not only applies to high value items; companies are also interested indetermining the provenance of raw materials. For example in the food industryIBM, via its Food-Trust project7, has been working with companies (supermarketssuch as Walmart, producers such as Nestlé and Carrefour, as well as wholesalers)to ensure the provence of the food supply chain.  1https://www.scribd.com/document/408190972/Stuart-Hoegner-Affidavit-4-302https://we-trade.com/3https://www.tradelens.com/4https://www.energyweb.org/about/what-we-do/5https://www.blockchainforenergy.net/6https://www.everledger.io/7https://www.ibm.com/nl-en/blockchain/solutions/food-trust  17  https://www.scribd.com/document/408190972/Stuart-Hoegner-Affidavit-4-30 https://we-trade.com/ https://www.tradelens.com/ https://www.energyweb.org/about/what-we-do/ https://www.blockchainforenergy.net/ https://www.everledger.io/ https://www.ibm.com/nl-en/blockchain/solutions/food-trust  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  Provenance is also a key problem in the pharmaceutical sector. IBM, KPMG, Wal-mart, and Merck are using DLTs to attempt to secure the supply chain for drugs.This follows the introduction of the Drug Supply Chain Security Act in the UnitedStates. The companies have formed the Pharmaceutical Utility Network8. Other Applications: A companies most valuable asset is often said to be theirstaff. The large US based Workday company9, which runs cloud based financialand human resource operations for companies, launched in 2019 a DLT to en-able digital credentials in the HR (Human Resources) space. Enabling for examplea health care professional to prove they have the requisite skill sets to differentemployers with a single trusted source of record. A DLT provides a mechanism to record who owns what, and the transfer of suchitems between entities. Thus applications in finance can include the register of se-curities, a companies share register, ownership of bonds, valuable items and soon. Other applications can involve storage and transfer of KYC (Know Your Cus-tomer) data; for example institutions can share KYC data meaning an individualdoes not have to prove who they are to each institution they deal with in turn.There are various companies in this space, such as DTCC10 and SETL11. The ability to store and record data, as well as provide a financial incentive via adigital coin, can allow interesting use-cases to be developed. For example, in Bel-gium one company Buck-E12 uses DLT to provide a digital coin reward to childrenfor cycling to school. This can also be extended to incentivize employees to cycleto work. Other applications include utilizing cryptocurrencies with computer gameenvironments. In this space Forte13 aims to develop a platform to make it easierto build games upon such a Distributed Ledger. Another company in this space isDapperLabs14, probably most famous for its CryptoKitties application. Rarible15and Foundation16 enable the storage and selling of so-called digital collectiblesand digital art, so called NFT’s (Non-Fungible Tokens). The ability to transfer and store small amounts of ‘value’, has led a number ofcompanies to investigate the usase of DLT in the music industry; as a way of dis-tributing royalties to musicians. Examples here include Opus, Mediachain, Musi-clife and eMusic17.  8https://tinyurl.com/yycqjrhz9https://www.workday.com/10https://www.dtcc.com/blockchain11https://setl.io12https://buck-e.be13https://www.forte.io/14https://www.dapperlabs.com/15https://rarible.com/16https://foundation.app/17https://tinyurl.com/yckl6sct  18  https://tinyurl.com/yycqjrhz https://www.workday.com/ https://www.dtcc.com/blockchain https://setl.io https://buck-e.be https://www.forte.io/ https://www.dapperlabs.com/ https://rarible.com/ https://foundation.app/ https://tinyurl.com/yckl6sct  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  4 SMART CONTRACTS At the core of many DLT applications, i.e. applications which run ontop of the baseDLT technology, is something called a Smart Contract. Smart Contracts were ini-tially made popular in by the Ethereum blockchain (which is considered the sec-ond largest cryptocurrency after BitCoin). A smart contract is a piece of computercode which will automatically execute ‘on the blockchain’ once certain conditionshave been met. For example, one could use a smart contract to act as a form of money escrowsystem: A user A pays some money to user B, but user B is not allowed to spendthat money until a third user C gives their approval. If the approval is not providedwithin a given time window the initial payment from A to B is reversed. The pointis that once entered into, the smart contract will be automatically executed by thevalidators. One application which was tested in this space in 2017 by Atlas Insur-ance from Malta and Aza in France was a travel insurance smart contract, whichautomatically paid out if a flight was cancelled or delayed1. Smart contracts can also be used to transfer data between entities securely undercontrol of the data owner. See EncryptGen2 for an example of this in the sharingof DNA data for medical applications.  1https://www.axa.com/en/magazine/axa-goes-blockchain-with-fizzy2https://encrypgen.com/  19  https://www.axa.com/en/magazine/axa-goes-blockchain-with-fizzy https://encrypgen.com/  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  5 SECURING SECRET KEYS In a blockchain in which transactions signal ownership of some resource, for ex-ample ownership of the underlying cryptocurrency or title to some external objectof worth (a valuable painting or a stock in a company) it is vital that the secret keyused to sign the transactions which transfer ownership is kept secure. Loss of thesecret key becomes equivalent with loss of the resource or asset. There have beenmany stories in the press in relation to key loss meaning people loosing access tomillions of dollars worth of assets. There are four distinct methodologies which can be used to secure the storageof such keys, all of which are deployed in various DLTs around the world. Thesedistinct methodologies are not mutually exclusive. Indeed one finds applicationswhich combine a number of the following methodologies together (for exampleby combining MPC and HSMs, or secret sharing and Multi-Sigs). Hardware Security Module: A Hardware Security Module (HSM) is the tradi-tional method to secure cryptographic keys used in large enterprises such asbanks. These are special purpose computers dedicated to cryptographic opera-tions which have gone through a rigourous certification procedure. They are hard-ened against tampering, and have strong control on how keys can be accessedwhich are stored within the HSM. They are most suitable for large corporate usagebeing relatively expensive, indeed most financial institutions will already have alarge HSM footprint in house. A major disadvantage of HSM technology is that it is less flexible than other so-lutions. Unlike software solutions HSMs are not ‘elastic’, meaning one needs tomanage and purchase enough HSMs to cope with ones expected peak load. In ad-dition for organizations with large amounts of HSMs, management becomes a bigissue. Especially when one needs to deal with a heterogenous real estate, whereeach HSM supports different cryptographic algorithm choices due to the age ofthe equipement. Multi-Sig: A Multi-Sig is a methodology which associated to each asset a set ofpublic keys. Each associated private key is assigned to a given entity and an accessstructure is defined. When a transactions associated to this asset is desired tobe executed, something akin to a Smart Contract is performed. The asset is onlyoperated upon if enough digital signatures are collected which satisfy the accessstructure. For example one could have three distinct public keys and require atleast two to authorize a given transaction. Thus if one key is compromised or lost,control is still maintained of the underlying asset. The advantage of Multi-Sig’s is that they utilize traditional digital signature tech-nology; the signer needs to simply execute a traditional signing operation. Thedisadvantage is that processing the verification is more complex, i.e. one needs tobe aware of the underlying access structure and wait for the requisite number ofsignatures to come in. Another disadvantage is that the access structure is public.This access structure may itself be a corporate secret; as it may reveal the internalapprovals process for an operation which one may not want to leak to the world.  20  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  Secret Sharing: A classic way to store a secret so as to enable both recoveryin case of one computer being lost/damaged and also to avoid theft of a key isto use secret sharing. In this method the key holder splits their key into shares nusing a threshold secret sharing scheme (such as Shamir) with threshold t. The ndifferent shares are then stored in n different places. The advantage then is thatan attacker needs to break into t + 1 places to recover the key, and the legitimateuser is protected in that they can recover their key as long as they have access to t+ 1 of the storage locations. A disadvantage of using secret sharing on its own is that to use the key the sharesneed to be brought back together into one location. This presents a single pointof failure location, in that during key usage the secret is available to a potentialattack. Multi-Party Computation: One can address the issue of needing to bring theshares in a secret sharing based solution into one location to produce a signatureby using MPC/Threshold Cryptography. Using this technology one can perform thesigning operation without bringing the shares back together. This enables a nor-mal digital signature to be produced, using whatever access structure is desiredby the signer; and indeed the access structure can be dynamically obliviously tothe verifier. In some sense MPC solutions are the opposite of Multi-Sig solutions. In an MPCsolution the signing operation is more complex, but the verification is as for a nor-mal signature. In an MPC solution, unlike a Multi-Sig solution, one does not revealthe access structure needed to authorise a signature. The use of MPC and Thresh-old Cryptography in blockchain and other application areas has resulted in a NISTproject to investigate the space for potential standardization1.  1https://csrc.nist.gov/projects/threshold-cryptography  21  https://csrc.nist.gov/projects/threshold-cryptography  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  6 ZERO-KNOWLEDGE PROOFS Whether recording data on a public blockchain, as in the case of BitCoin or Ethereum,or on a private blockchain, as in the case of an RTGS system, the data on the blockchainneeds to be secured. Just as one encrypts databases in a standard database appli-cation, one needs to also examine how data is encrypted when stored on a DLT.The problem then is that the validators need to validate the data on the blockchainwithout seeing it. The validators may need to execute a smart contract, make apayment between two entities etc, and this needs to be checked to be correct. Forexample the validator may need to check that entity X has a certain value in theiraccount before allowing that entity to spend it. This need to provide proofs that certain statements are true without revealing thespecific values which prove the statement to be true provides the massive interestin the blockchain community in zero-knowledge proofs. The applications havecreated an explosion of different Zero-Knowledge proof technologies. Which wewill now summarize. The statement to be proved is usually encoded as an arithmetic or binary circuit,or as a sequence of constraints in ‘language’ called R1CS. When below we talkabout ‘proof size’ or ‘time’ this is always a function of the complexity of the func-tion (i.e. the circuit size or the number of R1CS constraints). The reason for therebeing a multitude of different technologies is that the design space is quite large;with different applications requiring different trade-offs. We outline the main tradeoffs below:  • Proof size: A Zero-Knowledge Proof will need to be stored on the blockchain,so the validators can validate it. Thus proof size is an issue if one is inter-ested in minimizing the amount of data to be stored. • Prover Complexity: The proof has to be generated by the prover, whoholds the witness/secret data. Thus we may require that the prover can berun very efficiently. • Verifier Complexity: The blockchain validators, and anyone else interestedin the validity of a proof, will need to check the proof at some point. Indeeda proof is only ever created once, but could be verified many times. Thus thetime needed to run the verification procedure could be important in manycase. • Trusted Setup: Some proof technologies require a form of trusted setup,namely the users of the Zero-Knowledge proof system need to trust someentity to set up some parameters at the very beginning.  As of today there are three different, but related, technoligies to provide the nec-essary Zero-Knowledge Proofs on a blockchain, these are SNARKS, BulletProofsand STARKS. SNARK: A SNARK is a Succinct Non-Interactive Argument of Knowledge. Theywere introduced by Groth in 2010 [Gro10], and provide the best in class perfor-mance in relation to proof size and verifier complexity. They are reasonably fastfor proof generation, but their main drawback is that they require a trusted setup  22  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  to be utilized within a system. The trusted setup is also dependent on the state-ment being proved. BulletProofs: Introduced in two works, [BCC+16] and [BBB+18], of which thelatter gave the name BulletProofs, BulletProofs are proofs whose main advan-tage is that they no longer require trusted setups which are statement specific. Onthe minus side their proof size is not as good as that achieved in SNARKs, and theprover and verifier time are also not that efficient. STARK: A STARK is a Succinct Transparent Argument of Knowledge, and theywere introduced by Eli-Ben Sasson et al in 2017 [BBHR19], with concurrent workin a similar vien leading to a system called Ligero [AHIV17]. They produce proofswhich are bigger than both SNARKs and BulletProofs. They provide the best inclass performance for the prover, but the verification is usually slower than thatfor SNARKs. Unlike SNARKs or BulletProofs they are require no trusted setup.Another benefit of STARKs is that their construction can be made secure againstquantum computers.  6.1 APPLICATIONS OF ZERO-KNOWLEDGE PROOFS It has already been remarked that BitCoin payments are not totally anonymous.Payment destination and source addresses are not protected, they are only ‘tok-enized’ and the payment amounts are kept in the clear. One method to add trueanonymity is to take a set of transactions and then pass them through a ‘Mixer’. AMixer is a technology used in many applications to provide anonymity, by break-ing the link between the source of a message and the destination. It is used insome electronic voting protocols to break the link between a voter and their vote,or in messaging systems such as Tor to break the link between a sender and a re-ceiver. In the context of a cryptocurrency a mixer is implemented by having a single trans-action which takes a series of inputs from a set of source addresses (or walletidentifiers) and then outputing the values to a series of destination addresses,whilst breaking the linkage between the transactions. This needs to be done ina way such that it is clear that it has been done correctly, without revealing thelink. This is where Zero-Knowledge Proofs are used, to ensure the mix has beenperformed correctly. The classic example of this is the ZeroCash/Zcash protocolfrom [BCG+14], which uses SNARKS. A BulletProof based solution called Zether [BAZB20] has been added to Ethereum,providing much the same anonymity requirements. An extension of Zether is usedwithin JP Morgan Chase’s JPM Coin implementation1.  6.2 REMOVING TRUSTED SETUPS As remarked above both SNARKs and BulletProofs require a form of trusted setup.As a simple example consider the following problem, a trusted setup might re-quire the generation of two group elements P and Q on an elliptic curve for whichthe discrete logarithm is unknown between P and Q. An insecure way of creating P and Q would be for a trusted party to generate P at random and then create Qby setting Q = [x]P for some random value of x known only to the trusted thirdparty. However, this means the trusted third party knows the discrete logarithm x and could therefore mount attacks on the protocol2. A simple secure way of  1https://tinyurl.com/y3y2y3al2Indeed this is the idea behind the famous backdoor in the NIST DUEL-EC-DRBG ran-dom number generator.  23  https://tinyurl.com/y3y2y3al  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  creating P and Q would be to hash a known string to the points P and Q using atrusted cryptographic hash-function. If the known string is published, then thereis no way a party can learn the discrete logarithm (without being able to invert thehash hash function). This simple example shows the problem with needing trusted setups. Howeverfor systems using SNARKs and BulletProofs, the trusted setup is more complex.However, we can perform this trusted setup using another form of cryptographictechnology called Multi-Party Compuation (MPC). MPC allows a set of mutually dis-trusting parties to compute an arbitrary function on their private data. Using MPCone can create a so-called ceremony in which a set of parties performs the trustedsetup, but in a manner in which no one party learns the ‘secrets’ behind the setup(the x in the simple example above). As long as the users of the system trust thatat least one of the parties in the MPC ceremony is honest, then the users can trustthe output of the trusted setup. This strategy was most famously implemented in the setup for the Zcash system.The first such ceremony was performed in October 2016, with a second ceremonyin August 2018 for the Sapling upgrade to the network. The underlying protocol isdescribed in [BGG19].  24  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  7 CONCLUSIONS This report inaugurates a series of security studies on the topic of Crypto Assets,Digital Currencies and Distributed Ledger Technologies. It presents the variousaspects of the technology behind DLTs and their application. From the prism of the creation of the Bitcoin, it discusses the various cryptographicprimitives needed to provide a working system; viz. digital signatures, Merkletrees, hash functions, zero-knowledge proofs. Important topics addressed in-clude how validators solve the consensus problem. What is the basic problemof Byzantine agreement and what approaches are available to solve this in bothprovisioned and non-provisioned block chains. It describes what a blockchain isand how an append only database maps onto standard financial systems suchas ledgers, making blockchain a natural fit in financial applications. Moreover, itexplains how data is placed on a block chain, the techniques that are used to vali-date state transitions on the blockchain and how Zero-Knowledge techniques canbe used to solve these problems, while maintaining data secrecy. Perhaps more importantly, this study poses 5 unanswered questions that deci-sion makers and application designers need to consider before jumping on theblockchain bandwagon: Q Does your application require data which is stored in an immutable form,i.e. would an append only database be suitable? Q Does your application require data to be stored in a distributed/decentral-ized manner for data loss prevention, security, or performance reasons? Q Is your application of a DLT suitable for a provisioned or non-provisionedmethodology for implementing the validators? Q If using a non-provisioned blockchain, what methodology for consensus willbe utilized? Q Irrespective of your method of obtaining Byzantine Agreement, how will val-idators be rewarded (resp. penalised) for ‘good’ (resp. bad) behaviour?  No single answer can be provided, for each application and system will bear itsown intricacies. But the inability to provide a clear answer to them, should indi-cate to decision makers that perhaps using a blockchain is not the best course ofaction.  25  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  BIBLIOGRAPHY [AHIV17] Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkita-subramaniam. Ligero: Lightweight sublinear arguments without a trustedsetup. pages 2087–2104, 2017. [BAZB20] Benedikt Bünz, Shashank Agrawal, Mahdi Zamani, and Dan Boneh.Zether: Towards privacy in a smart contract world. pages 423–443, 2020. [BBB+18] Benedikt Bünz, Jonathan Bootle, Dan Boneh, Andrew Poelstra, PieterWuille, and Greg Maxwell. Bulletproofs: Short proofs for confidentialtransactions and more. pages 315–334, 2018. [BBHR19] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. Scal-able zero knowledge with no trusted setup. pages 701–732, 2019. [BCC+16] Jonathan Bootle, Andrea Cerulli, Pyrros Chaidos, Jens Groth, andChristophe Petit. Efficient zero-knowledge arguments for arithmetic cir-cuits in the discrete log setting. pages 327–357, 2016. [BCG+14] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green,Ian Miers, Eran Tromer, and Madars Virza. Zerocash: Decentralizedanonymous payments from bitcoin. pages 459–474, 2014. [BGG19] Sean Bowe, Ariel Gabizon, and Matthew D. Green. A multi-party protocolfor constructing the public parameters of the pinocchio zk-SNARK. pages64–77, 2019. [BGW88] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. Completenesstheorems for non-cryptographic fault-tolerant distributed computation(extended abstract). pages 1–10, 1988. [CCD88] David Chaum, Claude Crépeau, and Ivan Damgård. Multiparty uncondi-tionally secure protocols (extended abstract). pages 11–19, 1988. [CGR11] Christian Cachin, Rachid Guerraoui, and Luís E. T. Rodrigues. Introduction  to Reliable and Secure Distributed Programming (2. ed.). Springer, 2011. [Cha82] David Chaum. Blind signatures for untraceable payments. pages 199–203, 1982. [Des94] Yvo Desmedt. Threshold cryptography. European Transactions on Telecom-  munications, 5(4):449–457, July/August 1994. [DH76] Whitfield Diffie and Martin E. Hellman. New directions in cryptography.22(6):644–654, 1976. [DM16] George Danezis and Sarah Meiklejohn. Centrally banked cryptocurren-cies. 2016. [DN93] Cynthia Dwork and Moni Naor. Pricing via processing or combatting junkmail. pages 139–147, 1993. [ES14] Ittay Eyal and Emin Gün Sirer. Majority is not enough: Bitcoin mining isvulnerable. pages 436–454, 2014. [GMR85] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. The knowledgecomplexity of interactive proof-systems (extended abstract). pages 291–304, 1985.  26  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  [Gro10] Jens Groth. Short non-interactive zero-knowledge proofs. pages 341–358,2010. [HS91] Stuart Haber and W. Scott Stornetta. How to time-stamp a digital docu-ment. pages 437–455, 1991. [JJ99] Markus Jakobsson and Ari Juels. Proofs of work and bread pudding proto-cols. In Bart Preneel, editor, Secure Information Networks: Communications  and Multimedia Security, IFIP TC6/TC11 Joint Working Conference on Com- munications and Multimedia Security (CMS ’99), September 20-21, 1999, Leu- ven, Belgium, volume 152 of IFIP Conference Proceedings, pages 258–272.Kluwer, 1999.  [KT18] Max J. Krause and Thabet Tolaymat. Quantification of energy and carboncosts for mining cryptocurrencies. Nature Sustainability, 1:711–718, 2018. [LSP82] Leslie Lamport, Robert E. Shostak, and Marshall C. Pease. The byzantinegenerals problem. ACM Trans. Program. Lang. Syst., 4(3):382–401, 1982. [Mer79] Ralph Merkle. Method of providing digital signatures. US PatentUS4309569A, 1979. [Nak08] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system. Web docu-ment., 2008. [NIS12] NIST Special Publication 180-4. Secure hash standard (SHS). NationalInstitute of Standards and Technology, 2012. [NIS13] NIST Special Publication 186-4. Digital signature standard (DSS). NationalInstitute of Standards and Technology, 2013. [NRS20] Kevin Alarcón Negy, Peter R. Rizun, and Emin Gün Sirer. Selfish miningre-examined. pages 61–78, 2020. [RB89] Tal Rabin and Michael Ben-Or. Verifiable secret sharing and multipartyprotocols with honest majority (extended abstract). pages 73–85, 1989. [RS13] Dorit Ron and Adi Shamir. Quantitative analysis of the full Bitcoin transac-tion graph. pages 6–24, 2013. [RS14] Dorit Ron and Adi Shamir. How did dread pirate roberts acquire and pro-tect his bitcoin wealth? pages 3–15, 2014. [Sha79] Adi Shamir. How to share a secret. Communications of the ACM,22(11):612–613, November 1979. [SKG19] Christian Stoll, Lena Klaassen, and Ulrich Gallersdörfer. The carbon foot-print of BitCoin. Joule, 3:1647–1661, 2019. [Sta10] Standards for Efficient Cryptography Group (SECG). Sec 2: Recommendedelliptic curve domain parameters. http://www.secg.org/sec2-v2.pdf, 2010.Version 2.0. [Yao86] Andrew Chi-Chih Yao. How to generate and exchange secrets (extendedabstract). pages 162–167, 1986.  27  http://www.secg.org/sec2-v2.pdf  ABOUT ENISA The European Union Agency for Cybersecurity, ENISA, is the Union’s agency dedicated to achieving a high common level of cybersecurity across Europe. Established in 2004 and strengthened by the EU Cybersecurity Act, the European Union Agency for Cybersecurity contributes to EU cyber policy, enhances the trustworthiness of ICT products, services and processes with cybersecurity certification schemes, cooperates with Member States and EU bodies, and helps Europe prepare for the cyber challenges of tomorrow. Through knowl- edge sharing, capacity building and awareness raising, the Agency works together with its key stakeholders to strengthen trust in the connected economy, to boost resilience of the Union’s infrastructure, and, ultimately, to keep Europe’s society and citizens digitally secure. More information about ENISA and its work can be found here: www.enisa.europa.eu.  ISBN: 978-92-9204-467-1 DOI: 10.2824/035503  www.enisa.europa.eu  The Genesis Of Bitcoin  Hash Functions  Merkle Tree  Digital Signature  Secret Sharing  Byzantine Agreement  Electronic Cash  Zero-Knowledge  Time Stamps  Multi-Party Computation and Threshold Cryptography  Proof of Work  Distributed LedgerTechnologies and Bitcoin  The Word `Ledger'  The Word `Distributed'  The Words `Distributed Ledger Technology'  Provisioned Blockchains  Non-Provisioned Blockchains  Rewarding Validators  Applications  Smart Contracts  Securing Secret Keys  Zero-Knowledge Proofs  Applications of Zero-Knowledge Proofs  Removing Trusted Setups  Conclusions  Bibliography",
    "original document": "CRYPTO ASSETS An Introduction to Digital Currencies andDistributed Ledger Technologies  FEBRUARY 2021  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  ABOUT ENISA The European Union Agency for Cybersecurity, ENISA, is the Union’s agency ded-icated to achieving a high common level of cybersecurity across Europe. Estab-lished in 2004 and strengthened by the EU Cybersecurity Act, the European UnionAgency for Cybersecurity contributes to EU cyber policy, enhances the trustwor-thiness of ICT products, services and processes with cybersecurity certificationschemes, cooperates with Member States and EU bodies, and helps Europe pre-pare for the cyber challenges of tomorrow. Through knowledge sharing, capac-ity building and awareness raising, the Agency works together with its key stake-holders to strengthen trust in the connected economy, to boost resilience of theUnion’s infrastructure, and, ultimately, to keep Europe’s society and citizens digi-tally secure. For more information, visit www.enisa.europa.eu. CONTACT  For contacting the authors please use evangelos.rekleitis@enisa.europa.euFor media enquiries about this paper, please use press@enisa.europa.eu AUTHOR  Nigel Smart, Thynnus Limited EDITORS  Evangelos Rekleitis, ENISAAngeliki Aktypi, ENISAAthanasios Vasileios Grammatopoulos, ENISA LEGAL NOTICE  Notice must be taken that this publication represents the views and interpreta-tions of ENISA, unless stated otherwise. This publication should not be construedto be a legal action of ENISA or the ENISA bodies unless adopted pursuant to theRegulation (EU) No 2019/881. This publication does not necessarily representstate-of the-art and ENISA may update it from time to time. Third-party sourcesare quoted as appropriate. ENISA is not responsible for the content of the exter-nal sources including external websites referenced in this publication. This pub-lication is intended for information purposes only. It must be accessible free ofcharge. Neither ENISA nor any person acting on its behalf is responsible for theuse that might be made of the information contained in this publication. COPYRIGHT NOTICE  © European Union Agency for Cybersecurity (ENISA), 2020Reproduction is authorised provided the source is acknowledged. Copyright for the image on the cover: © ShutterstockFor any use or reproduction of photos or other material that is not under theENISA copyright, permission must be sought directly from the copyright holders.ISBN: 978-92-9204-467-1, DOI: 10.2824/035503  1  www.enisa.europa.eu evangelos.rekleitis@enisa.europa.eu press@enisa.europa.eu  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  EXECUTIVE SUMMARY The European Commission on the 24th September 2020 adopted a comprehen-sive package of legislative proposals for the regulation of crypto-assets, updat-ing relevant financial market rules 1, and is moving forward with creating a Pan-European blockchain regulatory sandbox facility to test innovative solutions andidentify obstacles that arise in using Distributed Ledger Technnologies (DLTs) inthe trading and post trading of securities. Crypto-assets may qualify as \"finan-cial instruments\", in which case they fall under the Markets in Financial Instru-ments Directive (e.g.: tokenised equities or tokenised bonds). But there are alsotypes that do not qualify as \"financial instruments\", such as utility tokens or pay-ment tokens, generally refered to as digital currencies. Further, digital currecieswhen based on DLTs, like the Blockchain, are usually called cryptocurrencies; asopposed to centralized digital currencies. These timely policy intiatives make evident that crypto-assets are a playground ofnot only technical, but also financial innovation that demands scrutiny in all its as-pects. With this first introductory study focusing on the rise of cryptocurrencies &DLT, the European Union Agency for CyberSecurity is launching a series of infor-mation security studies in the area of crypto-assets to support policy-makers andraise awareness on the arising security and data protection. The creation of BitCoin by Nakamoto [Nak08] in 2008 created a flurry of interest inso-called ‘digital currencies’. The basic ideas of a blockchain, a consensus mecha-nism, and operations on a public ledger have potentially wide application outsideof the narrow confines of creating a digital currency. The technological ideas behind such distributed ledger technologies go back toway before 2008, often to the 1970s. What digital ledger technologies do is bringvarious technical components such as digital signatures, cryptographic hash func-tions, Merkle-Trees, consensus mechanisms, zero-knowledge proofs, secret shar-ing, together into an interesting combination which can address a number of ap-plication needs. However, the hype behind such technologies understandably also creates unre-alistic expectations as to what problems the technology can solve. This has led toa common quote of ‘If you think your problem can be solved by blockchain, thenyou do not understand your problem’. This report aims to increase the under-standing of blockchain technologies. It aims to explain the underlying technicalconcepts and how they relate to each other. The goal is to explain the compo-nents, and illustrate their use by pointing to deployed instances where the ideasare utilized.  1Digital Finance Package: Commission sets out new, ambitious approach to encour-age responsible innovation to benefit consumers and businesses, https://ec.europa.eu/commission/presscorner/detail/en/IP_20_1684  2  https://ec.europa.eu/commission/presscorner/detail/en/IP_20_1684 https://ec.europa.eu/commission/presscorner/detail/en/IP_20_1684  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  CONTENTS 1 The Genesis Of Bitcoin 41.1 Hash Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41.2 Merkle Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41.3 Digital Signature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51.4 Secret Sharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61.5 Byzantine Agreement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61.6 Electronic Cash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61.7 Zero-Knowledge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71.8 Time Stamps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71.9 Multi-Party Computation and Threshold Cryptography . . . . . . . . . . 81.10 Proof of Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 2 Distributed Ledger  Technologies and Bitcoin 102.1 The Word ‘Ledger’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102.2 The Word ‘Distributed’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112.3 The Words ‘Distributed Ledger Technology’ . . . . . . . . . . . . . . . . . 112.4 Provisioned Blockchains . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122.5 Non-Provisioned Blockchains . . . . . . . . . . . . . . . . . . . . . . . . . 122.6 Rewarding Validators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 3 Applications 16  4 Smart Contracts 19  5 Securing Secret Keys 20  6 Zero-Knowledge Proofs 226.1 Applications of Zero-Knowledge Proofs . . . . . . . . . . . . . . . . . . . 236.2 Removing Trusted Setups . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 7 Conclusions 25  Bibliography 26  3  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  1 THE GENESIS OF BITCOIN To understand how Bitcoin came about, and the resulting different forms of dis-tributed ledger technology, one needs to see the genesis of the ideas as a con-tinuum. Distributed Ledger Technologies (DLT) are at their heart simply a novelcombination of existing simpler technologies. In this first section we aim to recapon these technologies and give their historical genesis.  1.1 HASH FUNCTIONS The most important underlying cryptographic function in a DLT is a cryptographichash function. These were introduced in the seminal paper of Diffie and Hellman[DH76] in 1976 as a means to construct digital signatures. A cryptographic hashfunction is a function with an (essentially) unlimited domain, but a fixed finite co-domain  H : {0, 1}∗ −→ {0, 1}h.  The length of bitstrings in the co-domain h is called the hash-length. Hash func-tions are used extensively in Computer Science, and generally they must ‘look like’a random function. However secure cryptographic hash functions take this con-cept of looking random further and require three major security properties: 1. The hash function should be pre-image resistant – Given an output value  y it is computationally infeasible to find a matching input value x such that y = H(x). Thus it is said to be hard to solve the pre-image problem.  2. The hash function should be collision resistant – It is hard to find twovalues x and x′ in the input’s domain which map to the same output value,i.e. it is hard to find x and x′ such that H(x) = H(x′). Thus it is said to behard to find collisions in the hash function. 3. The hash function should be second pre-image resistant – Given an in-put/ouput pair (x, y) such that y = H(x) it is hard to find another x′, with  x′ 6= x, such that H(x′) = y. Thus it is said to be hard to solve the secondpre-image problem. Modern secure cryptographic hash functions - such as the SHA-2 and SHA-3 fam-ilies [NIS12] - are usually used with a hash-length that satisfy h ≥ 256 to providestrong security.  1.2 MERKLE TREE Invented in 1979 [Mer79], Merkle Trees enable a large amount of data to be hashedinto a small key, whilst at the same time allowing a short proof that a given dataitem has been included within the final hash value. Consider the example in Fig-ure 1.1, the value h00 is obtained by hashingm000 andm001, i.e. h00 = H(m000‖m001).The value h0 is obtained by hashing h00 and h01, i.e. h0 = H(h00‖h01). Whilst thefinal value h (known as Merkle Tree root) is obtained by hashing h0 and h1, i.e. h = H(h0‖h1).  4  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  h  h0  h00  m000 m001  h01  m010 m011  h1  h10  m100 m101  h11  m110 m111  Figure 1.1: Merkle Tree of Depth d = 4  In this Merkle Tree we have stored the eight valuesm000, . . . ,m111, but we pub-lish a single value h, which authenticates all eight values at once. To prove that adata itemm100, held at a leaf node, is authenticated by the root node h, the proverneeds to reveal the path of hashes required to reproduce h givenm100. Thus toauthenticatem100 in our example one reveals the values (m101, h11, h0), since h = H ( h0 ‖ H ( H (m100 ‖m101 ) ‖ h11 ) )  The key property is that a tree of depth d allows us to store 2d values on the leaves,whilst requiring us to reveal only d− 1 values to show that a data item has been in-cluded in the tree.  1.3 DIGITAL SIGNATURE Digital signatures were also introduced in the famous paper of Diffie and Hell-man [DH76]. They provide a means for a signer (who holds a private key sk) toauthenticate a messagem, so that a verifier (who only holds the public key pk) canverify that the signer did indeed ‘sign’ the messagem with their correspondingprivate key. Formally we have three algorithms (KeyGen,Sign,Verify) such that  • KeyGen : Produces a public/private key pair (pk, sk)← KeyGen(). • Sign : Generates a signature σ ← Sign(sk,m). • Verify : Verifies a signature on a message Verify(pk, σ,m) ∈ {0, 1}.  We require that valid sigantures verify, i.e. ∀(pk, sk)← KeyGen(), ∀m, Verify(pk,Sign(sk,m),m) = 1,  and that an adversary, who does not know sk, is unable to construct a valid signa-ture σ, on a messagem for the public key pk. For the whole system to be secure, it has to be computational infeasible for anadversary who does not know the private key sk to generate a valid signature σon a messagem and a public key pk. Note that, as the name suggests, the privatekey sk should be kept secret by the signer while the public key pk can be publiclyknown by everyone. Over the years many digital signature schemes have been proposed. The pre-ferred signature scheme in deployed applications at the time of writing is the EC-DSA algorithm [NIS13], whose genesis goes back to the mid 1980’s. The digital sig-nature scheme used in Bitcoin is the EC-DSA algorithm specialised for use with theelliptic curve secp256k1 from [Sta10].  5  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  1.4 SECRET SHARING A secret sharing scheme is a methodology to enable a secret, lets call this s, to beshared amongst a set of parties. This is done in such a way that if a certain set ofparties come together (call a qualified set) then the secret can be recovered, but ifan unqualified set come together then nothing can be learnt about the secret. Theset of all qualified sets is called an access structure. Various secret sharing schemes exist, and their constructions depends on the ac-cess structure. The simplest scheme is the full threshold scheme, which enablesone to share a secret amongst n players in such a way that the only qualified set isthe complete set of n players. To share a secret x ∈ Fp in this manner we write  s = s1 + . . .+ sn  and give si to player i. The most famous non trivial secret sharing scheme is that of Shamir [Sha79] whichsupports so-called threshold access structures (n, t). This allows a set of n partiesto share a secret s so that one requires t + 1 of the parties to come together so asto recover the secret. The construction is very simple, one selects a random poly-nomial F (X) of degree t over Fp such that F (0) = s. Then party i ∈ [1, . . . , N ] isgiven the value si = F (i). The recovery of the secret by t + 1 parties is performedby Lagrange interpolation.  1.5 BYZANTINE AGREEMENT The Byzantine Generals problem, or the problem of Byzantine Agreement, is aclassic problem in distributed systems going back to 1982 [LSP82]. The basic prob-lem is for a set of n entities to agree on a given value. If a proportion t of the enti-ties are faulty (and actively so, a so-called Byzantine fault) then it is impossible tocreate consensus if t ≥ n/3. A standard (classic) protocol by Lamport et al usingdigital signatures shows that agreement can be reached when t < n/3. See thebook [CGR11] for a modern and readable introduction to various protocols in thisspace. The problem was dubbed the Byzantine Generals problem by Lamport due to theanalogy with a story of a group of generals trying to attack a city. If all the generalsagree on attacking then the attack will succeed, if they all agree on retreating thenthey will not lose, however if there is disagreement then their army will be routed.The problem becomes complicated in the case where treacherous generals arehidden among the generals and they wish the army to be routed, and maybe al-ter, forge, or delete messages sent from one general to another.  1.6 ELECTRONIC CASH The idea of creating a form of electronic money is older than the Internet. Themost famous early example is a method of Chaum [Cha82] from 1982, whicheventually led to the DigiCash project. Physical currency has an anonymity prop-erty that standard digital payment systems do not. A bank can trace who sentwhat to whom with digital payments, but one cannot trace bank notes as theypass through the economy. The standard model of a financial payment involves four entities, the customer(who is paying for something), the merchant (who is receiving the payment), theissuer (the bank of the customer) and the acquirer (the bank of the merchant). Ina traditional digital payment the payment is performed between the issuer andthe acquirer, thus who paid what to whom and how much is visible to the banking  6  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  system. Cash transactions on the other hand happen between the customer andthe merchant, with only the withdrawal and the final desposit being visible to thebanking system. The precise link between the withdrawal and the deposit is beinghidden. Electronic Cash systems aim to provide the anonymity of physical cash in this re-gards. Chaum’s system utilized blind signature schemes (a form of digital signa-ture in which the signer does not know what they are signing) in order to createa form of digital cash. The DigiCash system still maintained the concept of a with-drawal and deposit from a ‘bank’, but the tracing of the withdrawn money throughthe system was anonymized. A key problem with electronic cash, which DigiCash’s complexity solved, is that ofpreventing double spending. With physical cash this prevented by being unableto copy a banknote or coin easily. In the electronic world copying bits is easy, thusavoiding double spending requires a different solution.  1.7 ZERO-KNOWLEDGE One can consider a digital signature scheme as a proof that the signer knowssome secret sk associated to a public key and a message. The interesting thingabout the digital signature is that knowledge of the signature reveals no knowl-edge about the secret key, but the fact that it was used to produce the signa-ture. This is an example of a more general concept called a zero-knowledge proof,which was introduced by Goldwasser et al in [GMR85]. Suppose you are given a statement S, along with a witness w that the statement istrue. For example, this could be the statement that your bank account has morethan 100 euros in it; with the witness w being the exact value of money in your ac-count. A zero-knowledge proof is a means to prove to a third party that the state-ment is indeed true, without revealing any information about the witness. Thesecurity properties we require of a zero-knowledge proof are:  • Correctness: An honest prover can always convince a verifier that the state-ment is true if the prover holds a valid witness. • Soundness: A dishonest prover finds it computationally hard to convince averifier that a statement is true if the prover does not hold a valid witness. • Zero-Knowledge: The proof itself reveals no information about the witness,but the fact that it exists and is known to the prover.  The advent of DLT technologies has created a huge new interest in Zero-Knowledgeproof techniques, and their application, with many advances having been madeover the last few years. We will discuss some of these below.  1.8 TIME STAMPS The idea of using a ‘blockchain’, namely a sequence of hashed values, with eachhashed value linked to the previous one by inclusion, goes back to 1990 and amethod of time stamping of documents presented in [HS91]. See Figure 1.2 foran example. At a given time interval a series of documents, in this example called Tx0, . . . ,Tx3 are hashed via a Merkle Tree into a single root node TxRoot1. Thishash TxRoot1 along with a given timestamp value Timestmp1, a nonce Nonce1 andthe hash of the previous block’s hash PrecHash0 constructs one block of the chainthat can be hashed to generate the PrevHash1. The PrevHash1 hash will be used toconstruct the next block on the chain, and so on, thus the PrevHashi hashes are  7  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  used to link each block to the previous and next block. The sequence of linkedblocks at the top of the diagram is called a blockchain.  TxRoot1 PrevHash2 Timestmp2  TxRoot2 Nonce2  Hash01 Hash23 Hash0 Hash1 Hash2 Hash3 Tx0 Tx1 Tx2 Tx3  PrevHash1 Timestmp1  Nonce1  PrevHash0 Timestmp0  TxRoot0 Nonce0  Figure 1.2: Time stamping documents using a blockchain and Merkle Trees  1.9 MULTI-PARTY COMPUTATION AND THRESHOLD CRYP- TOGRAPHY  Multi-Party Computation (MPC) was developed in the 1980’s in a series of works[Yao86, Yao86, BGW88, CCD88, RB89]. The basic concept of MPC is that it allows aset of mutually distrusting parties to compute an arbitrary function of their data.For example it allows two companies to compute a function on their respectivecustomer databases, without revealing the customer details to each other. A closelyrelated concept is that of Threshold Cryptography [Des94] in which the function tobe computed is restricted to a cryptographic function on a secret key (for exam-ple the construction of a digital signature, or a decryption operation). In the lattercase the secret is distributed amongst the parties using a form of secret sharing. It was not until the last decade that the techniques for general MPC have advancedin order to enable useful calculations to be performed. The simpler case of Thresh-old Cryptography had earlier advances, but again for algorithms of interest (for ex-ample the EC-DSA signing algorithm using in Bitcoin) really efficient solutions haveonly become available in the last few years.  1.10 PROOF OF WORK Proofs of work were introduced in 1993 by Dwork and Naor [DN93] as a mecha-nism to prevent denial-of-service attacks and spam email. The term itself was in-troduced by Jakobsson and Juels in 1999 [JJ99]. At their heart they provide a cryp-tographic proof that one party (the prover) has expended a given amount of com-putational effort, which is then checked by the verifier. This is performed by theverifier setting the prover a cryptographic puzzle. A cryptographic puzzle is a com-putational problem which is easy to generate and verify, but for which the solutionis hard to compute. The typical example of a cryptographic puzzle are hash-based puzzles. Here thepuzzle generation is given by bit-string x, a difficulty parameter t and a hash func-tion H with hashlengh h ≥ t. The puzzle solver needs to find a value r such thatthe hash function H when evaluated on the bit-string x‖r produces an output  8  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  whose last t bits are all equal to zero. On the assumption that the hash functionis secure (both pre-image resistant and acts like a random function), the effortneeded by the prover to solve this problem is expected to be 2t hash functioncalls.  9  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  2 DISTRIBUTED LEDGERTECHNOLOGIES AND BITCOIN We now discuss how to put the above components into a system, and what usescould such a system have. It is perhaps more illustrative to now approach theproblem from the top, i.e. what problems are we trying to solve and then see howthe above technologies can be put together into solving this problem. At the endwe discuss the specific technology choices which the Bitcoin system makes. Weuse Bitcoin as an example as it is the most well known of all DLTs. We first pickapart the two words Distributed Ledger.  2.1 THE WORD ‘LEDGER’ A ledger, according to Wikipedia, is “the principal book or computer file for recording and totaling economic transactions measured in terms of a monetary unit of account by account type, with debits and credits in separate columns and a beginning mon- etary balance and ending monetary balance for each account.” In computer termsa ledger is nothing but a means to record data, thus in traditional banking sys-tems a ledger might be implemented by a database. Such a database may (forexample) record balances of individual accounts, but there is a subtle differencebetween such a database solution and a ledger. To change an account amount ina database one simply updates the record, whereas in the ledger we append thetransaction to the ledger and this itself records the transfer of funds. In particular a ledger only allows append operations, thus the state of the systemcan be rewound to see what it was in a previous time period. In a banking system,users get bank statements, which detail the indiviual transactions and these areusually kept for many years. Thus each transaction is appended to the datastore.Not only that but append is the only operation allowed. This means that priortransactions which have been added cannot be removed; in accounting termsthey can be reversed by adding a counter transaction but never removed. Thusone can consider a ledger to be an append only database, thus the database is im- mutable (i.e. one cannot change events in the past). Hence the first question onemust ask when considering DLT for a solution is Question 1 Does your application require data which is stored in an im- mutable form, i.e. would an append only database be suitable? The state of the ledger at time period i is assumed to be given by a state statei.The transactions, or state transitions, to move from time period i to time period i + 1, are given by Txi,j for j = 1, . . . , n. To obtain the new state statei+1 all the(consistent) transactions Txi,j are applied (where consistency will depend on theapplication). In a blockchain system, such as in Figure 1.2, one records these statetransitions by hashing the transactions together using a Merkle Tree, and then in-serting the Merkle root into the blockchain as in Figure 1.2. Assuming you knowthe initial state of the system, and all the transactions, the current hash of the ‘cur-rent block’ (if accepted) will validate all the transactions, and hence the currentstate. To avoid needing to rewind the entire system to the initial position one could also  10  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  store the current state and its hash within the current chain block; much like thevalue Timestmp is stored in the example in Figure 1.2.  2.2 THE WORD ‘DISTRIBUTED’ Having picked apart the word ledger, and shown how this can be implementedusing a blockchain, we now turn to the word ‘distributed’. Again taking a definitionfrom Wikipedia, a distributed system is a “system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another”. Distributed databases already exist, for example a company’s database may becloned across different locations to enable security against accidental data loss, orto provide performance improvements by locating data close to where it is used.However, a major problem in distributed systems is to ensure coordination andtrust between the different components. In the case of a distributed databaseone needs to ensure that read/write operations on one copy of the database re-sult in the same operations when they are applied to a copy in another location.Much of the complexity of modern corporate database systems comes from theneed to enable general read/write queries on the entire database in a way whichensures data consistency. Another reason one may want to apply distribution todata is that one does not trust a single data holder with the data. Thus we use dis-tribution to protect not only against accidental, but also malicious, data loss ormodification. Distribution of data is thus an important property, but only some applications re-quire it. Hence the second question one must ask when considering DLT for a so-lution is Question 2 Does your application require data to be stored in a distribut- ed/decentralized manner for data loss prevention, security, or perfor- mance reasons? However distributed solutions, whilst giving many benefits, come with increasedcost and complexity. The problem of ensuring consistency in the presence of net-work faults, be them accidential or malicious, is exactly the Byzantine Generalsproblem considered earlier.  2.3 THE WORDS ‘DISTRIBUTED LEDGER TECHNOLOGY’ Thus a distributed ledger technology is at its heart an append only database inwhich the database is stored in a distributed manner. Then on top of this technol-ogy one can build applications, namely you decide what data is to be stored in thedatabase and what a transaction to modify that database looks like. The combi-nation of distrubution and ledger can have considerable advantages over using atraditional database solution. The data storage technology can be simpler: Firstly, since we do not need to sup-port all database transititions, only the appending of transactions. Secondly, interms of obtaining consistency, we only need for the parties to agree on the trans-actions which needs to be added to move from one state to the next. Thirdly, asonly hashes of both the state and the transitions are stored on the ‘blockchain’ theentire blockchain could be store publicly. So once a decision for deploying a form of DLT has been made, the next ques-tion which arises is how one obtains the consensus. Consensus is provided by so-called validators (usually calledminers) in the Bitcoin ecosystem. These validatorsactually perform two tasks, the first task is to verify that the state transitions being  11  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  applied to the blockchain are correct and consistent, and secondly to ensure thatall parties agree on which transitions have been applied. There are a number of ways to implement the validators, correspoinding to whetherthe users/deployers of the blockchain are considered trusted parties or not. Thekey distinction is between so-called provisioned blockchains and non-provisionedblockchains. At a high-level, provisioned blockchains are used when one has anatural trusted authority who can regulate and appoint the validators. In provi-sioned blockchains one uses traditional protocols to obtain consensus. In a non-provisioned blockchain there is no authority who is trusted to set up the valida-tors. In this situation one requires different methods to obtain consensus basedon so-called crypto-economics models.  2.4 PROVISIONED BLOCKCHAINS In many commercial applications there is a natural set of semi-trusted validators.Consider a banking application within a given geographic region, the tier-onebanks (clearing banks) within that region are naturally trusted. Whilst one maynot trust an individual bank it is reasonable to assume that a majority will act cor-rectly. In a situation where one has a set of n parties in which one can trust that only t < n/3 of them will be motivated to act dishonestly one can deploy standard Byzan-tine Agreement protocols to validate the blockchain; i.e. to obtain consensus.Such protocols are highly efficient (compared to those used for non-provisionedDLTs), requiring only the passing of digital signatures between each party in asmall number of rounds. We refer to [CGR11] for an explanation of some of theseprotocols in various situations. This situation is called a provisioned blockchain as the set of semi-trusted val-idators provide the basic blockchain infrastructure for themselves (or others)to provide the applications upon them. A key aspect is that the validators for aprovisioned blockchain are appointed or approved by a regulatory central au-thority, called the provisioning authority. The validators are only trusted (as agroup) to provide the consensus mechanism, thus any data which is written tothe blockchain must still be protected if the validator is not supposed to see theraw data.  2.5 NON-PROVISIONED BLOCKCHAINS Sometimes, however, there are no natural semi-trusted parties to act as valida-tors, or such a (relatively small) semi-trusted set is deemed to be a single point offailure. In such situations one moves into the realm of non-provisioned blockchains.In this scenario any one is assumed to be able to elect to become a validator,and security against corrupt validators is provided by having a large number ofthem. However, this comes at the expense of needing an alternative mechanismto provide consensus. There are two popular mechanisms for the consensus to beachieved; Proof of Work and Proof of Stake. Proof of Work: In a Proof of Work system each validator competes to find a so-lution to a cryptographic puzzle, which depends on the next block to be added tothe blockchain. For example the puzzle is to find a hash value terminating with agiven number of zeros, where the input to the hash includes the hash of the nextblock. The first validator to solve the puzzle gets the reward of placing the nextblock onto the top of the blockchain, along with the associated solution to thepuzzle. This solution is propogated through the validation network and then oth-ers try to place more blocks ontop. Due to propogation delays different validators  12  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  could have different views of the current top of the blockchain. However, as thereis no point in validators trying to add blocks not at the current top, eventually aconsensus will emerge as the blocks just below the top. In Bitcoin this process is termed ‘mining’, and the assumption is that all blocks ata depth of six or below in the chain have been assumed to be permently commit-ted to the chain, as the effort needed for a different set of six blocks to eventuallybecome accepted is too great. The methodology works as long as the validatorshave an economic incentive to continue performing their task; we will return tothis below. As for a single miner the probability of solving the cryptographic puzzle before another miner is relative small, and the cost of mining is very large it is common forminers to ‘pool’ their mining capabilities. Such mining pools search for a solutionto the cryptographic puzzle, and when one member of the pool finds a solutionthe ‘rewards’ (see below) are distribued amongst the entire pool. Usually the poolask the miners to solve an easier version of the initial problem – for example byreducing the difficulty t – and share the prise based on each miner’s effort on theeasier problem. By solving the easier problem, by luck a miner will eventually alsosolve the real problem. The original Bitcoin paper [Nak08] argues that for an adversarial miner to haveenough power to overcome the network, and place his own preferred blocks ontothe top of the blockchain, he needs to control a majority of the mining network.This is the so-called 51% attack. However, in 2014 Eyal and Sirer [ES14] introducedthe concept of selfish mining which showed that an adversarial miner can obtainsome advantage when they get control of roughly 1/3 of the network (which wouldbe consistent with over Byzantine Agreement methodologies). See [NRS20] fora more recent analysis of selfish mining. At the time of writing the mining poolcalled F2Pool has about 16% of the mining capacity1, with the top three miningpools having around 1/3 of the capacity. As Proof of Work requires spending computational power the process of mining/-validating becomes expensive, both in terms of electricity and heat dispersal. Pro-fessional mining is performed using application-specific integrated circuit (ASIC)and is dominated by a small number of ‘big player’ mining pools. It is also incredi-ble damaging to the environment. An article from 2019 [SKG19] claims that Bitcoinmining accounts for 0.2% of all electricity consumption worldwide, and producesas much carbon dioxide as a metropolis the size of Kansas City (around 500,000inhabitants). Other research from 2018 [KT18] calculated that Bitcoin mining pro-duced, over a 30 month period, the equivalent of 3 to 13 million tonnes of carbondioxide. Proof of Stake: A Proof of Stake system aims to mitigate the environmental im-pact of Proof of Work systems. In such systems becoming a validator is open toanyone, thus one again does not adopt a central provisioning authority. The val-idators have some form of stored value (called their stake), often a certain amountof the underlying ‘cryptocurrency’. At a given time instance the network decides,via a distributed coin-flip, who the next validator will be. The probability that agiven validator is selected depends on various factors, for example it could be auniformly random selection, or from a distribution which depends on the per-cieved wealth of the validator, or their percieved trustfullness. Once the valdidator for the next block is selected, the validator creates a block ofdata from all parties wishing to add data, validates the data is correct and thenadds it to the top of the chain (along with their digital signature to say they per-formed the operation). Other parties can check that the added block is correct,  1https://www.blockchain.com/pools  13  https://www.blockchain.com/pools  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  and if something wrong is found then the validator has some of their ‘stake’ re-moved, a process called ‘slashing’. Thus validators who do not perform correctlyare given a penalty. To avoid validators stopping certain parties from adding datato the blockchain, or giving preferential service to others, the validator for eachblock is randomly selected. In both proof-of-work and proof-of-stake the correct behaviour of the validators isensured by applying to the self-interest of the validators. Each validator wants toobtain the rewards available to those who contribute to validating a block, and novalidator wants to be slashed. This appealing to selfish behaviour results in a formof economic incentive; with such modeling being dubbed crypto-economics. Thus we are led to our third and fourth questions Question 3 Is your application of a DLT suitable for a provisioned or non- provisioned methodology for implementing the validators? Question 4 If a non-provisioned blockchain, what methodology for con- sensus will be utilized?  2.6 REWARDING VALIDATORS All blockchains, whether provisioned or non-provisioned, rely on the validators toprovide a service. A key issue which needs to be addressed, leading to a new fieldof ‘crypto-economics’ is how one can incentivize the validators to provide the ser-vice. Even in a provisioned blokchain validators have an incentive to ‘free-load’ offthe work of others. One also has to protect the network against malicious valida-tors doing incorrect actions as a form of denial of service attack. There are various mechanisms to both reward and punish validators. We have al-ready discussed, in Proof of Stake blockchains, how the penalty of slashing can beapplied to a misbehaving validator. In addition if the selection of the next validatoris done via a randomized method which is skewed by how ‘trusted’ a validator is toperform their task correctly, then validators who wish to validate blocks will not bechosen if they continually act in damaging the blockchain. One way of rewarding validators used in almost all systems is that of ‘transactionfees’. Thus entities wishing to place data onto the blockchain, or use its function-ality, need to pay a transaction fee for the privalege. This transaction fee is thencharged by the validators who perform the actual validation. This could be theset of validators who complete the Byzantine Agreement protocol in the caseof provisioned blockchains, the validator who is chosen and successfully com-pletes the validation in a Proof of Stake blockchain, or the validator who solves thecryptographic puzzle in the Proof of Work blockchain. In provisioned blockchainstransaction fees are a natural methodology of rewarding validators and avoidingfreeloaders. This can also be user as a method to prioritize transactions. Trans-actions with higher transactions fees are selected first for validation – as verifiersare trying to maximize their profit – and eventually they are served faster by thenetwork. A second methodology is to ‘create’ more digital currency whilst validating blocks.Thus the total amount of value in the system (measured in terms of units of theunderlying ‘currency’) increases as more blocks are added to the blockchain. Thisassumes that the underlying digital currency will eventually be worth something inthe real world, and thus the digital currency can in some sense be either spent onsomething useful to the validators, or can be converted into fiat currency.  14  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  Bitcoin adopts a combination of transaction fees and money generation into its re-ward mechanism for validators. It also has an inbuilt anti-inflationary money con-trol mechanism, which means the total amount of Bitcoins which can ever be cre-ated by ‘mining’ is limited. Thus over time the validators will need to switch theirmain reward mechanism from mining new coins to transaction fees. Thus we come to our next question for anyone wishing to deploy a DLT Question 5 Irrespective of your method of obtaining Byzantine Agree- ment, how will validators be rewarded (resp. penalised) for ‘good’ (resp. bad) behaviour?  15  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  3 APPLICATIONS As remarked above there is a natural fit between DLT applications and finance; aledger is a standard mechanism for recording financial transactions and the re-ward mechanism needed for validators lends itself to some form of financial pay-ment system. BitCoin: The first system to deploy the above architecture for DLTs was obvi-ously BitCoin. This aims to be a completely decentralized digital currency with nocentral issuing bank. The idea of BitCoin is to provide the benefits of cash, withoutthe need to trust a govenment issuing authority. However, cash is a completelyanonymous payment system: An external observer cannot work out how ‘coins’or ‘notes’ pass through the system from one person to another. In addition an ex-ternal observser cannot observe the sizes of payments being made, or even if apayment between two people has occured. BitCoin only provides a limited form of anonymity. The identities of indivudals arehidden behind (hashes of) public keys, but the amount transferred between suchpublic keys is completely in the clear. The transaction graph is completely publicwhich means that analysis can be applied to the graph to determine how moneyflows through the system, thus limiting the level of anonymity actually provided[RS13, RS14]. One way of adding additional privacy into the BitCoin network is touse techniques such as zero-knowledge proofs (which we will come to later). AltCoins: As is clear from the above discussion there can be many forms of dig-ital currency; i.e. BitCoin is only an example (although the most famous). As we al-luded to when discussing non-provisioned blockchains there is behind every suchblockchain a form of digital currency. Thus each application could result in the in-troduction of a new form of digital currency. These ‘alternatives’ to BitCoin arecollectively called AltCoins. The most famous of these are BitCoin and Ethereum,but there are well over one hundred such AltCoins. The different AltCoins can be traded with each other on so-called digital exchanges,where they can also be converted into fiat currencies such as dollars or euros. Thetotal value of each digital currency when expressed in terms of dollars is called its market capitalization. At the time of writing the top five coins (in terms of marketcapitalizations), their ticker symbols, the price per single coin and the total marketcapitilizations are:  Coin Symbol Price Market Cap.  BitCoin BTC $18,115 $336,809,471,651 Ethereum ETH $551.47 $62,711,339,782  XRP XRP $0.62 $28,330,798,428 Tether USDT $1.00 $19,131,222,283  BitCoin Cash BCH $280.55 $5,226,206,168 Tether is slighly different from the other digital currencies as it is a so-called sta- ble coin. The value of each Tether is always claimed to be one dollar. The idea is  16  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  that each Tether in circulation is actually backed up by one dollars worth of as-sets being held by the organizing company, Tether Limited. Although in 2019 thecompanies lawyer filed at the Supreme Court of New York1 that one Tether onlycorresponded to $0.74. Centrally Banked Digital Currencies: DLTs can also be used in traditional bank-ing applications. Within each currency zone it is standard for the amount of moneytransferred between banks, to be recorded by the central bank on a system calledRTGS (Real Time Gross Settlement). Thus when a customer transfers an amountfrom one account in one bank to another account in another bank there is a pay-ment made between the issuing and the acquiring bank on the RTGS (actuallymany such payments are usually put together, leading to the ‘delay’ customerssee when performing interbank transfers). Such RTGS systems are a natural candidate for a provisioned DLT. The centralbank acts as the provisioning authority, with the tier-one banks (a.k.a. clearingbanks) providing validator nodes for the DLT network. Such a proposal, calledRSCoin, was presented in [DM16]. A key problem here is that whilst this is a pri-vate blockchain the validators are competitors and thus one needs to ensure thatthe data on the chain placed by one bank is not readable by another. For exam-ple we do not wish bank C to see a payment made between banks A and B, as thesize or occurance of such a payment is confidential information which should onlybe known to A, B, and the regulator. Again such problems can be solved via zero-knowledge proofs. Financing and Securing Global Supply Chains: Trading of physical items canalso be recorded, tracked, and paid for using DLT technology. Examples in thisspace include We-Trade2 which provides a trade finance platform. The companyhas been set up as a joint venture between 12 European banks and IBM. Manag-ing a global supply chain can also be relatively complex, and something which canutilize DLTs. To address this space IBM and Maersk have developed the Trade-Lens3 platform to enable secure data exchange in the supply chain. In a similar vein, but focused on the energy sector, a company called EnergyWeb4does a supply chain DLT in the electricity market. Their blockchain system bringstogether utilities, grid operators, as well as large energy consumers. In the oil andgas markets Chevron, ExxonMobil and others have teamed up to create a DLTsolution called BlockChain For Energy5. For luxury and high value goods such as gemstones, paintings, fine wines etc. onecan store the provenance and the ownership of items using a DLT; for exampleEverLedger6 provides systems in this space. Of particular interest is the fact thatone can store the ‘atomic fingerprint’ of a diamond on the blockchain in order toidentify it and track its provenance. Provenance not only applies to high value items; companies are also interested indetermining the provenance of raw materials. For example in the food industryIBM, via its Food-Trust project7, has been working with companies (supermarketssuch as Walmart, producers such as Nestlé and Carrefour, as well as wholesalers)to ensure the provence of the food supply chain.  1https://www.scribd.com/document/408190972/Stuart-Hoegner-Affidavit-4-302https://we-trade.com/3https://www.tradelens.com/4https://www.energyweb.org/about/what-we-do/5https://www.blockchainforenergy.net/6https://www.everledger.io/7https://www.ibm.com/nl-en/blockchain/solutions/food-trust  17  https://www.scribd.com/document/408190972/Stuart-Hoegner-Affidavit-4-30 https://we-trade.com/ https://www.tradelens.com/ https://www.energyweb.org/about/what-we-do/ https://www.blockchainforenergy.net/ https://www.everledger.io/ https://www.ibm.com/nl-en/blockchain/solutions/food-trust  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  Provenance is also a key problem in the pharmaceutical sector. IBM, KPMG, Wal-mart, and Merck are using DLTs to attempt to secure the supply chain for drugs.This follows the introduction of the Drug Supply Chain Security Act in the UnitedStates. The companies have formed the Pharmaceutical Utility Network8. Other Applications: A companies most valuable asset is often said to be theirstaff. The large US based Workday company9, which runs cloud based financialand human resource operations for companies, launched in 2019 a DLT to en-able digital credentials in the HR (Human Resources) space. Enabling for examplea health care professional to prove they have the requisite skill sets to differentemployers with a single trusted source of record. A DLT provides a mechanism to record who owns what, and the transfer of suchitems between entities. Thus applications in finance can include the register of se-curities, a companies share register, ownership of bonds, valuable items and soon. Other applications can involve storage and transfer of KYC (Know Your Cus-tomer) data; for example institutions can share KYC data meaning an individualdoes not have to prove who they are to each institution they deal with in turn.There are various companies in this space, such as DTCC10 and SETL11. The ability to store and record data, as well as provide a financial incentive via adigital coin, can allow interesting use-cases to be developed. For example, in Bel-gium one company Buck-E12 uses DLT to provide a digital coin reward to childrenfor cycling to school. This can also be extended to incentivize employees to cycleto work. Other applications include utilizing cryptocurrencies with computer gameenvironments. In this space Forte13 aims to develop a platform to make it easierto build games upon such a Distributed Ledger. Another company in this space isDapperLabs14, probably most famous for its CryptoKitties application. Rarible15and Foundation16 enable the storage and selling of so-called digital collectiblesand digital art, so called NFT’s (Non-Fungible Tokens). The ability to transfer and store small amounts of ‘value’, has led a number ofcompanies to investigate the usase of DLT in the music industry; as a way of dis-tributing royalties to musicians. Examples here include Opus, Mediachain, Musi-clife and eMusic17.  8https://tinyurl.com/yycqjrhz9https://www.workday.com/10https://www.dtcc.com/blockchain11https://setl.io12https://buck-e.be13https://www.forte.io/14https://www.dapperlabs.com/15https://rarible.com/16https://foundation.app/17https://tinyurl.com/yckl6sct  18  https://tinyurl.com/yycqjrhz https://www.workday.com/ https://www.dtcc.com/blockchain https://setl.io https://buck-e.be https://www.forte.io/ https://www.dapperlabs.com/ https://rarible.com/ https://foundation.app/ https://tinyurl.com/yckl6sct  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  4 SMART CONTRACTS At the core of many DLT applications, i.e. applications which run ontop of the baseDLT technology, is something called a Smart Contract. Smart Contracts were ini-tially made popular in by the Ethereum blockchain (which is considered the sec-ond largest cryptocurrency after BitCoin). A smart contract is a piece of computercode which will automatically execute ‘on the blockchain’ once certain conditionshave been met. For example, one could use a smart contract to act as a form of money escrowsystem: A user A pays some money to user B, but user B is not allowed to spendthat money until a third user C gives their approval. If the approval is not providedwithin a given time window the initial payment from A to B is reversed. The pointis that once entered into, the smart contract will be automatically executed by thevalidators. One application which was tested in this space in 2017 by Atlas Insur-ance from Malta and Aza in France was a travel insurance smart contract, whichautomatically paid out if a flight was cancelled or delayed1. Smart contracts can also be used to transfer data between entities securely undercontrol of the data owner. See EncryptGen2 for an example of this in the sharingof DNA data for medical applications.  1https://www.axa.com/en/magazine/axa-goes-blockchain-with-fizzy2https://encrypgen.com/  19  https://www.axa.com/en/magazine/axa-goes-blockchain-with-fizzy https://encrypgen.com/  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  5 SECURING SECRET KEYS In a blockchain in which transactions signal ownership of some resource, for ex-ample ownership of the underlying cryptocurrency or title to some external objectof worth (a valuable painting or a stock in a company) it is vital that the secret keyused to sign the transactions which transfer ownership is kept secure. Loss of thesecret key becomes equivalent with loss of the resource or asset. There have beenmany stories in the press in relation to key loss meaning people loosing access tomillions of dollars worth of assets. There are four distinct methodologies which can be used to secure the storageof such keys, all of which are deployed in various DLTs around the world. Thesedistinct methodologies are not mutually exclusive. Indeed one finds applicationswhich combine a number of the following methodologies together (for exampleby combining MPC and HSMs, or secret sharing and Multi-Sigs). Hardware Security Module: A Hardware Security Module (HSM) is the tradi-tional method to secure cryptographic keys used in large enterprises such asbanks. These are special purpose computers dedicated to cryptographic opera-tions which have gone through a rigourous certification procedure. They are hard-ened against tampering, and have strong control on how keys can be accessedwhich are stored within the HSM. They are most suitable for large corporate usagebeing relatively expensive, indeed most financial institutions will already have alarge HSM footprint in house. A major disadvantage of HSM technology is that it is less flexible than other so-lutions. Unlike software solutions HSMs are not ‘elastic’, meaning one needs tomanage and purchase enough HSMs to cope with ones expected peak load. In ad-dition for organizations with large amounts of HSMs, management becomes a bigissue. Especially when one needs to deal with a heterogenous real estate, whereeach HSM supports different cryptographic algorithm choices due to the age ofthe equipement. Multi-Sig: A Multi-Sig is a methodology which associated to each asset a set ofpublic keys. Each associated private key is assigned to a given entity and an accessstructure is defined. When a transactions associated to this asset is desired tobe executed, something akin to a Smart Contract is performed. The asset is onlyoperated upon if enough digital signatures are collected which satisfy the accessstructure. For example one could have three distinct public keys and require atleast two to authorize a given transaction. Thus if one key is compromised or lost,control is still maintained of the underlying asset. The advantage of Multi-Sig’s is that they utilize traditional digital signature tech-nology; the signer needs to simply execute a traditional signing operation. Thedisadvantage is that processing the verification is more complex, i.e. one needs tobe aware of the underlying access structure and wait for the requisite number ofsignatures to come in. Another disadvantage is that the access structure is public.This access structure may itself be a corporate secret; as it may reveal the internalapprovals process for an operation which one may not want to leak to the world.  20  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  Secret Sharing: A classic way to store a secret so as to enable both recoveryin case of one computer being lost/damaged and also to avoid theft of a key isto use secret sharing. In this method the key holder splits their key into shares nusing a threshold secret sharing scheme (such as Shamir) with threshold t. The ndifferent shares are then stored in n different places. The advantage then is thatan attacker needs to break into t + 1 places to recover the key, and the legitimateuser is protected in that they can recover their key as long as they have access to t+ 1 of the storage locations. A disadvantage of using secret sharing on its own is that to use the key the sharesneed to be brought back together into one location. This presents a single pointof failure location, in that during key usage the secret is available to a potentialattack. Multi-Party Computation: One can address the issue of needing to bring theshares in a secret sharing based solution into one location to produce a signatureby using MPC/Threshold Cryptography. Using this technology one can perform thesigning operation without bringing the shares back together. This enables a nor-mal digital signature to be produced, using whatever access structure is desiredby the signer; and indeed the access structure can be dynamically obliviously tothe verifier. In some sense MPC solutions are the opposite of Multi-Sig solutions. In an MPCsolution the signing operation is more complex, but the verification is as for a nor-mal signature. In an MPC solution, unlike a Multi-Sig solution, one does not revealthe access structure needed to authorise a signature. The use of MPC and Thresh-old Cryptography in blockchain and other application areas has resulted in a NISTproject to investigate the space for potential standardization1.  1https://csrc.nist.gov/projects/threshold-cryptography  21  https://csrc.nist.gov/projects/threshold-cryptography  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  6 ZERO-KNOWLEDGE PROOFS Whether recording data on a public blockchain, as in the case of BitCoin or Ethereum,or on a private blockchain, as in the case of an RTGS system, the data on the blockchainneeds to be secured. Just as one encrypts databases in a standard database appli-cation, one needs to also examine how data is encrypted when stored on a DLT.The problem then is that the validators need to validate the data on the blockchainwithout seeing it. The validators may need to execute a smart contract, make apayment between two entities etc, and this needs to be checked to be correct. Forexample the validator may need to check that entity X has a certain value in theiraccount before allowing that entity to spend it. This need to provide proofs that certain statements are true without revealing thespecific values which prove the statement to be true provides the massive interestin the blockchain community in zero-knowledge proofs. The applications havecreated an explosion of different Zero-Knowledge proof technologies. Which wewill now summarize. The statement to be proved is usually encoded as an arithmetic or binary circuit,or as a sequence of constraints in ‘language’ called R1CS. When below we talkabout ‘proof size’ or ‘time’ this is always a function of the complexity of the func-tion (i.e. the circuit size or the number of R1CS constraints). The reason for therebeing a multitude of different technologies is that the design space is quite large;with different applications requiring different trade-offs. We outline the main tradeoffs below:  • Proof size: A Zero-Knowledge Proof will need to be stored on the blockchain,so the validators can validate it. Thus proof size is an issue if one is inter-ested in minimizing the amount of data to be stored. • Prover Complexity: The proof has to be generated by the prover, whoholds the witness/secret data. Thus we may require that the prover can berun very efficiently. • Verifier Complexity: The blockchain validators, and anyone else interestedin the validity of a proof, will need to check the proof at some point. Indeeda proof is only ever created once, but could be verified many times. Thus thetime needed to run the verification procedure could be important in manycase. • Trusted Setup: Some proof technologies require a form of trusted setup,namely the users of the Zero-Knowledge proof system need to trust someentity to set up some parameters at the very beginning.  As of today there are three different, but related, technoligies to provide the nec-essary Zero-Knowledge Proofs on a blockchain, these are SNARKS, BulletProofsand STARKS. SNARK: A SNARK is a Succinct Non-Interactive Argument of Knowledge. Theywere introduced by Groth in 2010 [Gro10], and provide the best in class perfor-mance in relation to proof size and verifier complexity. They are reasonably fastfor proof generation, but their main drawback is that they require a trusted setup  22  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  to be utilized within a system. The trusted setup is also dependent on the state-ment being proved. BulletProofs: Introduced in two works, [BCC+16] and [BBB+18], of which thelatter gave the name BulletProofs, BulletProofs are proofs whose main advan-tage is that they no longer require trusted setups which are statement specific. Onthe minus side their proof size is not as good as that achieved in SNARKs, and theprover and verifier time are also not that efficient. STARK: A STARK is a Succinct Transparent Argument of Knowledge, and theywere introduced by Eli-Ben Sasson et al in 2017 [BBHR19], with concurrent workin a similar vien leading to a system called Ligero [AHIV17]. They produce proofswhich are bigger than both SNARKs and BulletProofs. They provide the best inclass performance for the prover, but the verification is usually slower than thatfor SNARKs. Unlike SNARKs or BulletProofs they are require no trusted setup.Another benefit of STARKs is that their construction can be made secure againstquantum computers.  6.1 APPLICATIONS OF ZERO-KNOWLEDGE PROOFS It has already been remarked that BitCoin payments are not totally anonymous.Payment destination and source addresses are not protected, they are only ‘tok-enized’ and the payment amounts are kept in the clear. One method to add trueanonymity is to take a set of transactions and then pass them through a ‘Mixer’. AMixer is a technology used in many applications to provide anonymity, by break-ing the link between the source of a message and the destination. It is used insome electronic voting protocols to break the link between a voter and their vote,or in messaging systems such as Tor to break the link between a sender and a re-ceiver. In the context of a cryptocurrency a mixer is implemented by having a single trans-action which takes a series of inputs from a set of source addresses (or walletidentifiers) and then outputing the values to a series of destination addresses,whilst breaking the linkage between the transactions. This needs to be done ina way such that it is clear that it has been done correctly, without revealing thelink. This is where Zero-Knowledge Proofs are used, to ensure the mix has beenperformed correctly. The classic example of this is the ZeroCash/Zcash protocolfrom [BCG+14], which uses SNARKS. A BulletProof based solution called Zether [BAZB20] has been added to Ethereum,providing much the same anonymity requirements. An extension of Zether is usedwithin JP Morgan Chase’s JPM Coin implementation1.  6.2 REMOVING TRUSTED SETUPS As remarked above both SNARKs and BulletProofs require a form of trusted setup.As a simple example consider the following problem, a trusted setup might re-quire the generation of two group elements P and Q on an elliptic curve for whichthe discrete logarithm is unknown between P and Q. An insecure way of creating P and Q would be for a trusted party to generate P at random and then create Qby setting Q = [x]P for some random value of x known only to the trusted thirdparty. However, this means the trusted third party knows the discrete logarithm x and could therefore mount attacks on the protocol2. A simple secure way of  1https://tinyurl.com/y3y2y3al2Indeed this is the idea behind the famous backdoor in the NIST DUEL-EC-DRBG ran-dom number generator.  23  https://tinyurl.com/y3y2y3al  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  creating P and Q would be to hash a known string to the points P and Q using atrusted cryptographic hash-function. If the known string is published, then thereis no way a party can learn the discrete logarithm (without being able to invert thehash hash function). This simple example shows the problem with needing trusted setups. Howeverfor systems using SNARKs and BulletProofs, the trusted setup is more complex.However, we can perform this trusted setup using another form of cryptographictechnology called Multi-Party Compuation (MPC). MPC allows a set of mutually dis-trusting parties to compute an arbitrary function on their private data. Using MPCone can create a so-called ceremony in which a set of parties performs the trustedsetup, but in a manner in which no one party learns the ‘secrets’ behind the setup(the x in the simple example above). As long as the users of the system trust thatat least one of the parties in the MPC ceremony is honest, then the users can trustthe output of the trusted setup. This strategy was most famously implemented in the setup for the Zcash system.The first such ceremony was performed in October 2016, with a second ceremonyin August 2018 for the Sapling upgrade to the network. The underlying protocol isdescribed in [BGG19].  24  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  7 CONCLUSIONS This report inaugurates a series of security studies on the topic of Crypto Assets,Digital Currencies and Distributed Ledger Technologies. It presents the variousaspects of the technology behind DLTs and their application. From the prism of the creation of the Bitcoin, it discusses the various cryptographicprimitives needed to provide a working system; viz. digital signatures, Merkletrees, hash functions, zero-knowledge proofs. Important topics addressed in-clude how validators solve the consensus problem. What is the basic problemof Byzantine agreement and what approaches are available to solve this in bothprovisioned and non-provisioned block chains. It describes what a blockchain isand how an append only database maps onto standard financial systems suchas ledgers, making blockchain a natural fit in financial applications. Moreover, itexplains how data is placed on a block chain, the techniques that are used to vali-date state transitions on the blockchain and how Zero-Knowledge techniques canbe used to solve these problems, while maintaining data secrecy. Perhaps more importantly, this study poses 5 unanswered questions that deci-sion makers and application designers need to consider before jumping on theblockchain bandwagon: Q Does your application require data which is stored in an immutable form,i.e. would an append only database be suitable? Q Does your application require data to be stored in a distributed/decentral-ized manner for data loss prevention, security, or performance reasons? Q Is your application of a DLT suitable for a provisioned or non-provisionedmethodology for implementing the validators? Q If using a non-provisioned blockchain, what methodology for consensus willbe utilized? Q Irrespective of your method of obtaining Byzantine Agreement, how will val-idators be rewarded (resp. penalised) for ‘good’ (resp. bad) behaviour?  No single answer can be provided, for each application and system will bear itsown intricacies. But the inability to provide a clear answer to them, should indi-cate to decision makers that perhaps using a blockchain is not the best course ofaction.  25  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  BIBLIOGRAPHY [AHIV17] Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkita-subramaniam. Ligero: Lightweight sublinear arguments without a trustedsetup. pages 2087–2104, 2017. [BAZB20] Benedikt Bünz, Shashank Agrawal, Mahdi Zamani, and Dan Boneh.Zether: Towards privacy in a smart contract world. pages 423–443, 2020. [BBB+18] Benedikt Bünz, Jonathan Bootle, Dan Boneh, Andrew Poelstra, PieterWuille, and Greg Maxwell. Bulletproofs: Short proofs for confidentialtransactions and more. pages 315–334, 2018. [BBHR19] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. Scal-able zero knowledge with no trusted setup. pages 701–732, 2019. [BCC+16] Jonathan Bootle, Andrea Cerulli, Pyrros Chaidos, Jens Groth, andChristophe Petit. Efficient zero-knowledge arguments for arithmetic cir-cuits in the discrete log setting. pages 327–357, 2016. [BCG+14] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green,Ian Miers, Eran Tromer, and Madars Virza. Zerocash: Decentralizedanonymous payments from bitcoin. pages 459–474, 2014. [BGG19] Sean Bowe, Ariel Gabizon, and Matthew D. Green. A multi-party protocolfor constructing the public parameters of the pinocchio zk-SNARK. pages64–77, 2019. [BGW88] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. Completenesstheorems for non-cryptographic fault-tolerant distributed computation(extended abstract). pages 1–10, 1988. [CCD88] David Chaum, Claude Crépeau, and Ivan Damgård. Multiparty uncondi-tionally secure protocols (extended abstract). pages 11–19, 1988. [CGR11] Christian Cachin, Rachid Guerraoui, and Luís E. T. Rodrigues. Introduction  to Reliable and Secure Distributed Programming (2. ed.). Springer, 2011. [Cha82] David Chaum. Blind signatures for untraceable payments. pages 199–203, 1982. [Des94] Yvo Desmedt. Threshold cryptography. European Transactions on Telecom-  munications, 5(4):449–457, July/August 1994. [DH76] Whitfield Diffie and Martin E. Hellman. New directions in cryptography.22(6):644–654, 1976. [DM16] George Danezis and Sarah Meiklejohn. Centrally banked cryptocurren-cies. 2016. [DN93] Cynthia Dwork and Moni Naor. Pricing via processing or combatting junkmail. pages 139–147, 1993. [ES14] Ittay Eyal and Emin Gün Sirer. Majority is not enough: Bitcoin mining isvulnerable. pages 436–454, 2014. [GMR85] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. The knowledgecomplexity of interactive proof-systems (extended abstract). pages 291–304, 1985.  26  CRYPTO ASSETSDigital Currencies & Distributed Ledger TechnologiesFebruary 2021  [Gro10] Jens Groth. Short non-interactive zero-knowledge proofs. pages 341–358,2010. [HS91] Stuart Haber and W. Scott Stornetta. How to time-stamp a digital docu-ment. pages 437–455, 1991. [JJ99] Markus Jakobsson and Ari Juels. Proofs of work and bread pudding proto-cols. In Bart Preneel, editor, Secure Information Networks: Communications  and Multimedia Security, IFIP TC6/TC11 Joint Working Conference on Com- munications and Multimedia Security (CMS ’99), September 20-21, 1999, Leu- ven, Belgium, volume 152 of IFIP Conference Proceedings, pages 258–272.Kluwer, 1999.  [KT18] Max J. Krause and Thabet Tolaymat. Quantification of energy and carboncosts for mining cryptocurrencies. Nature Sustainability, 1:711–718, 2018. [LSP82] Leslie Lamport, Robert E. Shostak, and Marshall C. Pease. The byzantinegenerals problem. ACM Trans. Program. Lang. Syst., 4(3):382–401, 1982. [Mer79] Ralph Merkle. Method of providing digital signatures. US PatentUS4309569A, 1979. [Nak08] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system. Web docu-ment., 2008. [NIS12] NIST Special Publication 180-4. Secure hash standard (SHS). NationalInstitute of Standards and Technology, 2012. [NIS13] NIST Special Publication 186-4. Digital signature standard (DSS). NationalInstitute of Standards and Technology, 2013. [NRS20] Kevin Alarcón Negy, Peter R. Rizun, and Emin Gün Sirer. Selfish miningre-examined. pages 61–78, 2020. [RB89] Tal Rabin and Michael Ben-Or. Verifiable secret sharing and multipartyprotocols with honest majority (extended abstract). pages 73–85, 1989. [RS13] Dorit Ron and Adi Shamir. Quantitative analysis of the full Bitcoin transac-tion graph. pages 6–24, 2013. [RS14] Dorit Ron and Adi Shamir. How did dread pirate roberts acquire and pro-tect his bitcoin wealth? pages 3–15, 2014. [Sha79] Adi Shamir. How to share a secret. Communications of the ACM,22(11):612–613, November 1979. [SKG19] Christian Stoll, Lena Klaassen, and Ulrich Gallersdörfer. The carbon foot-print of BitCoin. Joule, 3:1647–1661, 2019. [Sta10] Standards for Efficient Cryptography Group (SECG). Sec 2: Recommendedelliptic curve domain parameters. http://www.secg.org/sec2-v2.pdf, 2010.Version 2.0. [Yao86] Andrew Chi-Chih Yao. How to generate and exchange secrets (extendedabstract). pages 162–167, 1986.  27  http://www.secg.org/sec2-v2.pdf  ABOUT ENISA The European Union Agency for Cybersecurity, ENISA, is the Union’s agency dedicated to achieving a high common level of cybersecurity across Europe. Established in 2004 and strengthened by the EU Cybersecurity Act, the European Union Agency for Cybersecurity contributes to EU cyber policy, enhances the trustworthiness of ICT products, services and processes with cybersecurity certification schemes, cooperates with Member States and EU bodies, and helps Europe prepare for the cyber challenges of tomorrow. Through knowl- edge sharing, capacity building and awareness raising, the Agency works together with its key stakeholders to strengthen trust in the connected economy, to boost resilience of the Union’s infrastructure, and, ultimately, to keep Europe’s society and citizens digitally secure. More information about ENISA and its work can be found here: www.enisa.europa.eu.  ISBN: 978-92-9204-467-1 DOI: 10.2824/035503  www.enisa.europa.eu  The Genesis Of Bitcoin  Hash Functions  Merkle Tree  Digital Signature  Secret Sharing  Byzantine Agreement  Electronic Cash  Zero-Knowledge  Time Stamps  Multi-Party Computation and Threshold Cryptography  Proof of Work  Distributed LedgerTechnologies and Bitcoin  The Word `Ledger'  The Word `Distributed'  The Words `Distributed Ledger Technology'  Provisioned Blockchains  Non-Provisioned Blockchains  Rewarding Validators  Applications  Smart Contracts  Securing Secret Keys  Zero-Knowledge Proofs  Applications of Zero-Knowledge Proofs  Removing Trusted Setups  Conclusions  Bibliography",
    "abstract": "This report aims to increase the understanding of blockchain technologies. It aims to explain the underlying technical concepts and how they relate to each other. The goal is to explain the components, and illustrate their use by pointing to deployed instances where the ideas are utilized. With this frst introductory study focusing on the rise of cryptocurrencies & DLT, the European Union Agency for Cybersecurity is launching a series of information security studies in the area of crypto-assets to support policy-makers and raise awareness on the arising security and data protection."
}
{
    "number": 123,
    "label": 2,
    "source": "NIST",
    "subject": "Recommendation for Random Bit Generator (RBG) Constructions (3rd Draft)",
    "document(english)": "NIST SP 800-90C 3pd (Third Public Draft), Recommendation for Random Bit Generator (RBG) Constructions  NIST Special Publication  1  NIST SP 800-90C 3pd 2  Recommendation for Random Bit 3  Generator (RBG) Constructions 4  Third Public Draft (3pd) 5  6  Elaine Barker 7  John Kelsey 8  Kerry McKay 9  Allen Roginsky 10  Meltem Sönmez Turan 11  This publication is available free of charge from: 12  https://doi.org/10.6028/NIST.SP.800-90C.3pd 13  https://crossmark.crossref.org/dialog/?doi=10.6028/NIST.SP.800-90C.3pd  NIST Special Publication  14  NIST SP 800-90C 3pd 15  Recommendation for Random Bit 16  Generator (RBG) Constructions 17  Third Public Draft (3pd) 18  19  Elaine Barker 20  John Kelsey 21  Kerry McKay 22  Allen Roginsky 23  Meltem Sönmez Turan 24  Computer Security Division 25  Information Technology Laboratory 26  27  This publication is available free of charge from: 28  https://doi.org/10.6028/NIST.SP.800-90C.3pd 29  September 2022 30  31  U.S. Department of Commerce  32  Gina M. Raimondo, Secretary 33  National Institute of Standards and Technology  34  Laurie E. Locascio, NIST Director and Under Secretary of Commerce for Standards and Technology 35  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  Certain commercial entities, equipment, or materials may be identified in this document in order to describe an 36  experimental procedure or concept adequately. Such identification is not intended to imply recommendation or 37  endorsement by the National Institute of Standards and Technology (NIST), nor is it intended to imply that the entities, 38  materials, or equipment are necessarily the best available for the purpose. 39  There may be references in this publication to other publications currently under development by NIST in accordance 40  with its assigned statutory responsibilities. The information in this publication, including concepts and methodologies, 41  may be used by federal agencies even before the completion of such companion publications. Thus, until each 42  publication is completed, current requirements, guidelines, and procedures, where they exist, remain operative. For 43  planning and transition purposes, federal agencies may wish to closely follow the development of these new 44  publications by NIST. 45  Organizations are encouraged to review all draft publications during public comment periods and provide feedback to 46  NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at 47  https://csrc.nist.gov/publications. 48  Authority 49  This publication has been developed by NIST in accordance with its statutory responsibilities under the Federal 50  Information Security Modernization Act (FISMA) of 2014, 44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283. 51  NIST is responsible for developing information security standards and guidelines, including minimum requirements 52  for federal information systems, but such standards and guidelines shall not apply to national security systems without 53  the express approval of appropriate federal officials exercising policy authority over such systems. This guideline is 54  consistent with the requirements of the Office of Management and Budget (OMB) Circular A-130. 55  56  Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and binding 57  on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines be interpreted 58  as altering or superseding the existing authorities of the Secretary of Commerce, Director of the OMB, or any other 59  federal official.  This publication may be used by nongovernmental organizations on a voluntary basis and is not 60  subject to copyright in the United States. Attribution would, however, be appreciated by NIST. 61  NIST Technical Series Policies 62  Copyright, Fair Use, and Licensing Statements 63  NIST Technical Series Publication Identifier Syntax 64  Publication History 65  Approved by the NIST Editorial Review Board on YYYY-MM-DD [will be added in final published version] 66  How to Cite this NIST Technical Series Publication:  67  Barker EB, Kelsey JM, McKay KA, Roginsky AL, Sönmez Turan M (2022) Recommendation for Random Bit 68  Generator (RBG) Constructions. (National Institute of Standards and Technology, Gaithersburg, MD), NIST Special 69  Publication (SP) 800-90C 3pd. https://doi.org/10.6028/NIST.SP.800-90c.3pd 70  NIST Author ORCID iDs [will be added in final published version] 71  Author 1: 0000-0000-0000-0000 72  Author 2: 0000-0000-0000-0000 73  Author 3: 0000-0000-0000-0000 74  Author 4: 0000-0000-0000-0000 75  https://csrc.nist.gov/publications https://doi.org/10.6028/NIST-TECHPUBS.CROSSMARK-POLICY https://www.nist.gov/document/publication-identifier-syntax-nist-technical-series-publications  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  Public Comment Period 76  September 7, 2022 – December 7, 2022 77  Submit Comments 78  rbg_comments@nist.gov 79  80  National Institute of Standards and Technology 81  Attn: Computer Security Division, Information Technology Laboratory 82  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 83  All comments are subject to release under the Freedom of Information Act (FOIA). 84  mailto:rbg_comments@nist.gov  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  i  Reports on Computer Systems Technology 85  The Information Technology Laboratory (ITL) at the National Institute of Standards and 86  Technology (NIST) promotes the U.S. economy and public welfare by providing technical 87  leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test 88  methods, reference data, proof of concept implementations, and technical analyses to advance the 89  development and productive use of information technology. ITL’s responsibilities include the 90  development of management, administrative, technical, and physical standards and guidelines for 91  the cost-effective security and privacy of other than national security-related information in federal 92  information systems. The Special Publication 800-series reports on ITL’s research, guidelines, and 93  outreach efforts in information system security, and its collaborative activities with industry, 94  government, and academic organizations. 95  Abstract 96  The NIST Special Publication (SP) 800-90 series of documents supports the generation of high-97  quality random bits for cryptographic and non-cryptographic use. SP 800-90A specifies several 98  deterministic random bit generator (DRBG) mechanisms based on cryptographic algorithms. SP 99  800-90B provides guidance for the development and validation of entropy sources. This document 100  (SP 800-90C) specifies constructions for the implementation of random bit generators (RBGs) that 101  include DRBG mechanisms as specified in SP 800-90A and that use entropy sources as specified 102  in SP 800-90B. Constructions for three classes of RBGs (namely, RBG1, RBG2, and RBG3) are 103  specified in this document. 104  Keywords 105  deterministic random bit generator (DRBG); entropy; entropy source; random bit generator 106  (RBG); randomness source; RBG1 construction; RBG2 construction; RBG3 construction; 107  subordinate DRBG (sub-DRBG).  108  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  ii  Note to Reviewers  109  1. This draft of SP800-90C describes three RBG constructions. Note that in this draft, a non-110  deterministic random bit generator (NRBG) is presented as an RBG3 construction. 111  Question: In a future revision of SP 800-90C, should other constructions be included? 112  This version of SP 800-90C does not address the use of an RBG software implementation in 113  which a) a cryptographic library or an application is loaded into a system and b) the software 114  accesses entropy sources or RBGs already associated with the system for its required 115  randomness. NIST intends to address this situation in the near future. 116  2. The RBG constructions provided in this draft use NIST-approved cryptographic primitives 117  (such as block ciphers and hash functions) as underlying components. Note that non-vetted 118  conditioning components may be used within SP 800-90B entropy sources. 119  Although NIST still allows three-key TDEA as a block-cipher algorithm, Section 4 of [SP800-120  131A] indicates that its use is deprecated through 2023 and will be disallowed thereafter for 121  applying cryptographic protection. This document (i.e., SP 800-90C) does not approve the 122  use of three-key TDEA in an RBG. 123  Although SHA-1 is still approved by NIST, NIST is planning to remove SHA-1 from a future 124  revision of FIPS 180-4, so the SP 800-90 series will not be including the use of SHA-1. 125  The use of the SHA-3 hash functions are approved in SP 800-90C for Hash_DRBG and 126  HMAC_DRBG but are not currently included in [SP800-90A]. SP 800-90A will be revised to 127  exclude the use of TDEA and SHA-1 and include the use of the SHA-3 family of hash 128  functions. 129  3. Since the projected date for requiring a minimum security strength of 128 bits for U.S. 130  Government applications is 2030 (see [SP800-57Part1]), RBGs are only specified to provide 131  128, 192, and 256 bits of security strength (i.e., the 112-bit security strength has been 132  removed). Note that a consuming application may still request a lower security strength, but 133  the RBG output will be generated at the instantiated security strength. 134  4. Guidance is provided for accessing entropy sources and for obtaining full-entropy bits using 135  the output of an entropy source that does not inherently provide full-entropy output (see 136  Section 3.3). 137  5. SP 800-90A requires that when instantiating a CTR_DRBG without a derivation function, the 138  randomness source needs to provide full-entropy bits (see SP 800-90A). However, this draft 139  (SP 800-90C) relaxes this requirement in the case of an RBG1 construction, as specified in 140  Section 4. In this case, the external randomness source may be another RBG construction. An 141  addendum to SP 800-90A has been prepared as a temporary specification in SP 800-90C, but 142  SP 800-90A will be revised in the future to accommodate this change. 143  6. The DRBG used in RBG3 constructions supports a security strength of 256 bits. The RBG1 144  and RBG2 constructions may support any valid security strength (i.e., 128, 192 or 256 bits). 145  7. SP 800-90A currently allows the acquisition of a nonce (when required) for DRBG 146  instantiation from any randomness source. However, SP 800-90C does not include an explicit 147  requirement for the generation of a nonce when instantiating a DRBG. Instead, additional bits 148  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  iii  beyond those needed for the security strength are acquired from the randomness source. SP 149  800-90A will be revised to agree with this change. 150  8. SP 800-90C allows the use of both physical and non-physical entropy sources. See the 151  definitions of physical and non-physical entropy sources in Appendix E. Also, multiple 152  validated entropy sources may be used to provide entropy, and two methods are provided in 153  Section 2.3 for counting the entropy provided in a bitstring. 154  9. The CMVP is considering providing information on an entropy source validation certificate 155  that indicates whether an entropy source is physical or non-physical. 156  10. The CMVP is developing a program to validate entropy sources against SP 800-90B with the 157  intent of allowing the re-use of those entropy sources in different RBG implementations. 158  Question: Are there any issues that still need to be addressed in SP 800-90C to allow the re-159  use of validated entropy sources in different RBG implementations? Note that in many cases, 160  specific issues need to be addressed in the FIPS 140 implementation guide rather than in this 161  document.  162  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  iv  Call for Patent Claims  163  This public review includes a call for information on essential patent claims (claims whose use 164  would be required for compliance with the guidance or requirements in this Information 165  Technology Laboratory (ITL) draft publication). Such guidance and/or requirements may be 166  directly stated in this ITL Publication or by reference to another publication. This call also includes 167  disclosure, where known, of the existence of pending U.S. or foreign patent applications relating 168  to this ITL draft publication and of any relevant unexpired U.S. or foreign patents. 169  ITL may require from the patent holder, or a party authorized to make assurances on its behalf, in 170  written or electronic form, either: 171  a) assurance in the form of a general disclaimer to the effect that such party does not hold and 172  does not currently intend holding any essential patent claim(s); or 173  b) assurance that a license to such essential patent claim(s) will be made available to 174  applicants desiring to utilize the license for the purpose of complying with the guidance or 175  requirements in this ITL draft publication either: 176  i. under reasonable terms and conditions that are demonstrably free of any unfair 177  discrimination; or 178  ii. without compensation and under reasonable terms and conditions that are 179  demonstrably free of any unfair discrimination. 180  Such assurance shall indicate that the patent holder (or third party authorized to make assurances 181  on its behalf) will include in any documents transferring ownership of patents subject to the 182  assurance, provisions sufficient to ensure that the commitments in the assurance are binding on 183  the transferee, and that the transferee will similarly include appropriate provisions in the event of 184  future transfers with the goal of binding each successor-in-interest. 185  The assurance shall also indicate that it is intended to be binding on successors-in-interest 186  regardless of whether such provisions are included in the relevant transfer documents. 187  Such statements should be addressed to: rbg_comments@nist.gov  188  mailto:rbg_comments@nist.gov  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  v  Table of Contents 189  Introduction and Purpose .................................................................................................. 1 190  191  192  General Information ............................................................................................................ 3 193  194  195  196  197  2.4.1. DRBG Instantiations ................................................................................................... 6 198  2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise ............. 7 199  200  201  202  203  2.8.1. DRBG Functions ....................................................................................................... 13 204  2.8.2. Interfacing with Entropy Sources Using the GetEntropy and Get_ES_Bitstring 205  Functions............................................................................................................................... 16 206  2.8.3. Interfacing with an RBG3 Construction ..................................................................... 18 207  Accessing Entropy Source Output .................................................................................. 20 208  209  210  211  3.3.1. Conditioning Function Calls ...................................................................................... 22 212  3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings ................... 24 213  RBG1 Constructions Based on RBGs with Physical Entropy Sources ....................... 27 214  215  216  4.2.1. Instantiating the DRBG in the RBG1 Construction ................................................... 29 217  4.2.2. Requesting Pseudorandom Bits ............................................................................... 31 218  219  4.3.1. Instantiating a Sub-DRBG ......................................................................................... 33 220  4.3.2. Requesting Random Bits .......................................................................................... 33 221  222  4.4.1. RBG1 Requirements ................................................................................................. 33 223  4.4.2. Sub-DRBG Requirements ......................................................................................... 35 224  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  vi  RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources ....... 37 225  226  227  5.2.1. RBG2 Instantiation .................................................................................................... 38 228  5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction .................................. 40 229  5.2.3. Reseeding an RBG2 Construction ............................................................................ 40 230  231  RBG3 Constructions Based on Physical Entropy Sources .......................................... 43 232  233  234  6.2.1. Conceptual Interfaces ............................................................................................... 45 235  6.2.2. RBG3(XOR) Requirements ....................................................................................... 48 236  237  6.3.1. Conceptual Interfaces ............................................................................................... 49 238  6.3.2. Requirements for a RBG3(RS) Construction ............................................................ 53 239  Testing ............................................................................................................................... 54 240  241  7.1.1. Testing RBG Components ........................................................................................ 54 242  7.1.2. Handling Failures ...................................................................................................... 54 243  244  References ................................................................................................................................. 57 245  Appendix A. Entropy vs. Security Strength (Informative) .................................................. 59 246  247  248  249  250  Appendix B. RBG Examples (Informative) .......................................................................... 61 251  252  253  B.2.1. Instantiation of the RBG1 Construction ..................................................................... 63 254  B.2.2. Generation by the RBG1 Construction ..................................................................... 64 255  256  B.3.1. Instantiation of the Sub-DRBGs ................................................................................ 66 257  B.3.1.1. Instantiating Sub-DRBG1 .................................................................................. 66 258  B.3.1.2. Instantiating Sub-DRBG2 .................................................................................. 67 259  B.3.2. Pseudorandom Bit Generation by Sub-DRBGs ........................................................ 67 260  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  vii  261  B.4.1. Instantiation of an RBG2 Construction ...................................................................... 69 262  B.4.2. Generation in an RBG2 Construction ....................................................................... 69 263  B.4.3. Reseeding an RBG2 Construction ............................................................................ 70 264  265  B.5.1. Instantiation of an RBG3(XOR) Construction ........................................................... 71 266  B.5.2. Generation by an RBG3(XOR) Construction ............................................................ 72 267  B.5.2.1. Generation ......................................................................................................... 73 268  B.5.2.2. Get_conditioned_full-entropy_input Function .................................................... 74 269  B.5.3. Reseeding an RBG3(XOR) Construction .................................................................. 75 270  271  B.6.1. Instantiation of an RBG3(RS) Construction .............................................................. 77 272  B.6.2. Generation by an RBG3(RS) Construction ............................................................... 77 273  B.6.3. Generation by the Directly Accessible DRBG ........................................................... 77 274  B.6.4. Reseeding a DRBG .................................................................................................. 78 275  Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG ..... 79 276  277  278  279  C.3.1. Derivation Keys and Constants ................................................................................. 80 280  C.3.2. Derivation Function Using CMAC ............................................................................. 80 281  C.3.3. Derivation Function Using CBC-MAC ....................................................................... 80 282  Appendix D. List of Symbols, Abbreviations, and Acronyms ........................................... 82 283  Appendix E. Glossary ........................................................................................................... 84 284  List of Tables 285  Table 1. RBG Capabilities ............................................................................................................ 4 286  Table 2. Key Lengths for the Hash-based Conditioning Functions ............................................ 22 287  Table 3. Values for generating full-entropy bits by an RBG3(RS) Construction ......................... 50 288  289  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  viii  List of Figures 290  Fig. 1. DRBG Instantiations .......................................................................................................... 7 291  Fig. 2. Example of an RBG Security Boundary within a Cryptographic Module ........................... 9 292  Fig. 3. General Function Calls .................................................................................................... 13 293  Fig. 4. Instantiate_function ......................................................................................................... 14 294  Fig. 5. Generate_function ........................................................................................................... 15 295  Fig. 6. Reseed_function .............................................................................................................. 16 296  Fig. 7. GetEntropy function ......................................................................................................... 17 297  Fig. 8. Get_ES_Bitstring function ............................................................................................... 17 298  Fig. 9. RBG3 DRBG_Instantiate function ................................................................................... 18 299  Fig. 10. RBG3(XOR)_Generate function .................................................................................... 19 300  Fig. 11. RBG3(RS)_Generate function ....................................................................................... 19 301  Fig. 12. RBG1 Construction ........................................................................................................ 28 302  Fig. 13. Instantiation Using an RBG2(P) Construction as a Randomness Source ..................... 29 303  Fig. 14. Instantiation using an RBG3(XOR) or RBG3(RS) Construction as a Randomness 304  Source ........................................................................................................................... 30 305  Fig. 15. RBG1 Construction with Sub-DRBGs ........................................................................... 32 306  Fig. 16. RBG2 Construction ........................................................................................................ 37 307  Fig. 17. RBG3(XOR) Construction ............................................................................................. 45 308  Fig. 18. RBG3(RS) Construction ................................................................................................ 49 309  Fig. 19. DRBG Instantiations ...................................................................................................... 61 310  Fig. 20. RBG1 Construction Example ......................................................................................... 63 311  Fig. 21. Sub-DRBGs Based on an RBG1 Construction .............................................................. 65 312  Fig. 22. RBG2 Example .............................................................................................................. 68 313  Fig. 23. RBG3(XOR) Construction Example .............................................................................. 71 314  Fig. 24. RBG3(RS) Construction Example ................................................................................. 76 315  316  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  ix  Acknowledgments 317  The National Institute of Standards and Technology (NIST) gratefully acknowledges and 318  appreciates contributions from Chis Celi (NIST); Darryl Buller, Aaron Kaufer, and Mike Boyle 319  (National Security Agency); Werner Schindler, Matthias Peter, Johannes Mittman (Bundesamt für 320  Sicherheit in der Informationstechnik); and the members of the Cryptographic Module User Forum 321  (CMUF) for assistance in the development of this Recommendation. NIST also thanks the many 322  contributions by the public and private sectors. 323  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  1  Introduction and Purpose 324  Cryptography and security applications make extensive use of random bits. However, the 325  generation of random bits is challenging in many practical applications of cryptography. 326  The National Institute of Standards and Technology (NIST) developed the Special Publication 327  (SP) 800-90 series to support the generation of high-quality random bits for both cryptographic 328  and non-cryptographic purposes. The SP 800-90 series consists of three parts: 329  • SP 800-90A, Recommendation for Random Number Generation Using Deterministic 330  Random Bit Generators, specifies several approved deterministic random bit generator 331  (DRBG) mechanisms based on approved cryptographic algorithms that – once provided 332  with seed material that contains sufficient entropy – can be used to generate random bits 333  suitable for cryptographic applications. 334  • SP 800-90B, Recommendation for the Entropy Sources Used for Random Bit Generation, 335  provides guidance for the development and validation of entropy sources − mechanisms 336  that generate entropy from physical or non-physical noise sources and that can be used to 337  generate the input for the seed material needed by a DRBG or for input to an RBG. 338  • SP 800-90C, Recommendation for Random Bit Generator (RBG) Constructions, specifies 339  constructions for random bit generators (RBGs) using entropy sources that comply with 340  SP 800-90B and DRBGs that comply with SP 800-90A. Three classes of RBGs are 341  specified in this document (see Sections 5, 6, and 7). SP 800-90C also provides high-level 342  guidance for testing RBGs for conformance to this Recommendation. 343  The RBG constructions defined in this Recommendation consist of two main components: the 344  entropy sources that generate true random variables (variables that may be biased, i.e., each 345  possible outcome does not need to have the same chance of occurring) and the DRBGs that ensure 346  that the outputs of the RBG are indistinguishable from the ideal distribution to a computationally 347  bounded adversary. 348  Throughout this document, the phrase “this Recommendation” refers to the aggregate of SP 800-349  90A, SP 800-90B, and SP 800-90C, while the phrase “this document” refers only to SP 800-90C. 350  SP 800-90C has been developed in coordination with NIST’s Cryptographic Algorithm Validation 351  Program (CAVP) and Cryptographic Module Validation Program (CMVP). The document uses 352  “shall” and “must” to indicate requirements and uses “should” to indicate an important 353  recommendation. The term “shall” is used when a requirement is testable by a testing lab during 354  implementation validation using operational tests or a code review. The term “must” is used for 355  requirements that may not be testable by the CAVP or CMVP. An example of such a requirement 356  is one that demands certain actions and/or considerations from a system administrator. Meeting 357  these requirements can be verified by a CMVP review of the cryptographic module’s 358  documentation. If the requirement is determined to be testable at a later time (e.g., after SP 800-359  90C is published and before it is revised), the CMVP will so indicate in the Implementation 360  Guidance for FIPS 140, Security Requirements for Cryptographic Modules. 361  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  2  Audience  362  The intended audience for this Recommendation includes 1) developers who want to design and 363  implement RBGs that can be validated by NIST’s CMVP and CAVP, 2) testing labs that are 364  accredited to perform the validation tests and the evaluation of the RBG constructions, and 3) users 365  who install RBGs in systems. 366  Document Organization  367  This document is organized as follows: 368  • Section 2 provides background and preliminary information for understanding the 369  remainder of the document. 370  • Section 3 provides guidance on accessing and handling entropy sources, including the 371  external conditioning of entropy-source output. 372  • Sections 4, 5, and 6 specify the RBG constructions. 373  • Section 7 discusses health and implementation-validation testing. 374  • References contains a list of papers and publications cited in this document. 375  The following informational appendices are also provided: 376  • Appendix A provides discussions on entropy versus security strength. 377  • Appendix B provides examples of each RBG construction. 378  • Appendix C is an addendum to SP 800-90A that includes two additional derivation 379  functions that may be used with the CTR_DRBG. These functions will be moved into SP 380  800-90A as part of the next revision of that document. 381  • Appendix D provides a list of abbreviations, symbols, functions, and notations used in this 382  document.  383  • Appendix E provides a glossary with definitions for terms used in this document.  384  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  3  General Information 385  RBG Security 386  Ideal randomness sources generate identically distributed and independent uniform random bits 387  that provide full-entropy outputs (i.e., one bit of entropy per output bit). Real-world RBGs are 388  designed with a security goal of indistinguishability from the output of an ideal randomness source. 389  That is, given some limits on an adversary’s data and computing power, it is expected that there is 390  no adversary that can reliably distinguish between RBG outputs and outputs from an ideal 391  randomness source. 392  Consider an adversary that can perform 2w computations (typically, these are guesses of the RBG’s 393  internal state) and is given an output sequence from either an RBG with a security strength of s 394  bits (where s ≥ w) or an ideal randomness source. It is expected that an adversary has no better 395  probability of determining which source was used for its random bits than 396  1/2 + 2w−s−1 + ε, 397  where ε is negligible. In this Recommendation, the size of the output is limited to 264 output bits 398  and ε  ≤ 2−32. 399  An RBG that has been designed to support a security strength of s bits is suitable for any 400  application with a targeted security strength that does not exceed s. An RBG that is compliant with 401  this Recommendation can support requests for output with a security strength of 128, 192, or 256 402  bits, except for an RBG3 construction (as described in Section 6), which can provide full-entropy 403  output. 404  A bitstring with full entropy has an amount of entropy equal to its length. Full-entropy bitstrings 405  are important for cryptographic applications, as these bitstrings have ideal randomness properties 406  and may be used for any cryptographic purpose. They may be truncated to any length such that the 407  amount of entropy in the truncated bitstring is equal to its length. However, due to the difficulty 408  of generating and testing full-entropy bitstrings, this Recommendation assumes that a bitstring has 409  full entropy if the amount of entropy per bit is at least 1 − ε, where ε is at most 2−32. NISTIR 84271 410  provides a justification for the selection of ε. 411  RBG Constructions 412  A construction is a method of designing an RBG or some component of an RBG to accomplish a 413  specific goal. Three classes of RBG constructions are defined in this document: RBG1, RBG2, 414  and RBG3 (see Table 1). Each RBG includes a DRBG from [SP800-90A] and is based on the use 415  of a randomness source that is validated for compliance with [SP800-90B] or SP 800-90C. Once 416  instantiated, a DRBG can generate output at a security strength that does not exceed the DRBG’s 417  instantiated security strength. 418  1 See NISTIR 8427, Discussion on the Full Entropy Assumption of SP 800-90 series.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  4  Table 1. RBG Capabilities 419  Construction Internal  Entropy Source  Prediction  Resistance Full Entropy Type of  randomness source  RBG1 No No No Physical  RBG2 Yes Yesa No Physical or  Non-physical  RBG3 Yes Yesa Yes Physical  a If sufficient entropy is available or can be obtained when reseeding the RBG’s DRBG. 420  1. An RBG1 construction (see Section 4) does not have access to a randomness source after 421  instantiation. It is instantiated once in its lifetime over a secure channel from an external 422  RBG with appropriate security properties. An RBG1 construction does not support 423  reseeding and cannot provide prediction resistance as described in Section 2.4.2 and 424  [SP800-90A]. The construction can be used to initialize subordinate DRBGs. 425  2. An RBG2 construction (see Section 5) includes one or more entropy sources that are used 426  to instantiate and reseed the DRBG within the construction. This construction can provide 427  prediction resistance (see Section 2.4.2 and [SP800-90A]) when sufficient entropy is 428  available or can be obtained from the RBG’s entropy source(s) at the time that prediction 429  resistance is requested. The construction has two variants that depend on the type of 430  entropy source(s) employed (i.e., physical and non-physical). 431  3. An RBG3 construction is designed to provide output with a security strength equal to the 432  requested length of its output by producing outputs that have full entropy (i.e., an RBG 433  designed as an RBG3 construction can, in effect, support all security strengths) (see Section 434  2.1). This construction provides prediction resistance and has two types, namely 435  RBG3(XOR) and RBG3(RS). 436  a. An RBG3(XOR) construction (see Section 6.2) combines the output of one or more 437  validated entropy sources with the output of an instantiated, approved DRBG using an 438  exclusive-or (XOR) operation. 439  b. An RBG3(RS) construction (see Section 6.3) uses one or more validated entropy 440  sources to provide randomness input for the DRBG by continuously reseeding. 441  This document also provides constructions for 1) subordinate DRBGs (sub-DRBGs) that are 442  instantiated and possibly reseeded by an RBG1 construction (see Section 4.3) and 2) acquiring 443  entropy from an entropy source and conditioning the output to provide a bitstring with full entropy 444  (see Section 3.3). SP 800 90A provides constructions for instantiating and reseeding DRBGs and 445  requesting the generation of pseudorandom bitstrings. 446  All constructions in SP 800-90C are described in pseudocode. These pseudocode conventions are 447  not intended to constrain real-world implementations but to provide a consistent notation to 448  describe the constructions. By convention, unless otherwise specified, integers are unsigned 32-449  bit values, and when used as bitstrings, they are represented in the big-endian format. 450  Sources of Randomness for an RBG 451  The RBG constructions specified in this document are based on the use of validated entropy 452  sources. Some RBG constructions (e.g., the RBG3 construction) access these entropy sources 453  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  5  directly to obtain entropy. Other constructions (e.g., the RBG1 construction) fulfill their entropy 454  requirements by accessing another RBG as a randomness source. In this case, the source RBG may 455  include its own entropy source. 456  SP 800 90B provides guidance for the development and validation of entropy sources − 457  mechanisms that provide entropy for an RBG. Validated entropy sources (i.e., entropy sources that 458  have been successfully validated by the CMVP as complying with SP 800-90B) provide fixed-459  length outputs and have been validated as reliably providing a specified minimum amount of 460  entropy for each output (e.g., each eight-bit output has been validated as providing at least five bits 461  of entropy).2 462  An entropy source is a physical entropy source if the primary noise source of the entropy source 463  is physical – that is, it uses dedicated hardware to provide entropy (e.g., from ring oscillators, 464  thermal noise, shot noise, jitter, or metastability). Similarly, a validated entropy source is a non-465  physical entropy source if the primary noise source of the entropy source is non-physical – that is, 466  entropy is provided by system data (e.g., the entropy present in the RAM data or system time). 467  The entropy-source type is certified during SP 800-90B validation. 468  One or more validated entropy sources are used to provide entropy for instantiating and reseeding 469  the DRBGs in RBG2 or RBG3 constructions or used by an RBG3 construction to generate output 470  upon request by a consuming application. 471  An implementation could be designed to use a combination of physical and non-physical entropy 472  sources. When requests are made to the sources, bitstring outputs are concatenated until the amount 473  of entropy in the concatenated bitstring meets or exceeds the request. Two methods are provided 474  for counting the entropy provided in the concatenated bitstring. 475  Method 1: The RBG implementation includes one or more physical entropy sources, and one 476  or more non-physical entropy sources may also be included in the implementation. However, 477  only the entropy in a bitstring that is provided from physical entropy sources is counted toward 478  fulfilling the amount of entropy requested in an entropy request. Any entropy in a bitstring that 479  is provided by a non-physical entropy source is not counted, even if bitstrings produced by the 480  non-physical entropy source are included in the concatenated bitstring that is used by the RBG. 481  Method 2: The RBG implementation includes one or more non-physical entropy sources, and 482  one or more physical entropy sources may also be included in the implementation. The entropy 483  from both non-physical entropy sources and (if present) physical entropy sources is counted 484  when fulfilling an entropy request. 485  Example: Let pesi be the ith output of a physical entropy source, and npesi be the jh output of a 486  non-physical entropy source. If an implementation consists of one physical and one non-487  physical entropy source, and a request has been made for 128 bits of entropy, the concatenated 488  bitstring might be something like: 489  pes1 || pes2 || npes1 || pes3 || ... || npesm ||pesn, 490  which is the concatenated output of the physical and non-physical entropy sources. 491  2 Note that this document also discusses the use of non-validated entropy sources. When discussing such entropy sources, “non-validated” will  always precede “entropy sources.” The use of the term “validated entropy source” may be shortened to just “entropy source” to avoid repetition.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  6  According to Method 1, only the entropy in pes1, pes2, ..., pesn would be counted toward fulfilling 492  the 128-bit request. Any entropy in npes1, ... npesm is not counted. 493  According to Method 2, all of the entropy in pes1, pes2, ... pesn and in npes1, npes2, ..., npesm is 494  counted. Since the entropy from both non-physical and physical entropy sources is counted in 495  Method 2, the concatenated output string is expected to be shorter compared to that credited using 496  Method 1. 497  When multiple entropy sources are used, there is no requirement on the order in which the entropy 498  sources are accessed or the number of times that each entropy source is accessed to fulfill an 499  entropy request (e.g., if two physical entropy sources are used, it is possible that a request would 500  be fulfilled by only one of the entropy sources because entropy is not available at the time of the 501  request from the other entropy source). However, the Method 1 or Method 2 criteria for counting 502  entropy still applies. 503  This Recommendation assumes that the entropy produced by a validated physical entropy source 504  is generally more reliable than the entropy produced by a validated non-physical entropy source 505  since non-physical entropy sources are typically influenced by human actions or network events, 506  the unpredictability of which is difficult to accurately quantify. Therefore, Method 1 is considered 507  to provide more assurance that the concatenated bitstring actually contains at least the requested 508  amount of entropy (128 bits for the example). Note that RBG2(P) and RBG3 constructions only 509  count the entropy using Method 1 (see Sections 5 and 6). 510  DRBGs 511  Approved DRBG designs are specified in [SP800-90A]. A DRBG includes instantiate, generate, 512  and health-testing functions and may include reseed and uninstantiate functions. The instantiation 513  of a DRBG involves acquiring sufficient randomness to initialize the DRBG to support a targeted 514  security strength and establish the internal state, which includes the secret information for 515  operating the DRBG. The generate function produces output upon request and updates the internal 516  state. Health testing is used to determine that the DRBG continues to operate correctly. Reseeding 517  introduces fresh entropy into the DRBG’s internal state and is used to recover from a potential (or 518  actual) compromise (see Section 2.4.2 for additional discussion). An uninstantiate function is used 519  to terminate a DRBG instantiation and destroy the information in its internal state. 520  2.4.1. DRBG Instantiations  521  A DRBG implementation consists of software code, hardware, or both hardware and software that 522  is used to implement a DRBG design. The same implementation can be used to create multiple 523  “copies” of the same DRBG (e.g., for different purposes) without replicating the software code or 524  hardware. Each “copy” is a separate instantiation of the DRBG with its own internal state that is 525  accessed via a state handle that is unique to that instantiation (see Figure 1). Each instantiation 526  may be considered a different DRBG, even though it uses the same software code or hardware. 527  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  7  528  Fig. 1. DRBG Instantiations 529  Each DRBG instantiation is initialized with input from some randomness source that establishes 530  the security strengths that can be supported by the DRBG. During this process, an optional but 531  recommended personalization string may also be used to differentiate between instantiations in 532  addition to the output of the randomness source. The personalization string could, for example, 533  include information particular to the instantiation or contain entropy collected during system 534  activity (e.g., from a non-validated entropy source). An implementation should allow the use of a 535  personalization string. More information on personalization strings is provided in [SP800-90A]. 536  A DRBG may be implemented to accept further input during operation from the randomness 537  source (e.g., to reseed the DRBG) and/or additional input from inside or outside of the 538  cryptographic module that contains the DRBG. This additional input could, for example, include 539  information particular to a request for generation or reseeding or could contain entropy collected 540  during system activity (e.g., from a validated or non-validated entropy source).3 541  2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise 542  Under some circumstances, the internal state of an RBG (containing the RBG’s secret information) 543  could be leaked to an adversary. This would typically happen as the result of a side-channel attack 544  or tampering with a hardware device, and it may not be detectable by the RBG or any consuming 545  application. 546  All DRBGs in [SP800-90A] are designed with backtracking resistance − that is, learning the 547  DRBG’s current internal state does not provide knowledge of previous outputs. Since all RBGs in 548  SP 800-90C are based on the use of SP 800-90A DRBGs, they also inherit this property. However, 549  3 Entropy provided in additional input does not affect the instantiated security strength of the DRBG instantiation. However, it is good practice to  include any additional entropy when available to provide more security.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  8  once the secret information within the DRBG’s internal state is compromised, all future DRBG 550  outputs are known to the adversary unless the DRBG is reseeded − a process that returns the DRBG 551  to a non-compromised state. 552  A DRBG is reseeded when at least s bits of fresh entropy are used to update the internal state 553  (where s is the security strength of the DRBG) so that the updated internal state is unknown and 554  extremely unlikely to be correctly guessed. A DRBG that has been reseeded has prediction 555  resistance against an adversary who knows its previous internal state. Reseeding may be 556  performed upon request from a consuming application (either an explicit request for reseeding or 557  a request for the generation of bits with prediction resistance); on a fixed schedule based on time, 558  number of outputs, or events; or as sufficient entropy becomes available. 559  Although reseeding provides fresh entropy bits that are incorporated into an already instantiated 560  DRBG at a security strength of s bits, this Recommendation does not consider the reseed process 561  as increasing the DRBG’s security strength. For example, a reseed of a DRBG that has been 562  instantiated to support a security strength of 128 bits does not increase the DRBG’s security 563  strength to 256 bits when reseeding with 128 bits of fresh entropy. 564  An RBG1 construction has no access to a randomness source after instantiation and so cannot be 565  reseeded or recover from a compromise (see Section 4). Thus, it can never provide prediction 566  resistance. 567  An RBG2 construction contains an entropy source that is used to reseed the DRBG within the 568  construction (see Section 5) and recover from a possible compromise of the RBG’s internal state. 569  Prediction resistance may be requested by a consuming application during a request for the 570  generation of (pseudo) random bits. If sufficient entropy can be obtained from the entropy 571  source(s) at that time, the DRBG is reseeded before the requested bits are generated. If sufficient 572  entropy is not available, an error indication is returned, and no bits are generated for output. 573  Therefore, it is recommended that prediction resistance not be claimed for an RBG implementation 574  unless sufficient entropy is reliably available upon request. 575  An RBG3 construction is provided with fresh entropy for every RBG output (see Section 6). As a 576  result, every output from an RBG3 construction has prediction resistance. 577  For a more complete discussion of backtracking and prediction resistance, see [SP800-90A]. 578  RBG Security Boundaries 579  An RBG exists within a conceptual RBG security boundary that should be defined with respect to 580  one or more threat models that include an assessment of the applicability of an attack and the 581  potential harm caused by the attack. The RBG security boundary must be designed to assist in the 582  mitigation of these threats using physical or logical mechanisms or both. 583  The primary components of an RBG are a randomness source (i.e., an entropy source or an RBG 584  construction), a DRBG, and health tests for the RBG. RBG input (e.g., entropy bits and a 585  personalization string) shall enter an RBG only as specified in the functions described in Section 586  2.8. The security boundary of a DRBG is discussed in [SP800-90A]. The security boundary for an 587  entropy source is discussed in [SP800-90B]. Both the entropy source and the DRBG contain their 588  own health tests within their respective security boundaries. 589  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  9  Figure 2 shows an RBG implemented within a [FIPS 140]-validated cryptographic module. The 590  RBG security boundary shall either be the same as the cryptographic module boundary or be 591  completely contained within that boundary. The data input may be a personalization string or 592  additional input (see Section 2.4.1). The data output is status information and possibly random bits 593  or a state handle. Within the RBG security boundary of the figure are an entropy source and a 594  DRBG − each with its own (conceptual) security boundary. An entropy-source security boundary 595  includes a noise source, health tests, and (optionally) a conditioning component. A DRBG security 596  boundary contains the chosen DRBG, memory for the internal state, and health tests. An RBG 597  security boundary contains health tests and may also contain an (optional) external conditioning 598  function. The RBG2 and RBG3 constructions in Sections 5 and 6, respectively, use this model. 599  600  Fig. 2. Example of an RBG Security Boundary within a Cryptographic Module 601  Note that in the case of the RBG1 construction in Section 4, the security boundary containing the 602  DRBG does not include a randomness source (shown as an entropy source in Figure 2). 603  A cryptographic primitive (e.g., an approved hash function) used by an RBG may be used by 604  other applications within the same cryptographic module. However, these other applications shall 605  not modify or reveal the RBG’s output, intermediate values, or internal state. 606  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  10  Assumptions and Assertions 607  The RBG constructions in SP 800-90C are based on the use of validated entropy sources and the 608  following assumptions and assertions for properly functioning entropy sources: 609  1. An entropy source is independent of another entropy source if a) their security boundaries 610  do not overlap (e.g., they reside in separate cryptographic modules, or one is a physical 611  entropy source and the other is a non-physical entropy source), b) there are no common 612  noise sources,4 and c) statistical tests provide evidence of the independence of the entropy 613  sources. 614  2. The use of both validated and non-validated entropy sources is permitted in an 615  implementation, but only entropy sources that have been validated for compliance with 616  [SP800-90B] are used to provide the randomness input for seeding and reseeding a DRBG 617  or providing entropy for an RBG3 construction. 618  The following assumptions and assertions pertain to the use of validated entropy sources for 619  providing entropy bits: 620  3. For the purpose of analysis, it is assumed that a) the number of bits that are output by an 621  entropy source is never more than 264, and b) the number of output bits from the RBG is 622  never more than 264 bits for a DRBG instantiation. In the case of an RBG1 construction 623  with one or more subordinate DRBGs, the output limit applies to the total output provided 624  by the RBG1 construction and all of its subordinate DRBGs. 625  4. Each entropy-source output has a fixed length, ES_len (in bits). 626  5. Each entropy-source output is assumed to contain a fixed amount of entropy, denoted as 627  ES_entropy, that was assessed during entropy-source implementation validation. (See 628  [SP800-90B] for entropy estimation.) ES-entropy is assumed to be at least 0.1 bits per bit 629  of output. 630  6. Each entropy source has been characterized as either a physical entropy source or a non-631  physical entropy source upon successful validation. 632  7. The outputs from a single entropy source can be concatenated. The entropy of the resultant 633  bitstring is the sum of the entropy from each entropy-source output. For example, if m 634  outputs are concatenated, then the length of the bitstring is m × ES_len bits, and the entropy 635  for that bitstring is assumed to be m × ES_entropy bits. (This is a consequence of the model 636  of entropy used in [SP800-90B].) 637  8. The output of multiple independent entropy sources can be concatenated in an RBG. The 638  entropy in the resultant bitstring is the sum of the entropy in the output of each independent 639  entropy-source output that is considered to be contributing to the entropy in the bitstring 640  (see Methods 1 and 2 in Section 2.3). For example, suppose that the output from 641  independent physical entropy sources A and B and non-physical entropy source C are 642  concatenated. The length of the concatenated bitstring is the sum of the lengths of the 643  component bitstrings (i.e., ES_lenA + ES_lenB + ES_lenC). 644  4 They may, however, use the same type of noise source (e.g., both entropy sources could use ring oscillators but not the same ones).  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  11  • Using Method 1 in Section 2.3, the amount of entropy in the concatenated bitstring 645  is ES_entropyA + ES_entropyB. 646  • Using Method 2 in Section 2.3, the amount of entropy in the concatenated bitstring 647  is the sum of the entropies in the bitstrings (i.e., ES_entropyA + ES_entropyB + 648  ES_entropyC). 649  9. Under certain conditions, the output of one or more entropy sources can be externally 650  conditioned to provide full-entropy output. See Section 3.3.2 and Section 6.3.1 for the use 651  of this assumption and [NISTIR8427] for rationale. 652  Furthermore,  653  10. The amount of entropy in a subset bitstring that is “extracted” from the output block of an 654  approved hash function or block cipher is a proportion of the entropy in that block, such 655  that 656  𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = � 𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑒𝑒𝑒𝑒_𝑙𝑙𝑒𝑒𝑒𝑒 𝑒𝑒𝑠𝑠𝑒𝑒𝑒𝑒𝑠𝑠𝑒𝑒_𝑙𝑙𝑒𝑒𝑒𝑒�  𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑜𝑜𝑠𝑠𝑠𝑠𝑜𝑜𝑠𝑠𝑠𝑠_𝑠𝑠𝑏𝑏𝑜𝑜𝑏𝑏𝑏𝑏 657  where subset_len is the length of the subset bitstring, output_len is the length of the output 658  block, entropyoutput_block is the amount of entropy in the output block, and entropysubset is the 659  amount of entropy in the subset bitstring. 660  11. Full entropy bits can be extracted from the output block of a hash function or block cipher 661  when the amount of fresh entropy inserted into the algorithm exceeds the number of bits to 662  be extracted by at least 64 bits. For example, if output_len is the length of the output block, 663  all bits of the output block can be assumed to have full entropy if at least output_len + 64 664  bits of entropy are inserted into the algorithm. As another example, if a DRBG is reseeded 665  at its security strength s, (s − 64) bits with full entropy can be extracted from the DRBG’s 666  output block. 667  12. To instantiate a DRBG at a security strength of s bits, a bitstring of at least 3s/2 bits long 668  is needed from a randomness source for an RBG1 construction, and a bitstring with at least 669  3s/2 bits of entropy is needed from an entropy source for an RBG2 or RBG3 construction. 670  13. One or more of the constructions provided herein are used in the design of an RBG. 671  14. All components of an RBG2 and RBG3 construction (as specified in Sections 5 and 6) 672  reside within the physical boundary of a single [FIPS140]-validated cryptographic module. 673  15. The DRBGs specified in [SP800-90A] are assumed to meet their explicit security claims 674  (e.g., backtracking resistance, prediction resistance, claimed security strength, etc.). 675  The following assumptions and assertions have been made for the subordinate DRBGs (sub-676  DRBGs) that are seeded (i.e., initialized) using an RBG1 construction: 677  16. A sub-DRBG is considered to be part of the RBG1 construction that initializes it. 678  17. The assumptions and assertions in items 3, 10, and 14 (above) apply to sub-DRBGs. 679  General Implementation and Use Requirements and Recommendations 680  When implementing the RBGs specified in this Recommendation, an implementation: 681  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  12  1. Shall destroy intermediate values before exiting the function or routine in which they are 682  used,  683  2. Shall employ an “atomic” generate operation whereby a generate request is completed 684  before using any of the requested bits, 685  3. Should consider the threats posed by quantum computers in the future, and 686  4. Should be implemented with the capability to support a security strength of 256 bits or to 687  provide full-entropy output. 688  When using RBGs, the user or application requesting the generation of random or pseudorandom 689  bits should request only the number of bits required for a specific immediate purpose rather than 690  generating bits to be stored for future use. Since, in most cases, the bits are intended to be secret, 691  the stored bits (if not properly protected) are potentially vulnerable to exposure, thus defeating the 692  requirement for secrecy. 693  General Function Calls 694  Functions used within this document for accessing the DRBGs in [SP800-90A], the entropy 695  sources in [SP800-90B], and the RBG3 constructions specified in SP 800-90C are provided below. 696  Each function shall return a status code that shall be checked (e.g., a status of success or failure 697  by the function). 698  If the status code indicates a success, then additional information may also be returned, such as a 699  state handle from an instantiate function or the bits that were requested to be generated during a 700  generate function. 701  If the status code indicates a failure of an RBG component, then see Section 7.1.2 for error-702  handling guidance. Note that if the status code does not indicate a success, an invalid output (e.g., 703  a null bitstring) shall be returned with the status code if information other than the status code 704  could be returned. 705  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  13  706  Fig. 3. General Function Calls 707  2.8.1. DRBG Functions 708  SP 800-90A specifies several functions for use within a DRBG, indicating the input and output 709  parameters and other implementation details. Note that, in some cases, some input parameters may 710  be omitted, and some output information may not be returned. 711  At least two functions are required in a DRBG: 712  1. An instantiate function that seeds the DRBG using the output of a randomness source and 713  other input (see Section 2.8.1.1) and 714  2. A generate function that produces output for use by a consuming application (see Section 715  2.8.1.2). 716  A DRBG may also support a reseed function (see Section 2.8.1.3). A Get_randomness-717  source_input function is used in SP 800-90A to request output from a randomness source during 718  instantiation and reseeding (see Section 2.8.1.4). 719  The use of the Uninstantiate_function specified in SP 800-90A is not explicitly discussed in SP 720  800-90C but may be required by an implementation. 721  2.8.1.1. DRBG Instantiation 722  A DRBG shall be instantiated prior to the generation of pseudorandom bits at the highest security 723  strength to be supported by the DRBG instantiation using the following call: 724  (status, state_handle) = Instantiate_function(requested_instantiation_security_strength, 725  prediction_resistance_flag, personalization_string). 726  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  14  727  Fig. 4. Instantiate_function 728  The Instantiate_function (shown in Figure 4) is used to instantiate a DRBG at the 729  requested_instantiation_security_strength using the output of a randomness source5 and an 730  optional personalization_string to create seed material. A prediction_resistance flag may be used 731  to indicate whether subsequent Generate_function calls may request prediction resistance. As 732  stated in Section 2.4.1, a personalization_string is optional but strongly recommended. (Details 733  about the Instantiate_function are provided in [SP800-90A].) 734  If the returned status code for the Instantiate_function indicates a success (i.e., the DRBG has 735  been instantiated at the requested security strength), a state handle may6 be returned to indicate the 736  particular DRBG instance. When provided, the state handle will be used in subsequent calls to the 737  DRBG (e.g., during a Generate_function call) to identify the internal state information for the 738  instantiation. The information in the internal state includes the security strength of the instantiation, 739  the number of times that the instantiation has produced output, and other information that changes 740  during DRBG execution (see [SP800-90A] for each DRBG design). 741  When the DRBG has been instantiated at the requested_instantiation_security_strength, the 742  DRBG will operate at that security strength even if the requested_security_strength in subsequent 743  Generate_function calls (see Section 2.8.1.2) is less than the instantiated security strength. 744  If the status code indicates an error and an implementation is designed to return a state handle, an 745  invalid (e.g., Null) state handle shall be returned. 746  2.8.1.2. DRBG Generation Request 747  Pseudorandom bits are generated after DRBG instantiation using the following call: 748  (status, returned_bits) = Generate_function(state_handle, requested_number_of_bits, 749  requested_security_strength, prediction_resistance_request, additional_input). 750  5 The randomness source provides the randomness input required to instantiate the security strength of the DRBG.  6 In cases where only one instantiation of a DRBG will ever exist, a state handle need not be returned since only one internal state will be created.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  15  751  Fig. 5. Generate_function 752  The Generate_function (shown in Figure 5) requests that a DRBG generate a specified number 753  of bits. The request may indicate the DRBG instance to be used (using the state handle returned 754  by an Instantiate_function call; see Section 2.8.1.1), the number of bits to be returned, the security 755  strength that the DRBG needs to support for generating the bitstring, and whether or not prediction 756  resistance is to be obtained during this execution of the Generate_function. Optional additional 757  input may also be incorporated into the function call. As stated in Section 2.4.1, the ability to 758  handle and use additional input is recommended. 759  The Generate_function returns status information – either an indication of success or an error. If 760  the returned status code indicates a success, the requested number of bits is returned. 761  • If requested_number_of_bits is equal to or greater than the instantiated security strength, 762  the security strength that the returned_bits can support (if used as a key) is: 763  ss_key = the instantiated security strength, 764  where ss_key is the security strength of the key. 765  • If the requested_number of bits is less than the instantiated security strength, and the 766  returned_bits are to be used as a key, the key is capable of supporting a security strength 767  of: 768  ss_key = requested_number_of_bits. 769  If the status code indicates an error, the returned_bits shall consist of an invalid (e.g., Null) 770  bitstring that must not be used. Examples of conditions in which an error indication shall be 771  returned include the following: 772  • The requested_security_strength exceeds the instantiated security strength for the DRBG 773  (i.e., the security strength recorded in the DRBG’s internal state during instantiation). 774  • Prediction resistance has been requested but cannot be obtained at this time. 775  Details about the Generate_function are provided in Section 9.3 of [SP800-90A]. 776  2.8.1.3. DRBG Reseed Request 777  The reseeding of a DRBG instantiation is intended to insert additional entropy into that DRBG 778  instantiation (e.g., to recover from a possible compromise or to provide prediction resistance). This 779  is accomplished using the following call (note that this does not increase the security strength of 780  the DRBG): 781  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  16  status = Reseed_function(state_handle, additional_input). 782  783  Fig. 6. Reseed_function 784  A Reseed_function (shown in Figure 6) is used to acquire at least s bits of fresh entropy for the 785  DRBG instance indicated by the state handle (or the only instance if no state handle has been 786  provided), where s is the security strength of the DRBG.7 In addition to the randomness input 787  provided from the randomness source(s) during reseeding, optional additional input may be 788  incorporated into the reseed process. As discussed in Section 2.4.1, the capability for handling 789  and using additional input is recommended. (Details about the Reseed_function are provided in 790  [SP800-90A].) 791  An indication of the status is returned. 792  The Reseed_function is not permitted in an RBG1 construction (see Section 4) but is permitted 793  in the RBG2 and RBG3 constructions (see Sections 5 and 6, respectively). 794  2.8.1.4. The Get_randomness-source_input Call 795  A Get_randomness-source_input call is used in the Instantiate_function and Reseed_function 796  in [SP800-90A] to indicate when a randomness source (i.e., an entropy source or RBG) needs to 797  be accessed to obtain randomness input. Details are not provided in SP 800-90A about how the 798  Get_randomness-source_input call needs to be implemented. SP 800-90C provides guidance on 799  how the call should actually be implemented based on various situations. Sections 4, 5, and 6 800  provide instructions for obtaining input from a randomness source when the Get_randomness-801  source_input call is encountered in SP 800-90A.8 802  2.8.2. Interfacing with Entropy Sources Using the GetEntropy and 803  Get_ES_Bitstring Functions 804  2.8.2.1. The GetEntropy Call 805  An entropy source, as discussed in [SP800-90B], is a mechanism for producing bitstrings that 806  cannot be predicted and whose unpredictability can be quantified in terms of min-entropy. SP 800-807  90B uses the following call for accessing an entropy source: 808  (status, ES_output) = GetEntropy (bits_of_entropy), 809  7 The value of s is available in the DRBG’s internal state.  8 Note that, at this time, modifications to the Instantiate_function and Reseed_function specification in SP 800-90A and to the appropriate  algorithms in Section 10 of that document may be required to accommodate the specific requests for entropy for each RBG construction.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  17  where bits_of_entropy is the amount of entropy requested, ES_output is a bitstring containing the 810  requested amount of entropy, and status indicates whether or not the request has been satisfied. 811  See Figure 7. 812  813  Fig. 7. GetEntropy function 814  If the status indicates a success, a bitstring of at least bits_of_entropy long is returned as the 815  ES_output. ES_output must contain at least the requested amount of entropy indicated by the 816  bits_of_entropy input parameter. If the status does not indicate a success, an invalid ES_output 817  bitstring is returned (e.g., ES_output could be a null bitstring). 818  2.8.2.2. The Get_ES_Bitstring Function 819  A single GetEntropy call may not be sufficient to obtain the entropy required for seeding and 820  reseeding a DRBG and for providing input for the exclusive-or operation in an RBG3(XOR) 821  construction (see Section 6.2). Therefore, SP 800-90C uses a Get_ES_Bitstring function (see 822  Figure 8) to obtain the required entropy from one or more GetEntropy calls. The 823  Get_ES_Bitstring function is invoked as follows: 824  (status, entropy_bitstring) = Get_ES_Bitstring(bits_of_entropy), 825  where bits_of_entropy is the amount of entropy requested in the returned entropy_ bitstring, and 826  status indicates whether or not the request has been satisfied. 827  828  Fig. 8. Get_ES_Bitstring function 829  Note that if non-validated entropy sources are used (e.g., to provide entropy to be used as additional 830  input), they shall be accessed using a different function than is used to access validated entropy 831  sources (i.e., the Get_ES_Bitstring function). 832  If the returned status from the Get_ES_Bitstring function indicates a success, the requested 833  amount of entropy (i.e., indicated by bits_of_entropy) shall be returned in the entropy_bitstring, 834  whose length is equal to or greater than bits_of_entropy. If the status does not indicate a success, 835  an invalid entropy_bitstring shall be returned (e.g., entropy_bitstring is a null bitstring). 836  The Get_ES_Bitstring function will be used in this document to access validated entropy sources 837  to obtain one or more bitstrings with entropy using GetEntropy calls. 838  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  18  See Section 3.1 for additional discussion about the Get_ES_Bitstring function. 839  2.8.3. Interfacing with an RBG3 Construction 840  An RBG3 construction requires interface functions to instantiate its DRBG (see Section 2.8.3.1) 841  and to request the generation of full-entropy bits (see Section 2.8.3.2). 842  2.8.3.1. Instantiating a DRBG within an RBG3 Construction 843  The RBG3_DRBG_Instantiate function is used to instantiate the DRBG within the RBG3 844  construction using the following call: 845  (status, state_handle) = RBG3_DRBG_Instantiate(prediction_resistance_flag, 846  personalization_string). 847  848  Fig. 9. RBG3 DRBG_Instantiate function 849  The RBG3’s instantiate function (shown in Figure 9) will result in a call to the DRBG’s 850  Instantiate_function (provided in Section 2.8.1.1). An optional but recommended 851  personalization_string (see Section 2.4.1) may be provided as an input parameter. If included, the 852  personalization_string shall be passed to the DRBG that is instantiated in the 853  Instantiate_function request. See Sections 6.2.1.1 and 6.3.1.1 for more specificity. 854  If the returned status code indicates a success, a state handle may be returned to indicate the 855  particular DRBG instance that is to be used by the construction. Note that if multiple instances of 856  the DRBG are used, a separate state handle shall be returned for each instance. When provided, 857  the state handle shall be used in subsequent calls to that RBG (e.g., during a call to the generate 858  function) when multiple instances of the DRBG have been instantiated. If the status code indicates 859  an error (e.g., entropy is not currently available, or the entropy source has failed), an invalid (e.g., 860  Null) state handle shall be returned. 861  2.8.3.2. Generation Using an RBG3 Construction 862  The RBG3(XOR) and RBG3(RS) generate functions are different because of the difference in their 863  designs (see Sections 6.2.1.2 and 6.3.1.2). 864  For the RBG3(XOR) construction, the generate function is invoked using the following call: 865  (status, returned_bits) = RBG3(XOR)_Generate(state_handle, requested_number_of_bits, 866  prediction_resistance_request, additional_input). 867  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  19  868  Fig. 10. RBG3(XOR)_Generate function 869  For the RBG3(RS) construction, the generate function is invoked using the following call: 870  (status, returned_bits) = RBG3(RS)_Generate(state_handle, 871  requested_number_of_bits, additional_input). 872  873  Fig. 11. RBG3(RS)_Generate function 874  The RBG3(XOR)_Generate function (shown in Figure 10) includes a 875  prediction_resistance_request parameter to request a reseed of the RBG3(XOR)’s DRBG 876  instantiation, when desired. This parameter is not included as a parameter for the 877  RBG3(RS)_Generate function (shown in Figure 11) since this design always reseeds itself during 878  execution. 879  The generate functions result in calls to the entropy sources and the DRBG instantiation used by 880  the RBG3 construction. This call accesses the DRBG using the Generate_function call provided 881  in Section 2.8.1.2. The input parameters to the two generate functions are used when calling the 882  DRBG instantiation used by that RBG3 construction. 883  If the returned status code indicates a success, a bitstring that contains the newly generated bits is 884  returned. The RBG then uses the resulting bitstring as specified for each RBG3 construction (see 885  Section 6). 886  If the status code indicates an error (e.g., the entropy source has failed), an invalid (e.g., Null) 887  bitstring shall be returned as the returned_bits.  888  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  20  Accessing Entropy Source Output 889  The security provided by an RBG is based on the use of validated entropy sources. Section 3.1 890  discusses the use of the Get_ES_Bitstring function to request entropy from one or more entropy 891  sources. Section 3.2 discusses the behavior required by an entropy source. Section 3.3 discusses 892  the conditioning of the output of one or more entropy sources to obtain a bitstring with full entropy 893  before further use by an RBG. 894  The Get_ES_Bitstring Function 895  The Get_ES_Bitstring function specified in Section 2.8.2.2 is used within an RBG to obtain 896  entropy from one or more validated entropy sources using one or more GetEntropy calls (see 897  Sections 2.8.2.1 and 3.2) in whatever manner is required (e.g., by polling the entropy sources or 898  by extracting bits containing entropy from a pool of collected bits). The Get_ES_Bitstring 899  function shall only be used to access validated entropy sources to obtain the entropy for seeding 900  and reseeding a DRBG and for providing input for the exclusive-or operation of an RBG3(XOR) 901  construction (see Section 6.2). 902  In many cases, the Get_ES_Bitstring function will need to query an entropy source (or a set of 903  entropy sources) multiple times to obtain the amount of entropy requested. For the most part, the 904  construction of the Get_ES_Bitstring function itself is not specified in this document but is left 905  to the developer to implement appropriately for the selected entropy sources. 906  The behavior of the Get_ES_Bitstring function shall be as follows: 907  1. A Get_ES_Bitstring function shall only be used to access one or more validated entropy 908  sources. 909  2. The entropy bitstrings produced from multiple entropy-source calls to a single validated 910  entropy source or by calls to multiple validated entropy sources shall be concatenated into 911  a single bitstring. The entropy in the bitstring is computed as the sum of the entropy 912  produced by each call to a validated entropy source that is to be counted as contributing 913  entropy to the bitstring (see Section 2.3).9 914  3. If a failure is reported during an invocation of the Get_ES_Bitstring function by any 915  physical or non-physical entropy source whose entropy is counted toward fulfilling an 916  entropy request, the failure shall be handled as discussed in Section 7.1.2. 917  4. If a non-physical entropy source whose entropy is not counted reports a failure, the failure 918  shall be reported to the RBG or the consuming application. 919  5. The Get_ES_Bitstring function shall not return an entropy_bitstring unless the bitstring 920  contains sufficient entropy to fulfill the entropy request. The returned status shall indicate 921  a success only when this condition is met. 922  9 For Method 1 in Section 3.3, only entropy contributed by one or more validated physical entropy sources is counted. For Method 2, the entropy  from all validated entropy sources is counted.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  21  Entropy Source Requirements 923  This Recommendation requires the use of one or more validated entropy sources to provide 924  entropy for seeding and reseeding a DRBG and for input to the XOR operation in the RBG3(XOR) 925  construction specified in Section 6.2. In addition to the assumptions and assertions concerning 926  entropy sources in Section 2.6, the following conditions shall be met when using these entropy 927  sources: 928  1. Only validated entropy sources shall be used to provide the entropy bitstring for seeding 929  and reseeding a DRBG and for providing input to the XOR operation in the RBG3(XOR) 930  construction. 931  Non-validated entropy sources may be used by an RBG to provide input for personalization 932  strings and/or the additional input in DRBG function calls (see Section 2.4.1). 933  2. Each validated entropy source shall be independent of all other validated or non-validated 934  entropy sources used by the RBG. 935  3. The outputs from an entropy source shall not be reused (e.g., the value in the entropy 936  source is erased after being output). 937  4. When queried for entropy, the validated entropy sources must respond as follows: 938  a. The requested output must be returned only if the returned status indicates a 939  success. In this case, the ES-output bitstring must contain the requested amount of 940  entropy. (Note that the ES-output bitstring may be longer than the amount of 941  entropy requested, i.e., the bitstring may not have full entropy.) 942  b. If an indication of a failure is returned by a validated entropy source as the status, 943  an invalid (e.g., Null) bitstring shall be returned as ES_output. 944  5. If the validated entropy-source components operate continuously regardless of whether 945  requests are received and a failure is determined, the entropy source shall immediately 946  report the failure to the RBG (see Section 7.1.2). 947  6. If a validated entropy source reports a failure (e.g., because of a failed health test), the 948  entropy source shall not produce output (except possibly for a failure status indication) 949  until the failure is corrected. The entropy source shall immediately report the failure to the 950  Get_ES_Bitstring function (see Section 3.1). If multiple validated entropy sources are 951  used, the report shall identify the entropy source that reported the failure. 952  7. A detected failure of any entropy source shall cause the RBG to report the failure to the 953  consuming application and terminate the RBG operation. The RBG must not be returned 954  to normal operation until the conditions that caused the failure have been corrected and 955  tested for successful operation. 956  External Conditioning to Obtain Full-Entropy Bitstrings 957  An RBG3(XOR) construction (see Section 6.2) and a CTR_DRBG without a derivation function 958  in an RBG2 or RBG3 construction (see Sections 5 and 6) require bitstrings with full entropy from 959  an entropy source. If the validated entropy source does not provide full-entropy output, a method 960  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  22  for conditioning the output to obtain a bitstring with full entropy is needed. Since this conditioning 961  is performed outside an entropy source, the output is said to be externally conditioned. 962  When external conditioning is performed, the vetted conditioning function listed in [SP800-90B] 963  shall be used. 964  3.3.1. Conditioning Function Calls 965  The conditioning functions operate on bitstrings obtained from one or more calls to the entropy 966  source(s). 967  The following format is used in Section 3.3.2 for a conditioning-function call: 968  conditioned_output = Conditioning_function(input_parameters), 969  where the input_parameters for the selected conditioning function are discussed in Sections 3.3.1.2 970  and 3.3.1.3, and conditioned_output is the output returned by the conditioning function. 971  3.3.1.1. Keys Used in External Conditioning Functions 972  The HMAC, CMAC, and CBC-MAC vetted conditioning functions require the input of a Key of 973  a specific length (keylen). Unlike other cryptographic applications, keys used in these external 974  conditioning functions do not require secrecy to accomplish their purpose so may be hard-coded, 975  fixed, or all zeros. 976  For the CMAC and CBC-MAC conditioning functions, the length of the key shall be an 977  approved key length for the block cipher used (e.g., keylen = 128, 192, or 256 bits for AES). 978  For the HMAC conditioning function, the length of the key shall be equal to the length of the hash 979  function’s output block (i.e., output_len). 980  Table 2. Key Lengths for the Hash-based Conditioning Functions 981  Hash Function Length of the output block  (output_len) and key (keylen)  SHA-224, SHA-512/224, SHA3-224 224  SHA-256, SHA-512/256, SHA3-256 256  SHA-384, SHA3-384 384  SHA-512, SHA3-512 512  Using random keys may provide some additional security in case the input is more predictable 982  than expected. Thus, these keys should be chosen randomly in some way (e.g., by drawing bits 983  directly from the entropy source and inserting them into the key or by providing entropy-source 984  bits to a conditioning function with a fixed key to derive the new key). Note that any entropy used 985  to randomize the key shall not be used for any other purpose (e.g., as input to the conditioning 986  function). 987  3.3.1.2. Hash Function-based Conditioning Functions 988  Conditioning functions may be based on approved hash functions. 989  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  23  One of the following calls shall be used for external conditioning when the conditioning function 990  is based on a hash function: 991  1. Using an approved hash function directly: 992  conditioned_output = Hash(entropy_bitstring), 993  where the hash function operates on the entropy_bitstring provided as input. 994  2. Using HMAC with an approved hash function: 995  conditioned_output = HMAC(Key, entropy_bitstring), 996  where HMAC operates on the entropy_bitstring using a Key determined as specified in 997  Section 3.3.1.1. 998  3. Using Hash_df as specified in SP 800-90A: 999  conditioned_output = Hash_df(entropy_bitstring, output_len),  1000  where the derivation function operates on the entropy_bitstring provided as input to 1001  produce a bitstring of output_len bits. 1002  In all three cases, the length of the conditioned output is equal to the length of the output block of 1003  the selected hash function (i.e., output_len). 1004  3.3.1.3. Block Cipher-based Conditioning Functions 1005  Conditioning functions may be based on approved block ciphers.10 TDEA shall not be used as 1006  the block cipher (see Section 2.6). 1007  For block cipher-based conditioning functions, one of the following calls shall be used for external 1008  conditioning: 1009  1. Using CMAC (as specified in [SP800-38B]) with an approved block cipher: 1010  conditioned_output = CMAC(Key, entropy_bitstring), 1011  where CMAC operates on the entropy_bitstring using a Key determined as specified in 1012  Section 3.3.1.1. 1013  2. Using CBC-MAC (specified in Appendix F of [SP800-90B]) with an approved block 1014  cipher: 1015  conditioned_output = CBC-MAC(Key, entropy_bitstring), 1016  where CBC-MAC operates on the entropy_bitstring using a Key determined as specified 1017  in Section 3.3.1.1. 1018  10 At the time of publication, only AES-128, AES-192, and AES-256 were approved as block ciphers for the  conditioning functions (see SP 800-90B). In all three cases, the block length is 128 bits.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  24  CBC-MAC shall only be used as an external conditioning function under the following 1019  conditions: 1020  a. The length of the input is an integer multiple of the block size of the block cipher 1021  (e.g., a multiple of 128 bits for AES) − no padding is done by CBC-MAC itself.11 1022  b. All inputs to CBC-MAC in the same RBG shall have the same length. 1023  c. If the CBC-MAC conditioning function is used to obtain full entropy from an 1024  entropy source for CTR_DRBG instantiation or reseeding: 1025   A personalization string shall not be used during instantiation. 1026   Additional input shall not be used during the reseeding of the 1027  CTR_DRBG but may be used during the generate process. 1028  CBC-MAC is not approved for any use other than in an RBG (see [SP800-90B]). 1029  3. Using the Block_cipher_df as specified in [SP800-90A] with an approved block cipher: 1030  conditioned_output = Block_cipher_df(entropy_bitstring, block_length), 1031  where Block_cipher_df operates on the entropy_bitstring using a key specified within the 1032  function, and the block_length is 128 bits for AES. 1033  In all three cases, the length of the conditioned output is equal to the length of the output block 1034  (i.e., 128 bits for AES). If the requested amount of entropy is requested for subsequent use by an 1035  RBG,12 then multiple iterations of the conditioning function may be required, each using a different 1036  entropy_bitstring. 1037  3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings 1038  This construction will produce a bitstring with full entropy using one of the conditioning functions 1039  identified in Section 3.3.1.1 for an RBG2 or RBG3 construction whenever a bitstring with full 1040  entropy is required (e.g., to seed or reseed a CTR_DRBG with no derivation function or to provide 1041  full entropy for the RBG3(XOR) construction). This process is unnecessary if the entropy source 1042  provides full-entropy output. 1043  Let output_len be the length of the output block of the vetted conditioning function to be used; 1044  output_len is the length of the hash function’s output block when a hash-based conditioning 1045  function is used (see Section 3.3.1.2); output_len = 128 when an AES-based conditioning function 1046  is used (see Section 3.3.1.3). 1047  The approach used by this construction is to acquire sufficient entropy from the entropy source to 1048  produce output_len bits with full entropy in the conditioning function’s output block, where 1049  output_len is the length of the output block. The amount of entropy required for each use of the 1050  conditioning function is output_len + 64 bits (see item 11 of Section 2.6). This process is repeated 1051  until the requested number of full-entropy bits have been produced. 1052  11 Any padding required could be done before submitting the entropy_bitstring to the CBC-MAC function.  12 Since the output block of AES is only 128 bits, this will often be the case when seeding or reseeding a DRBG.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  25  The Get_conditioned_full_entropy_ input function below obtains entropy from one or more 1053  entropy sources using the Get_ES_Bitstring function discussed in Section 3.1 and conditions it 1054  to provide an n-bit string with full entropy. 1055  Get_conditioned_full_entropy_input: 1056  Input: integer n. Comment: the requested number of full-entropy bits. 1057  Output: integer status, bitstring returned_bitstring. 1058  Process: 1059  1. temp = the Null string. 1060  2. ctr = 0. 1061  3. While ctr < n, do 1062  3.1  (status, entropy_bitstring) = Get_ES_Bitstring(output_len + 64). 1063  3.2 If (status ≠ SUCCESS), then return (status, invalid_bitstring). 1064  3.3 conditioned_output = Conditioning_function(input_parameters). 1065  3.4 temp = temp || conditioned_output. 1066  3.5 ctr = ctr + output_len. 1067  4. returned_bitstring = leftmost(temp, n). 1068  5. Return (SUCCESS, returned_bitstring). 1069  Steps 1 and 2 initialize the temporary bitstring (temp) for storing the full-entropy bitstring being 1070  assembled and the counter (ctr) that counts the number of full-entropy bits produced for each 1071  iteration of step 3. 1072  Step 3 obtains and processes the entropy for each iteration. 1073  • Step 3.1 requests output_len + 64 bits from the validated entropy sources. When the output 1074  of multiple entropy sources is used, the entropy counted for fulfilling the request for outlen 1075  + 64 bits is determined using Method 1 or Method 2 as specified in Section 2.3 in the 1076  following situations: 1077  Method 1 shall be used when: 1078  Instantiating and reseeding an RBG2(P) construction containing a CTR_DRBG with no 1079  derivation function (see Section 5.2.1, item 1b, and Section 5.2.3), 1080  Instantiating and reseeding a CTR_DRBG with no derivation function that is used within 1081  an RBG3 construction (see Section 6.1, requirement 1), or 1082  Generating bits in an RBG3(XOR) construction (see Section 6.2.1.2, step 1). 1083  Method 2 shall be used when instantiating and reseeding an RBG2(NP) construction 1084  containing a CTR_DRBG with no derivation function (see Section 5.2.1, item 1b, and 1085  Section 5.2.3). 1086  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  26  • Step 3.2 checks whether or not the status returned in step 3.1 indicated a success. If the 1087  status did not indicate a success, the status is returned along with an invalid bitstring as the 1088  returned_bitstring (e.g., invalid_bitstring is Null). 1089  • Step 3.3 invokes the conditioning function for processing the entropy_bitstring obtained 1090  from step 3.1. The input_parameters for the selected Conditioning_function are specified 1091  in Sections 3.3.1.2 or 3.3.1.3, depending on the conditioning function used. 1092  • Step 3.4 concatenates the conditioned_output received in step 3.3 to the temporary bitstring 1093  (temp), and step 3.5 increments the counter for the number of full-entropy bits that have 1094  been produced so far. 1095  • If at least n full-entropy bits have not been produced, repeat the process starting at step 3.1. 1096  • Step 4 truncates the full-entropy bitstring to n bits. 1097  • Step 5 returns an n-bit full-entropy bitstring as the returned_bitstring.  1098  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  27  RBG1 Constructions Based on RBGs with Physical Entropy Sources 1099  An RBG1 construction provides a source of cryptographic random bits from a device that has no 1100  internal randomness source. Its security depends entirely on being instantiated securely from an 1101  RBG with access to a physical entropy source that resides outside of the device. 1102  An RBG1 construction is instantiated (i.e., seeded) only once before its first use by an RBG2(P) 1103  construction (see Section 5) or an RBG3 construction (see Section 6). Since a randomness source 1104  is not available after DRBG instantiation, an RBG1 construction cannot be reseeded and, therefore, 1105  cannot provide prediction resistance. 1106  An RBG1 construction may be useful for constrained devices in which an entropy source cannot 1107  be implemented or in any device in which access to a suitable source of randomness is not available 1108  after instantiation. Since an RBG1 construction cannot be reseeded, the use of the DRBG is limited 1109  to the DRBG’s seedlife (see [SP800-90A]). 1110  Subordinate DRBGs (sub-DRBGs) may be used within the security boundary of an RBG1 1111  construction (see Section 4.3). The use of one or more sub-DRBGs may be useful for 1112  implementations that use flash memory, such as when the number of write operations to the 1113  memory is limited (resulting in short device lifetimes) or when there is a need to use different 1114  DRBG instantiations for different purposes. The RBG1 construction is the source of the 1115  randomness that is used to (optionally) instantiate one or more sub-DRBGs. Each sub-DRBG is a 1116  DRBG specified in SP 800-90A and is intended to be used for a limited time and a limited purpose. 1117  A sub-DRBG is, in fact, a different instantiation of the DRBG design implemented within the 1118  RBG1 construction (see Section 2.4.1). 1119  RBG1 Description 1120  As shown in Figure 12, an RBG1 construction consists of a DRBG contained within a DRBG 1121  security boundary in one cryptographic module and an RBG (serving as a randomness source) 1122  contained within a separate cryptographic module from that of the RBG1 construction. Note that 1123  the required health tests are not shown in the figure. 1124  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  28  1125  Fig. 12. RBG1 Construction 1126  The RBG for instantiating the DRBG within the RBG1 construction must be either an RBG2(P) 1127  construction that has support for prediction resistance requests ( see Section 5) or an RBG3 1128  construction (see Section 6). A physically secure channel between the randomness source and the 1129  DRBG is used to securely transport the randomness input required for the instantiation of the 1130  DRBG. An optional recommended personalization string and optional additional input may be 1131  provided from within the DRBG’s cryptographic module or from outside of that module (see 1132  Section 2.4.1). 1133  An external conditioning function is not needed for this design because the output of the RBG has 1134  already been cryptographically processed. 1135  The output from an RBG1 construction may be used within the cryptographic module (e.g., to seed 1136  a sub-DRBG as specified in Section 4.3) or by an application outside of the RBG1 security 1137  boundary. 1138  The security strength provided by the RBG1 construction is the minimum of the security strengths 1139  provided by the DRBG within the construction, the secure channel, and the RBG used to seed the 1140  DRBG. 1141  Examples of RBG1 and sub-DRBG constructions are provided in Appendices B.2 and B.3, 1142  respectively. 1143  Conceptual Interfaces 1144  Interfaces to the DRBG within an RBG1 construction include function calls for instantiating the 1145  DRBG and generating pseudorandom bits upon request (see Sections 4.2.1 and 4.2.2). 1146  Note that reseeding is not included in this construction. 1147  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  29  4.2.1. Instantiating the DRBG in the RBG1 Construction 1148  The DRBG within the RBG1 construction may be instantiated at any security strength possible for 1149  the DRBG design using the Instantiate_function discussed in Section 2.8.1.1 and [SP800-90A], 1150  subject to the maximum security strength that is supported by the RBG used as the randomness 1151  source. 1152  (status, RBG1_state_handle) =  1153  Instantiate_function (s, prediction_resistance_flag = FALSE, personalization_string), 1154  where s is the requested security strength for the DRBG in the RBG1 construction. If used, the 1155  prediction_resistance_flag is set to FALSE since the DRBG cannot be reseeded to provide 1156  prediction resistance. 1157  An external RBG (i.e., the randomness source) shall be used to obtain the bitstring necessary for 1158  establishing the DRBG’s s-bit security strength. 1159  In SP 800-90A, the Instantiate_function specifies the use of a Get_randomness-source_input 1160  call to obtain randomness input from the randomness source for instantiation (see Section 2.8.1.4 1161  in this document and in [SP800-90A]). For an RBG1 construction, an approved external RBG2(P) 1162  or RBG3 construction must be used as the randomness source (see Sections 5 and 6, respectively). 1163  If the randomness source is an RBG2(P) construction (see Figure 13), the Get_randomness-1164  source_input call in the Instantiate_function shall be replaced by a Generate_function call to 1165  the RBG2(P) construction (in whatever manner is required) (see Sections 2.8.1.2 and 5.2.2). The 1166  RBG2(P) construction must be reseeded using its internal entropy source(s) before generating bits 1167  to be provided to the RBG1 construction. This is accomplished by setting the 1168  prediction_resistance_request parameter in the Generate_function call to TRUE (see steps 1a 1169  and 2a below). 1170  1171  Fig. 13. Instantiation Using an RBG2(P) Construction as a Randomness Source 1172  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  30  If the randomness source is an RBG3 construction (as shown in Figure 14), the Get_randomness-1173  source_input call shall be replaced by the appropriate RBG3 generate function (see Sections 1174  2.8.3.2, 6.2.1.2, and 6.3.1.2 and steps 1b, 1c, 2b, and 2c below). 1175  1176  Fig. 14. Instantiation using an RBG3(XOR) or RBG3(RS) Construction as a Randomness Source 1177  Let s be the security strength to be instantiated. The DRBG within an RBG1 construction is 1178  instantiated as follows: 1179  1. When an RBG1 construction is instantiating a CTR_DRBG without a derivation function, 1180  s + 128 bits13 shall be obtained from the randomness source as follows: 1181  If the randomness source is an RBG2(P) construction (see Figure 13), the 1182  Get_randomness-source_input call is replaced by: 1183  (status, randomness-source_input) = Generate_function(RBG2_state_handle, s + 1184  128, s, prediction_resistance_request = TRUE, additional_input). 1185  Note that the DRBG within the RBG2(P) construction must be reseeded before 1186  generating output.14 This may be accomplished by requesting prediction resistance 1187  (i.e., setting prediction_resistance_request = TRUE). See Requirement 17 in Section 1188  4.4.1. 1189  13 For AES, the block length is 128 bits, and the key length is equal to the security strength s. SP 800-90A requires the randomness input from the  randomness source to be key length + block length bits when a derivation function is not used.  14 See Requirement 11 in Section 5.4.1.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  31  If the randomness source is an RBG3(XOR) construction (see Figure 14), the 1190  Get_randomness-source_input call is replaced by: 1191  (status, randomness-source_input) = RBG3(XOR)_Generate(RBG3_state_handle, s 1192  + 128, prediction_resistance_request, additional_input). 1193  A request for prediction resistance from the DRBG used by the RBG3(XOR) 1194  construction is optional. 1195  c) If the randomness source is an RBG3(RS) construction (see Figure 14), the 1196  Get_randomness-source_input call is replaced by: 1197  (status, randomness-source_input) = RBG3(RS)_Generate(RBG3_state_handle, 1198  3s/2, additional_input). 1199  2. When an RBG1 construction is instantiating any other DRBG (including a CTR_DRBG 1200  with a derivation function), 3s/2 bits shall be obtained from a randomness source that 1201  provides a security strength of at least s bits. 1202  a) If the randomness source is an RBG2(P) construction (see Figure 13), the 1203  Get_randomness-source_input call is replaced by: 1204  (status, randomness-source_input) = Generate_function(RGB2_state_handle, 3s/2, 1205  s, prediction_resistance_request = TRUE, additional_input). 1206  Note that the DRBG within the RBG2(P) construction must be reseeded before 1207  generating output. This is accomplished by requesting prediction resistance (i.e., by 1208  setting prediction_resistance_request = TRUE). See Requirement 17 in Section 4.4. 1209  b) If the randomness source is an RBG3(XOR) construction (see Figure 14), the 1210  Get_randomness-source_input call is replaced by: 1211  (status, randomness-source_input) = RBG3(XOR)_Generate(RBG3_state_handle, 1212  3s/2, prediction_resistance_request, additional_input). 1213  A request for prediction resistance from the DRBG used by the RBG3(XOR) 1214  construction is optional. 1215  c) If the randomness source is an RBG3(RS) construction (see Figure 14), the 1216  Get_randomness_-sourceinput call is replaced by: 1217  (status, randomness-source_input) = RBG3(RS)_Generate(RBG3_state_handle, 1218  3s/2, additional_input). 1219  4.2.2. Requesting Pseudorandom Bits 1220  Pseudorandom bits from the RBG1 construction shall be requested using the following call: 1221  (status, returned_bits) = Generate_function(RBG1_state_handle, 1222  requested_number_of_bits, s, prediction_resistance_request = FALSE, additional_input). 1223  The prediction_resistance_request is set to FALSE or the parameter may be omitted since a 1224  reseeding capability is not included in an RBG1 construction. 1225  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  32  Using an RBG1 Construction with Subordinate DRBGs (Sub-DRBGs) 1226  Figure 15 depicts an example of the use of optional subordinate DRBGs (sub-DRBGs) within the 1227  security boundary of an RBG1 construction. The RBG1 construction is used as the randomness 1228  source to provide separate outputs to instantiate each of its sub_DRBGs. 1229  1230  Fig. 15. RBG1 Construction with Sub-DRBGs 1231  The RBG1 construction and each of its sub-DRBGs shall be implemented as separate physical or 1232  logical entities (see Figure 15). 1233  • When implemented as separate physical entities, the DRBG algorithms used by the RBG1 1234  construction and a sub-DRBG shall be the same DRBG algorithm (e.g., the RBG1 1235  construction and all of its sub_DRBGs use HMAC_DRBG and SHA-256). 1236  • When implemented as separate logical entities, the same software or hardware 1237  implementation of a DRBG algorithm is used but with a different internal state for each 1238  logical entity (e.g., the RBG1 construction has an internal state whose state handle is 1239  RBG1_state_handle, while the state handle for Sub-DRBG 1’s internal state is sub-1240  DRBG1_state_handle). 1241  The sub-DRBGs have the following characteristics: 1242  1. A sub-DRBG cannot be reseeded or provide prediction resistance. 1243  2. Sub-DRBG outputs are considered outputs from the RBG1 construction. 1244  3. The security strength that can be provided by a sub-DRBG is no more than the security 1245  strength of its randomness source (i.e., the RBG1 construction). 1246  4. Each sub-DRBG has restrictions on its use (e.g., the number of outputs) as specified for its 1247  DRBG algorithm in [SP800-90A]. 1248  5. Sub-DRBGs cannot provide output with full entropy. 1249  6. The number of sub-DRBGs that can be instantiated by a RBG1 construction is limited only 1250  by practical considerations associated with the implementation or application. 1251  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  33  4.3.1. Instantiating a Sub-DRBG 1252  Instantiation of the sub-DRBG is requested (e.g., by a consuming application) using the 1253  Instantiate_function discussed in Section 2.8.1.1 and [SP800-90A]. 1254  (status, sub-DRBG_state_handle) =  1255  Instantiate_function(s, prediction_resistance_flag = FALSE, personalization_string), 1256  where s is the requested security strength for the (target) sub-DRBG (note that s must be no greater 1257  than the security strength of the RBG1 construction).15 1258  The (target) sub-DRBG is instantiated as follows: 1259  1. When the sub-DRBG uses CTR_DRBG without a derivation function, s + 128 bits16 shall 1260  be obtained from the RBG1 construction as follows: 1261  (status, randomness-source_input) = Generate_function(RBG1_state_handle, s + 1262  128, s, prediction_resistance_request = FALSE, additional_input). 1263  2. When the sub-DRBG uses any other DRBG (including a CTR_DRBG with a derivation 1264  function), 3s/2 bits shall be obtained from the RBG1 construction as follows: 1265  (status, randomness-source_input) = Generate_function(RBG1_state_handle, 3s/2, 1266  s, prediction_resistance_request = FALSE, additional_input). 1267  4.3.2. Requesting Random Bits 1268  Pseudorandom bits may be requested from a sub-DRBG using the following call (see Section 1269  2.8.1.2): 1270  (status, returned_bits) = Generate_function(sub_DRBG_state_handle, 1271  requested_number_of_bits, requested_security_strength, prediction_resistance_request = 1272  FALSE, additional_input), 1273  where sub_DRBG_state_handle (if used) was returned by the Instantiate_function (see Sections 1274  2.8.1.1 and 4.3.1). 1275  Requirements 1276  4.4.1. RBG1 Requirements 1277  An RBG1 construction being instantiated has the following testable requirements (i.e., testable by 1278  the validation labs): 1279  1. An approved DRBG from [SP800-90A] whose components are capable of providing the 1280  targeted security strength for the RBG1 construction shall be employed. 1281  15 The implementation is required to check the requested security strength (for the sub-DRBG) against the security strength recorded in the internal  state of the RBG1’s DRBG (see SP 800-90A).  16 For AES, the block length is 128 bits, and the key length is equal to the security strength s. SP 800-90A requires the randomness input from the  randomness source to be (key length + block length) bits when a derivation function is not used.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  34  2. The RBG1 components shall be successfully validated for compliance with [SP800-90A], 1282  SP 800-90C, [FIPS140], and the specification of any other approved algorithm used within 1283  the RBG1 construction, as applicable. 1284  3. The RBG1 construction shall not produce any output until it is instantiated. 1285  4. The RBG1 construction shall not include a reseed capability. 1286  5. The RBG1 construction shall not permit itself to be instantiated more than once.17 1287  6. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), 3s/2 bits 1288  shall be obtained from a randomness source (see Requirements 13 - 17), where s is the 1289  targeted security strength for the DRBG used in the RBG1 construction. 1290  7. For a CTR_DRBG (without a derivation function), s + 128 bits18 shall be obtained from 1291  the randomness source (see Requirements 13 - 17), where s is the targeted security strength 1292  for the DRBG used in the RBG1 construction. 1293  8. The internal state of the RBG1 construction shall be maintained19 and updated to produce 1294  output on demand. 1295  9. The RBG1 construction shall not provide output for generating requests that specify a 1296  security strength greater than the instantiated security strength of its DRBG. 1297  10. If the RBG1 construction is used to instantiate a sub-DRBG, the RBG1 construction may 1298  directly produce output in addition to instantiating the sub-DRBG. 1299  11. If the seedlife of the DRBG within the RBG1 construction is ever exceeded or a health test 1300  of the DRBG fails, the use of the RBG1 construction shall be terminated. 1301  12. If a health test on the RBG1 construction fails, the RBG1 construction and all of its sub-1302  DRBGs shall be terminated. 1303  The non-testable requirements for the RBG1 construction are listed below. If these requirements 1304  are not met, no assurance can be obtained about the security of the implementation. 1305  13. An approved RBG2(P) construction with support for prediction resistance requests or an 1306  RBG3 construction must be used as the randomness source for the DRBG in the RBG1 1307  construction. 1308  14. The randomness source must fulfill the requirements in Section 5 (for an RBG(P) 1309  construction) or Section 6 (for an RBG3 construction), as appropriate. 1310  15. The randomness source must provide the requested number of bits at a security strength of 1311  s bits or higher, where s is the targeted security strength for the RBG1 construction. 1312  16. The specific output of the randomness source (or portion thereof) that is used for the 1313  instantiation of an RBG1 construction must not be used for any other purpose, including 1314  for seeding a different instantiation. 1315  17 While technically possible to reseed the DRBG, doing so outside of very controlled conditions (e.g., “in the field”) might result in seeds with less  than the required amount of randomness.  18 Note that s + 128 = keylen + blocklen = seedlen, as specified in SP 800-90A.  19 This means ever-changing but maintained regardless of access to power for its entire lifetime.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  35  17. If an RBG2(P) construction is used as the randomness source for the RBG1 construction, 1316  the RBG2(P) construction must be reseeded (i.e., prediction resistance must be obtained 1317  within the RBG2(P) construction) before generating bits for each RBG1 instantiation. 1318  18. A physically secure channel must be used to insert the randomness input from the 1319  randomness source into the DRBG of the RBG1 construction. 1320  19. An RBG1 construction must not be used for applications that require a higher security 1321  strength than has been instantiated. 1322  4.4.2. Sub-DRBG Requirements 1323  A sub-DRBG has the following testable requirements (i.e., testable by the validation labs).  1324  1. The randomness source for a sub-DRBG shall be an RBG1 construction; a sub-DRBG 1325  shall not serve as a randomness source for another sub-DRBG. 1326  2. A sub-DRBG shall employ the same DRBG components as its randomness source. 1327  3.  A sub-DRBG shall reside in the same security boundary as the RBG1 construction that 1328  initializes it. 1329  4. The RBG1 construction shall fulfill the appropriate requirements of Section 4.4.1. 1330  5. A sub-DRBG shall exist only for a limited time and purpose, as determined by the 1331  application or developer. 1332  6. The output from the RBG1 construction that is used for sub-DRBG instantiation shall not 1333  be output from the security boundary of the construction and shall not be used for any 1334  other purpose, including for seeding a different sub-DRBG. 1335  7. A sub-DRBG shall not permit itself to be instantiated more than once.  1336  8. A sub-DRBG shall not provide output for use by the RBG1 construction (e.g., as additional 1337  input) or another sub-DRBG in the security boundary. 1338  9. The security strength s requested for a target sub-DRBG instantiation shall not exceed the 1339  security strength that is supported by the RBG1 construction. 1340  10. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), 3s/2 bits 1341  shall be obtained from the RBG1 construction for instantiation, where s is the requested 1342  security strength for the target sub-DRBG. 1343  11 For a CTR_DRBG (without a derivation function), s + 128 bits shall be obtained from the 1344  RBG1 construction for instantiation, where s is the requested security strength for the target 1345  sub-DRBG. 1346  12. A sub-DRBG shall not produce output until it is instantiated. 1347  13. A sub-DRBG shall not provide output for generating requests that specify a security 1348  strength greater than the instantiated security strength of the sub-DRBG. 1349  14. A sub-DRBG shall not include a reseed capability. 1350  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  36  15. If the seedlife of a sub-DRBG is ever exceeded or a health test of the sub-DRBG fails, the 1351  use of the sub-DRBG shall be terminated. 1352  A non-testable requirement for a sub-DRBG (not testable by the validation labs) is: 1353  16. The output of a sub-DRBG must not be used as input to seed other DRBGs (e.g., the 1354  DRBGs in other RBGs).  1355  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  37  RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources 1356  An RBG2 construction is a cryptographically secure RBG with continuous access to one or more 1357  validated entropy sources within its RBG security boundary. The RBG is instantiated before use, 1358  generates outputs on demand, and can be used in an RBG3 construction (see Section 6). An RBG2 1359  construction may support reseeding and may provide prediction resistance during generation 1360  requests (i.e., by performing a reseed of the DRBG prior to generating output). Both reseeding and 1361  providing prediction resistance are optional for this construction. 1362  If full-entropy output is required by a consuming application, an RBG3 construction from Section 1363  6 needs to be used rather than an RBG2 construction. 1364  An RBG2 construction may be useful for all devices in which an entropy source can be 1365  implemented. 1366  RBG2 Description 1367  The DRBG for an RBG2 construction is contained within the same RBG security boundary and 1368  cryptographic module as its validated entropy source(s) (see Figure 16). The entropy source is 1369  used to provide the entropy bits for both DRBG instantiation and the reseeding of the DRBG used 1370  by the construction (e.g., to provide prediction resistance). An optional recommended 1371  personalization string and optional additional input may be provided from within the cryptographic 1372  module or from outside of that module. 1373  1374  Fig. 16. RBG2 Construction 1375  The output from the RBG may be used within the cryptographic module or by an application 1376  outside of the module. 1377  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  38  An example of an RBG2 construction is provided in Appendix B.4. 1378  An RBG2 construction may be implemented to use one or more validated physical and/or non-1379  physical entropy sources for instantiation and reseeding. Two variants of the RBG2 construction 1380  may be implemented. 1381  1. An RBG2(P) construction uses the output of one or more validated physical entropy 1382  sources and (optionally) one or more validated non-physical entropy sources as discussed 1383  in Method 1 of Section 2.3 (i.e., only the entropy produced by validated physical entropy 1384  sources is counted toward the entropy required for instantiating or reseeding the RBG). 1385  Any amount of entropy may be obtained from a non-physical entropy source as long as 1386  sufficient entropy has been obtained from the physical entropy sources to fulfill an entropy 1387  request. 1388  2. An RBG2(NP) construction uses the output of any validated non-physical or physical 1389  entropy sources as discussed in Method 2 of Section 2.3 (i.e., the entropy produced by both 1390  validated physical and non-physical entropy sources is counted toward the entropy required 1391  for instantiating or reseeding the RBG). 1392  These variants affect the implementation of a Get_ES_Bitstring function (as specified in Section 1393  2.8.2.2 and discussed in Section 3.1), either accessing the entropy source directly or via the 1394  Get_conditioned_full_entropy_input function during instantiation and reseeding (see Sections 1395  5.2.1 and 5.2.3). That is, when instantiating and reseeding an RBG2(P) construction (including a 1396  DRBG within an RBG3 construction as discussed in Section 6), Method 1 in Section 2.3 is used 1397  to combine the entropy from the entropy sources, and Method 2 is used when instantiating and 1398  reseeding an RBG2(NP) construction. 1399  Conceptual Interfaces 1400  The RBG2 construction interfaces to the DRBG include function calls for instantiating the DRBG 1401  (see Section 5.2.1), generating pseudorandom bits on request (see Section 5.2.2), and (optionally) 1402  reseeding the DRBG at the end of the DRBG’s seedlife and providing prediction resistance upon 1403  request (see Section 5.2.3). 1404  Once instantiated, an RBG2 construction with a reseed capability may be reseeded on demand or 1405  whenever sufficient entropy is available. 1406  5.2.1. RBG2 Instantiation 1407  An RBG2 construction may be instantiated at any valid20 security strength possible for the DRBG 1408  and its components using the following call: 1409  (status, RBG2_state_handle) = Instantiate_function (s, prediction_resistance_flag, 1410  personalization_string), 1411  20 A security strength of either 128, 192, or 256 bits.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  39  where s is the requested instantiation security strength for the DRBG. The 1412  prediction_resistance_flag (if used) is set to TRUE if prediction resistance is to be supported and 1413  FALSE otherwise. 1414  An RBG2 construction obtains entropy for its DRBG from one or more validated entropy sources, 1415  either directly or using a conditioning function to process the output of the entropy source to obtain 1416  a full-entropy bitstring for instantiation (e.g., when employing a CTR_DRBG without a derivation 1417  function using entropy sources that do not provide full-entropy output). 1418  SP 800-90A uses a Get_randomness-source_input call to obtain the entropy needed for 1419  instantiation (see SP 800-90A). 1420  1. When the DRBG is a CTR_DRBG without a derivation function, full-entropy bits shall be 1421  obtained as follows: 1422  a) If the entropy source provides full-entropy output, the Get_randomness-source_input 1423  call is replaced by:21, 22 1424  (status, entropy_bitstring) = Get_ES_Bitstring (s + 128).23 1425  For an RBG2(P) construction, only validated physical entropy sources shall be used. 1426  The output of the entropy sources shall be concatenated to obtain the s + 128 full-1427  entropy bits to be returned as entropy_bitstring. 1428  (This recommendation assumes that non-physical entropy sources cannot provide full-1429  entropy output. Therefore, the Get_ES_bitstring function shall not be used with non-1430  physical entropy sources in this case.) 1431  b) If the entropy sources does not provide full-entropy output, the Get_randomness-1432  source_input call is replaced by:24, 25 1433  (status, Full_entropy_bitstring) =  1434  Get_conditioned_full_entropy_input(s + 128). 1435  Validated physical and/or non-physical entropy sources shall be used to provide the 1436  requested entropy. For an RBG2(P) construction, the requested s + 128 bits of entropy 1437  shall be counted as specified in Method 1 of Section 2.3. For an RBG2(NP) 1438  construction, the requested s + 128 bits of entropy shall be counted as specified in 1439  Method 2 of Section 2.3. 1440  2.  For the Hash_DRBG, HMAC_DRBG and CTR_DRBG (with a derivation function), the 1441  entropy source shall provide 3s/2 bits of entropy to establish the security strength. 1442  a) If the consuming application requires full entropy in the returned bitstring, the 1443  Get_randomness-source_input call is replaced by: 1444  (status, Full_entropy_bitstring) =  1445  Get_conditioned_full_entropy_input(3s/2). 1446  21 Appropriate changes may be required for the Instantiate_function in [SP800-90A] and the algorithms in Section 10 of that document.  22 See Section 3.8.2.2 for a specification of the Get_ES_Bitstring function.  23 For a CTR_DRBG using AES, s + 128 = the length of the key + the length of the AES block = seedlen (see Table 2 in SP 800-90A).  24 Appropriate changes may be required for the Instantiate_function in [SP800-90A] and the algorithms in Section 10.2 of that document.  25 See Section 4.3.2 for a specification of the Get_conditioned_full_entropy_input function.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  40  b) If the consuming application does not require full entropy in the returned bitstring, the 1447  Get_randomness-source_input call is replaced by: 1448  (status, entropy_bitstring) = Get_ES_Bitstring(3s/2). 1449  Validated physical and/or non-physical entropy sources shall be used to provide the 1450  requested entropy. For an RBG2(P) construction, the requested 3s/2 bits of entropy shall 1451  be counted as specified in Method 1 of Section 2.3. For an RBG2(NP) construction, the 1452  requested 3s/2 bits of entropy shall be counted as specified in Method 2 of Section 3.3. 1453  5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction 1454  Pseudorandom bits may be requested using the following call (see Section 2.8.1.2): 1455  (status, returned_bits) = Generate_function(RBG2_state_handle, requested_number_of_bits, 1456  requested_security_strength, prediction_resistance_request, additional_input), 1457  where state_handle (if used) was returned by the Instantiate_function (see Sections 2.8.1.1 and 1458  5.2.1). 1459  Support for prediction resistance is optional. If prediction resistance is supported, its use is 1460  optional. This RBG may be designed to always provide prediction resistance, to only provide 1461  prediction resistance upon request, or to be unable to provide prediction resistance (i.e., to not 1462  support prediction-resistance requests during generation). 1463  Note that when prediction resistance is requested, the Generate_function will invoke the 1464  Reseed_function. If sufficient entropy is not available for reseeding, an error indication shall be 1465  returned, and the requested bits shall not be generated. 1466  5.2.3. Reseeding an RBG2 Construction 1467  As discussed in Section 2.4.2, when the RBG2 construction includes a reseed capability, the 1468  reseeding of the DRBG may be performed 1) upon request from a consuming application (either 1469  an explicit request for reseeding or a request for the generation of bits with prediction resistance); 1470  2) on a fixed schedule based on time, number of outputs, or events; or 3) as sufficient entropy 1471  becomes available. 1472  An RBG2 construction is reseeded using the following call: 1473  status = Reseed_function(RBG2_state_handle, additional_input), 1474  where the RBG2_state_handle (when used) was obtained during the instantiation of the RBG (see 1475  Sections 2.8.1.1 and 5.2.1). 1476  SP 800-90A uses a Get_randomness-source_input call to obtain the entropy needed for 1477  reseeding the DRBG (see Section 2.8.1.3 herein and in [SP800-90A]. The DRBG is reseeded at 1478  the instantiated security strength recorded in the DRBG’s internal state. The Get_randomness-1479  source_input call in SP 800-90A shall be replaced with the following: 1480  1. For the CTR_DRBG without a derivation function, use the appropriate replacement as 1481  specified in step 1 of Section 5.2.1. 1482  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  41  2. For the Hash_DRBG, HMAC_DRBG and CTR_DRBG (with a derivation function), 1483  replace the Get_randomness-sourceinput call in the Reseed_function with the 1484  following:26 1485  a) If the consuming application requires full entropy in the returned bitstring, the 1486  Get_randomness-source_input call is replaced by: 1487  (status, Full_entropy_bitstring) = Get_conditioned_full_entropy_input(s). 1488  b) If the consuming application does not require full entropy in the returned bitstring, 1489  the Get_randomness-source_input call is replaced by: 1490  (status, entropy_bitstring) = Get_ES_Bitstring(s). 1491  Validated physical and/or non-physical entropy sources shall be used to provide the 1492  requested entropy. For an RBG2(P) construction, the requested s bits of entropy shall be 1493  counted as specified in Method 127 of Section 2.3. For an RBG2(NP) construction, the 1494  requested s bits of entropy shall be counted as specified in Method 228 of Section 2.3. 1495  RBG2 Requirements 1496  An RBG2 construction has the following requirements in addition to those specified in [SP800-1497  90A]: 1498  1. The RBG shall employ an approved and validated DRBG from [SP800-90A] whose 1499  components are capable of providing the targeted security strength for the RBG. 1500  2. The RBG and its components shall be successfully validated for compliance with [SP800-1501  90A], [SP800-90B], SP 800-90C, [FIPS140], and the specification of any other approved 1502  algorithm used within the RBG, as appropriate. 1503  3. The RBG may include a reseed capability. If implemented, the reseeding of the DRBG 1504  shall be performed either a) upon request from a consuming application (either an explicit 1505  request for reseeding or a request for the generation of bits with prediction resistance); b) 1506  on a fixed schedule based on time, number of outputs, or events; and/or c) as sufficient 1507  entropy becomes available. 1508  4. Validated entropy sources shall be used to instantiate and reseed the DRBG. A non-1509  validated entropy sources shall not be used for this purpose. 1510  5. The entropy sources used for the instantiation and reseeding of an RBG(P) construction 1511  shall include one or more validated physical entropy sources; the inclusion of one or more 1512  validated non-physical entropy sources is optional. A bitstring that contains entropy shall 1513  be assembled and the entropy in that bitstring determined as specified in Method 1 of 1514  Section 2.3 (i.e., only the entropy provided by validated physical entropy sources shall be 1515  counted toward fulfilling the amount of entropy in an entropy request). 1516  26 See Sections 2.8.2.2 and 3.1 for discussions of the Get_ES_bitstring function.  27 Method 1 only counts the entropy provided by validated physical sources.  28 Method 2 counts the entropy provided by both physical and non-physical entropy sources.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  42  6. The entropy sources used for the instantiation and reseeding of an RBG2(NP) construction 1517  shall include one or more validated non-physical entropy sources; the inclusion of one or 1518  more validated physical entropy sources is optional. A bitstring containing entropy shall 1519  be assembled and the entropy in that bitstring determined as specified in Method 2 of 1520  Section 2.3 (i.e., the entropy provided by both validated non-physical entropy sources and 1521  any validated physical entropy sources included in the implementation shall be counted 1522  toward fulfilling the requested amount of entropy). 1523  7. The DRBG shall be capable of being instantiated and reseeded at the maximum security 1524  strength (s) for the DRBG design (see [SP800-90A]). 1525  8. A specific entropy-source output (or portion thereof) shall not be reused (e.g., it is 1526  destroyed after use). 1527  9. When instantiating and reseeding a CTR_DRBG without a derivation function, (s + 128) 1528  bits with full entropy shall be obtained either directly from the entropy source or from the 1529  entropy source via an external vetted conditioning function (see Section 3.3). 1530  10. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), a 1531  bitstring with at least 3s/2 bits of entropy shall be obtained from the entropy source to 1532  instantiate the DRBG at a security strength of s bits. When reseeding is performed, a 1533  bitstring with at least s bits of entropy shall be obtained from the entropy source. 1534  11. The DRBG shall be instantiated before first use (i.e., before providing output for use by a 1535  consuming application) and reseeded using the validated entropy sources used for 1536  instantiation. 1537  12. When health tests detect the failure of a validated entropy source, the failure shall be 1538  handled as discussed in Section 7.1.2.1. 1539  A non-testable requirement for the RBG (not testable by the validation labs) is: 1540  13. The RBG must not be used by applications that require a higher security strength than 1541  has been instantiated in the DRBG.  1542  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  43  RBG3 Constructions Based on Physical Entropy Sources 1543  An RBG3 construction is designed to provide full entropy (i.e., an RBG3 construction can support 1544  all security strengths). The RBG3 constructions specified in this Recommendation include one or 1545  more entropy sources and an approved DRBG from SP 800-90A that can and will be instantiated 1546  at a security strength of 256 bits. If an entropy source fails in an undetected manner, the RBG 1547  continues to operate as an RBG2(P) construction, providing outputs at the security strength of its 1548  DRBG (256 bits) (see Section 5 and Appendix A). If a failure is detected, the RBG operation shall 1549  be terminated. 1550  Two RBG3 constructions are specified: 1551  1. RBG3(XOR) − This construction is based on combining the output of one or more 1552  validated entropy sources with the output of an instantiated, approved DRBG using an 1553  exclusive-or operation (see Section 6.2). 1554  2. RBG3(RS) − This construction is based on using one or more validated entropy sources to 1555  continuously reseed the DRBG (see Section 6.3). 1556  An RBG3 construction continually accesses its entropy sources, and its DRBG may be reseeded 1557  whenever requested (e.g., to provide prediction resistance for the DRBG’s output). Upon receipt 1558  of a request for random bits from a consuming application, the entropy source is accessed to obtain 1559  sufficient bits for the request. See Sections 3.1 and 3.2 for further discussion about accessing the 1560  entropy source(s). 1561  An implementation may be designed so that the DRBG implementation used within an RBG3 1562  construction can be directly accessed by a consuming application (i.e., the directly accessible 1563  DRBG uses the same internal state as the RBG3 construction). 1564  An RBG3 construction is useful when bits with full entropy are required or a higher security 1565  strength than RBG1 and RBG2 constructions can support is needed. 1566  General Requirements 1567  RBG3 constructions have the following general security requirements. See Sections 6.2.2 and 6.3.2 1568  for additional requirements for the RBG3(XOR) and RBG3(RS) constructions, respectively. 1569  1. An RBG3 construction shall be designed to provide outputs with full entropy using one or 1570  more validated independent physical entropy sources as specified for Method 1 in Section 1571  3.3 (i.e., only the entropy provided by validated physical entropy sources shall be counted 1572  toward fulfilling entropy requests, although entropy provided by any validated non-1573  physical entropy source may be used but not counted). 1574  2. An RBG3 construction and its components shall be successfully validated for compliance 1575  with the corresponding requirements in [SP800-90A], [SP800-90B], SP 800-90C, [FIPS 1576  140] and the specification of any other approved algorithm used within the RBG, as 1577  appropriate. 1578  3. The DRBG within the RBG3 construction shall be capable of supporting a security strength 1579  of 256 bits (i.e., a CTR_DRBG based on AES-256 or either Hash_DRBG or 1580  HMAC_DRBG using a hash function with an output length of at least 256 bits). 1581  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  44  4. The DRBG shall be instantiated at a security strength of 256 bits before the first use of the 1582  RBG3 construction or direct access of the DRBG. 1583  5. The DRBG shall include a reseed function to support reseed requests. 1584  6. A specific entropy-source output (or portion thereof) shall not be reused (e.g., the same 1585  entropy-source outputs shall not be used for an RBG3 request and a request to a separate 1586  instantiation of a DRBG). 1587  7. If the DRBG is directly accessible, the requirements in Section 5.3 for RBG2(P) 1588  constructions shall apply to the direct access of the DRBG. 1589  8. When health tests detect the failure of a validated physical entropy source, the failure shall 1590  be handled as discussed in Section 7.1.2.1. If a failure is detected in a non-physical entropy 1591  source, the consuming application shall be notified. 1592  RBG3(XOR) Construction 1593  An RBG3(XOR) construction contains one or more validated entropy sources and a DRBG whose 1594  outputs are XORed to produce full-entropy output (see Figure 17). In order to provide the required 1595  full-entropy output, the input to the XOR (shown as “⊕” in the figure) from the entropy-source 1596  side of the figure shall consist of bits with full entropy (see Section 2.1).29 If the entropy sources 1597  cannot provide full-entropy output, then an external conditioning function shall be used to 1598  condition the output of the entropy sources to a full-entropy bitstring before XORing with the 1599  output of the DRBG (see Section 3.3). 1600  29 Note that the DRBGs themselves are not designed to inherently provide full-entropy output.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  45  1601  Fig. 17. RBG3(XOR) Construction 1602  When n bits of output are requested from an RBG3(XOR) construction, n bits of output from the 1603  DRBG are XORed with n full-entropy bits obtained either directly from the entropy source or from 1604  the entropy source after cryptographic processing by an external vetted conditioning function (see 1605  Section 3.3). When the entropy source is working properly,30 an n-bit output from the RBG3(XOR) 1606  construction is said to provide n bits of entropy or to support a security strength of n bits. The 1607  DRBG used in the RBG3(XOR) construction is always required to support a 256-bit security 1608  strength. If the entropy source fails without being detected and the DRBG has been successfully 1609  instantiated with at least 256 bits of entropy, the DRBG continues to produce output at a security 1610  strength of 256 bits. 1611  An example of an RBG3(XOR) design is provided in Appendix B.5. 1612  6.2.1. Conceptual Interfaces 1613  The RBG interfaces include function calls for instantiating the DRBG (see Section 6.2.1.1), 1614  generating random bits on request (see Section 6.2.1.2), and reseeding the DRBG instantiation(s) 1615  (see Section 6.2.1.3). 1616  6.2.1.1. Instantiation of the DRBG 1617  The DRBG for the RBG3(XOR) construction is instantiated as follows: 1618  30 The entropy source provides at least the amount of entropy determined during the entropy-source validation process.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  46  RBG3(XOR)_DRBG_Instantiate: 1619  Input: integer (prediction_resistance_flag), string personalization_string. 1620  Output: integer status, integer state_handle. 1621  Process: 1622  1. (status, RBG3(XOR)_state_handle) = Instantiate_function(256, 1623  prediction_resistance_flag, personalization_string). 1624  2. Return (status, RBG3(XOR)_state_handle). 1625  In step 1, the DRBG is instantiated at a security strength of 256 bits. The 1626  prediction_resistance_flag and personalization_string (when provided as input to the 1627  RBG3(XOR)_DRBG_Instantiate function) shall be used in step 1.  1628  In step 2, the status and RBG3(XOR)_state_handle that were obtained in step 1 are returned. Note 1629  that if the status does not indicate a successful instantiate process (i.e., a failure is indicated), the 1630  returned state handle shall be invalid (e.g., a Null value). The handling of status codes is discussed 1631  in Section 2.8.3. 1632  6.2.1.2. Random and Pseudorandom Bit Generation 1633  Let n be the requested number of bits to be generated, and let the RBG3(XOR)_state_handle be 1634  the value returned by the instantiation function for RBG3’s DRBG instantiation (see Section 1635  6.2.1.1). Random bits with full entropy shall be generated by the RBG3(XOR) construction using 1636  the following generate function: 1637  RBG3(XOR)_Generate: 1638  Input: integer (RBG3(XOR)_state_handle, n, prediction_resistance_request), string 1639  additional_input. 1640  Output: integer status, string returned_bits. 1641  Process: 1642  1. (status, ES_bits) = Request_entropy(n). 1643  2. If (status ≠ SUCCESS), then return (status, invalid_string). 1644  3. (status, DRBG_bits) = Generate_function(RBG3(XOR)_state_handle, n, 256, 1645  prediction_resistance_request, additional_input). 1646  4. If (status ≠ SUCCESS), then return (status, invalid_string). 1647  5. returned_bits = ES_bits ⊕ DRBG_bits. 1648  6. Return (SUCCESS, returned_bits). 1649  Step 1 requests that the entropy sources generate bits. Since full-entropy bits are required, the 1650  (place holder) Request_entropy call shall be replaced by one of the following: 1651  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  47  • If full-entropy output is provided by all validated physical entropy sources used by the 1652  RBG3(XOR) implementation, and non-physical entropy sources are not used,31 step 1 1653  becomes: 1654  (status, ES_bits) = Get_ES_Bitstring(n). 1655  The Get_ES_Bitstring function32 shall use Method 1 in Section 2.3 to obtain the n full-1656  entropy bits that were requested in order to produce the ES_bits bitstring. 1657  • If full-entropy output is not provided by all physical entropy sources, or the output of both 1658  physical and non-physical entropy sources is also used by the implementation, step 1 1659  becomes: 1660  (status, ES_bits) = Get_conditioned_full_entopy_input(n). 1661  The Get_conditioned_full_entropy_input construction is specified in Section 3.3.2. It 1662  requests entropy from the entropy sources in step 3.1 of that construction with a 1663  Get_ES_Bitstring call. The Get_ES_Bitstring call shall use Method 1 (as specified in 1664  Section 3.3) when collecting the output of the entropy sources (i.e., only the entropy 1665  provided by physical entropy sources is counted). 1666  In step 2, if the request in step 1 is not successful, abort the RBG3(XOR)_Generate function, 1667  returning the status received in step 1 and an invalid bitstring as the returned_bits (e.g., a Null 1668  bitstring). If status indicates a success, ES_bits is the full-entropy bitstring to be used in step 5. 1669  In step 3, the RBG3(XOR)’s DRBG instantiation is requested to generate n bits at a security 1670  strength of 256 bits. The DRBG instantiation is indicated by the RBG3(XOR)_state_handle, which 1671  was obtained during instantiation (see Section 6.2.1.1). If a prediction-resistance request and/or 1672  additional input are provided in the RBG.3(XOR)_Generate call, they shall be included in the 1673  Generate_function call. 1674  Note that it is possible that the DRBG would require reseeding during the Generate_function call 1675  in step 3 (e.g., because of a prediction-resistance request, or the end of the seedlife of the DRBG 1676  has been reached). If a reseed of the DRBG is required during Generate-function execution, the 1677  DRBG shall be reseeded as specified in Section 6.2.1.3 with bits not otherwise used by the RBG. 1678  In step 4, if the Generate_function request is not successful, the RBG3(XOR)_Generate 1679  function is aborted, and the status received in step 3 and an invalid bitstring (e.g., a Null bitstring) 1680  are returned to the consuming application. If status indicates a success, DRBG_bits is the 1681  pseudorandom bitstring to be used in step 5. 1682  Step 5 combines the bitstrings returned from the entropy sources (from step 1) and the DRBG 1683  (from step 3) using an XOR operation. The resulting bitstring is returned to the consuming 1684  application in step 6. 1685  31 Since non-physical entropy sources are assumed to be incapable of providing full-entropy output, they cannot contribute to the bitstring provided  by the Get_ES_Bitstring function.  32 See Section 3.10.2.2.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  48  6.2.1.3. Pseudorandom Bit Generation Using a Directly Accessible DRBG 1686  Pseudorandom bit generation by a direct access of the DRBG is accomplished as specified in 1687  Section 5.2.2 using the state handle obtained during instantiation (see Section 6.2.1.1). 1688  When directly accessing the DRBG instantiation that is also used by the RBG3(XOR) 1689  construction, the following function is used: 1690  (status, returned_bits) = Generate_function(RBG3(XOR)_state_handle, 1691  requested_number_of_bits, requested_security_strength, prediction_resistance_request, 1692  additional_input), 1693  where:  1694  • RBG3(XOR)_state_handle indicates the DRBG instantiation to be used. 1695  • requested_security_strength ≤ 256. 1696  • prediction-resistance-request is either TRUE or FALSE; requesting prediction resistance 1697  during the Generate_function is optional. 1698  • The use of additional input is optional. 1699  Note that when prediction resistance is requested, the Generate_function will invoke the 1700  Reseed_function (see Section 6.2.1.3). If sufficient entropy is not available for reseeding, an error 1701  indication shall be returned, and the requested bits shall not be generated. 1702  6.2.1.4. Reseeding the DRBG Instantiations 1703  Reseeding is performed using the entropy sources in the same manner as an RBG2 construction 1704  using the appropriate state handle (e.g., RBG3(XOR)_state_handle, as specified in Section 6.2.1.1). 1705  6.2.2. RBG3(XOR) Requirements 1706  An RBG3(XOR) construction has the following requirements in addition to those provided in 1707  Section 6.2: 1708  1. Bitstrings with full entropy shall be provided to the XOR operation either directly from the 1709  concatenated output of one or more validated physical entropy sources or by an external 1710  conditioning function using the output of one or more validated entropy sources as 1711  specified in Method 1 of Section 2.3. In the latter case, the output of validated non-physical 1712  entropy sources may be used without counting any entropy that they might provide. 1713  2. The same entropy-source outputs used by the DRBG for instantiation or reseeding shall 1714  not be used as input into the RBG’s XOR operation. 1715  3. The DRBG instantiations shall be reseeded occasionally (e.g., after a predetermined period 1716  of time or number of generation requests). 1717  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  49  RBG3(RS) Construction 1718  The second RBG3 construction specified in this document is the RBG3(RS) construction shown 1719  in Figure 18, and an example of this construction is provided in Appendix B.6. 1720  Note that external conditioning of the outputs from the entropy sources during instantiation and 1721  reseeding is required when the DRBG is a CTR_DRBG without a derivation function and the 1722  entropy sources do not provide a bitstring with full entropy. 1723  1724  Fig. 18. RBG3(RS) Construction 1725  6.3.1. Conceptual Interfaces 1726  The RBG interfaces include function calls for instantiating the DRBG (see Section 6.3.1.1), 1727  generating random bits on request (see Section 6.3.1.2), and reseeding the DRBG instantiation (see 1728  Section 6.3.1.3). 1729  6.3.1.1. Instantiation of the DRBG Within an RBG3(RS) Construction 1730  DRBG instantiation is performed as follows: 1731  RBG3(RS)_DRBG_Instantiate: 1732  Input: integer (prediction_resistance_flag), string personalization_string. 1733  Output: integer status, integer state_handle. 1734  Process: 1735  1. (status, RBG3(RS)_state_handle) = Instantiate_function(256, 1736  prediction_resistance_flag = TRUE, personalization_string). 1737  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  50  2. Return (status, RBG3(RS)_state_handle). 1738  In step 1, the DRBG is instantiated at a security strength of 256 bits. The 1739  prediction_resistance_flag is set to TRUE, and personalization_string (when provided as input to 1740  the RBG3(RS)_DRBG_Instantiate function) shall be used in step 1.  1741  In step 2, the status and the RBG3(RS)_state_handle are returned. Note that if the status does not 1742  indicate a successful instantiate process (i.e., a failure is indicated), the returned state handle shall 1743  be invalid (e.g., a Null value). The handling of status codes is discussed in Section 2.8.3. 1744  6.3.1.2. Random and Pseudorandom Bit Generation 1745  6.3.1.2.1 Generation Using the RBG3(RS) Construction 1746  When an RBG3(RS) construction receives a request for n random bits, the DRBG instantiation 1747  used by the construction needs to be reseeded with sufficient entropy so that bits with full entropy 1748  can be extracted from the DRBG’s output block. 1749  Table 3 provides information for generating full-entropy output from the DRBGs in SP 800-90A 1750  that use the cryptographic primitives listed in the table. Each primitive in the table can support a 1751  security strength of 256 bits − the highest security strength recognized by this Recommendation. 1752  To use the table, select the row that identifies the cryptographic primitive used by the implemented 1753  DRBG. 1754  • Column 1 lists the DRBGs. 1755  • Column 2 identifies the cryptographic primitives that can be used by the DRBG(s) in 1756  column 1 to support a security strength of 256 bits. 1757  • Column 3 indicates the length of the output block (output_len) for the cryptographic 1758  primitives in column 2. 1759  • Column 4 indicates the amount of fresh entropy that is obtained by a Reseed_function 1760  when the Generate_function is invoked with prediction resistance requested. 1761  Table 3. Values for generating full-entropy bits by an RBG3(RS) Construction 1762  DRBG DRBG  Primitives  Output Block  Length (output_len)  in bits  Entropy obtained  during a normal  reseed operation  CTR_DRBG  (with no derivation  function)  AES-256 128 384  CTR_DRBG (using a  derivation function) AES-256 128 256  Hash_DRBG  or  HMAC_DRBG  SHA-256  SHA3-256 256 256  SHA-384  SHA3-384 384 256  SHA-512  SHA3-512 512 256  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  51  The strategy used for obtaining full-entropy output from the RBG3(RS) construction requires 1763  obtaining sufficient fresh entropy and subsequently extracting full entropy bits from the output 1764  block in accordance with item 11 of Section 2.6. 1765  For the RBG3(RS)_Generate function: 1766  • Let n be the requested number of full-entropy bits to be generated by an RBG3(RS) 1767  construction. 1768  • Let RBG3(RS)_state_handle be a state handle returned from the instantiate function (see 1769  Section 6.3.1.1). 1770  Random bits with full entropy shall be generated as follows: 1771  RBG3(RS)_ Generate: 1772  Input: integer (RBG3(RS)_state_handle, n), string additional_input. 1773  Output: integer status, bitstring returned_bits. 1774  Process: 1775  1. full-entropy_bits =Null. 1776  2. sum = 0. 1777  3. While (sum < n), 1778  3.1 Obtain generated_bits from the entropy source. 1779  3.2 If (status ≠ SUCCESS), then return (status, invalid_bitstring). 1780  3.3 full-entropy_bits = full_entropy_bits || generated_bits. 1781  3.4 sum = sum + len(generated_bits). 1782  4. Return (SUCCESS, leftmost(full-entropy_bits, n)). 1783  In steps 1 and 2, the bitstring intended to collect the generated bits for returning to the calling 1784  application (i.e., full-entropy_bits) is initialized to the Null bitstring, and the counter for the number 1785  of bits obtained for fulfilling the request is initialized to zero. 1786  Step 3 is iterated until n bits have been generated. 1787  In step 3.1, the DRBG is requested to obtain sufficient entropy so that a bitstring with full 1788  entropy can be extracted from the output block. The form of the request depends on the DRBG 1789  algorithm used in the RBG3(RS) construction and the method for obtaining a full-entropy 1790  bitstring (see Section 2.6, item 11). Note that extracting fewer full-entropy bits from the 1791  DRBG’s output block is permitted. 1792  For a CTR_DRBG (with or without a derivation function), a maximum of 128 bits with 1793  full entropy can be provided from the AES output block for each iteration of the DRBG as 1794  follows: 1795  (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 128, 1796  256, prediction_resistance_request = TRUE, additional_input). 1797  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  52  The Generate_function generates 128 (full entropy) bits after reseeding the 1798  CTR_DRBG with either 256 or 384 bits of entropy (by setting 1799  prediction_resistance_request = TRUE).33 1800  For a hash-based DRBG (i.e., Hash_DRBG and HMAC_DRBG), a maximum of 256 full-1801  entropy bits can be produced from each iteration of the DRBG as follows: 1802  3.1.1 (status, additional_entropy) = Get_ES_Bitstring (64). 1803  3.1.2 If (status ≠ SUCCESS), then return (status, invalid_bitstring). 1804  3.1.3 (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 1805  256, 256, prediction_resistance_request = TRUE, additional_input || 1806  additional_entropy). 1807  At least 64 bits of entropy beyond the amount obtained during reseeding are required. 1808  As shown in Table 3, the reseeding process will acquire 256 bits of entropy. The (256 1809  + 64 = 384) bits of entropy are inserted into the DRBG by 1) obtaining a bitstring with 1810  at least 64 bits of entropy directly from the entropy sources (step 3.1.1), 2) 1811  concatenating the additional entropy bits with any additional_input provided in the 1812  RBG3(RS)_Generate call, and 3) requesting the generation of 256 bits with prediction 1813  resistance and including the concatenated bitstring. This results in both the reseed of 1814  the DRBG with 256 bits of entropy and the insertion of the additional 64 bits of entropy) 1815  (step 3.1.3). 1816  For a hash-based DRBG (i.e., Hash_DRBG and HMAC_DRBG), a maximum of 192 full-1817  entropy bits can be produced from each iteration of the DRBG as follows: 1818  (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 192, 1819  256, prediction_resistance_request = TRUE, additional_input). 1820  The DRBG is reseeded with 256 bits of entropy by requesting generation with prediction 1821  resistance and extracting only (256 − 64 = 192) bits from the DRBG’s output block as 1822  full-entropy bits. 1823  In step 3.2, if the Generate_function request invoked in step 3.1 is not successful, the 1824  RBG3(RS)_Generate function is aborted, and the status received in step 3.1 and an invalid 1825  bitstring (e.g., a Null bitstring) are returned to the consuming application. 1826  Step 3.3 combines the full-entropy bitstrings obtained in step 3.1 with previously generated 1827  full-entropy bits using a concatenation operation. 1828  Step 3.4 adds the number of full-entropy bits produced in step 3.1 to those generated in 1829  previous iterations of step 3. 1830  If sum is less than the requested number of bits (n), repeat step 3 starting at step 3.1. 1831  In step 4, the leftmost n bits are selected from the collected bitstring (i.e., full-entropy_bits) and 1832  returned to the consuming application. 1833  6.3.1.2.2 Generation Using a Directly Accessible DRBG 1834  33 The use of the prediction_resistance_request will handle the differences between the two versions of the CTR_DRBG (i.e., with or without a  derivation function).  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  53  Direct access of the DRBG is accomplished as specified in Section 5.2.2 using the state handle 1835  associated with the instantiation and internal state that was returned for the DRBG (see Section 1836  6.3.1.1). 1837  (status, returned_bits) = Generate_function(RBG3(RS)_state_handle, 1838  requested_number_of_bits, requested_security_strength, prediction_resistance_request, 1839  additional_input), 1840  where state_handle (if used) was returned by the Instantiate_function (see Section 6.3.1.1). 1841  When the previous generate request was made to the RBG3(RS) construction rather than directly 1842  to the DRBG, the prediction_resistance_request parameter shall be set to TRUE. Otherwise, 1843  requesting prediction resistance during the Generate_function is optional. 1844  6.3.1.3. Reseeding 1845  Reseeding is performed during a Generate_function request to a directly accessible DRBG (see 1846  Section 6.3.1.2.2) when prediction resistance is requested or the end of the DRBG’s seedlife is 1847  reached. The Generate_function invokes the Reseed_function specified in [SP800-90A]. 1848  Reseeding may also be performed on demand as specified in Section 4.2.3 using the 1849  RBG3(RS)_state_handle if provided during instantiation. 1850  6.3.2. Requirements for a RBG3(RS) Construction 1851  An RBG3(RS) construction has the following requirements in addition to those provided in 1852  Section 6.1: 1853  1. Fresh entropy shall be acquired either directly from all independent validated entropy 1854  sources (see Section 3.2) or (in the case of a CTR_DRBG used as the DRBG when the 1855  entropy sources do not provide full-entropy output) from an external conditioning function 1856  that processes the output of the validated entropy sources as specified in Section 3.3.2. 1857  Method 1 in Section 2.3 shall be used when collecting the required entropy (i.e., only the 1858  entropy provided by validated physical entropy sources shall be counted toward fulfilling 1859  the amount of entropy requested). 1860  2. If the DRBG is directly accessible, a reseed of the DRBG instantiation shall be performed 1861  before generating output in response to a request for output from the directly accessible 1862  DRBG when the previous use of the DRBG was by the RBG3(RS) construction. This could 1863  require an additional internal state value to record the last use of the DRBG for generation 1864  (e.g., used by an RBG3(RS)_Generate function as specified in Section 6.3.1.2.1 or 1865  directly accessed by a (DRBG) Generate_function as discussed in Section 6.3.1.2.2).  1866  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  54  Testing 1867  Two types of testing are specified in this Recommendation: health testing and implementation-1868  validation testing. Health testing shall be performed on all RBGs that claim compliance with this 1869  Recommendation (see Section 7.1). Section 7.2 provides requirements for implementation 1870  validation. 1871  Health Testing 1872  Health testing is the testing of an implementation prior to and during normal operations to 1873  determine that the implementation continues to perform as expected and as validated. Health 1874  testing is performed by the RBG itself (i.e., the tests are designed into the RBG implementation). 1875  An RBG shall support the health tests specified in [SP800-90A] and [SP800-90B] as well as 1876  perform health tests on the components of SP 800-90C (see Section 7.1.1). [FIPS 140] specifies 1877  the testing to be performed within a cryptographic module. 1878  7.1.1. Testing RBG Components 1879  Whenever an RBG receives a request to start up or perform health testing, a request for health 1880  testing shall be issued to the RBG components (e.g., the DRBG and any entropy source). 1881  7.1.2. Handling Failures 1882  Failures may occur during the use of entropy sources and during the operation of other components 1883  of an RBG. 1884  Note that [SP800-90A] and [SP800-90B] discuss the error handling for DRBGs and entropy 1885  sources, respectively. 1886  7.1.2.1. Entropy-Source Failures 1887  A failure of a validated entropy source may be reported to the Get_ES_Bitstring function (see 1888  item 3 of Section 3.1 and item 4 of Section 3.2) during entropy requests to the entropy sources or 1889  to the RBG when the entropy sources continue to function when entropy is not requested (see item 1890  5 of Section 3.2). 1891  7.1.2.2. Failures by Non-Entropy-Source Components 1892  Failures by non-entropy-source components may be caused by either hardware or software 1893  failures. Some of these may be detected using the health testing within the RBG using known-1894  answer tests. Failures could also be detected by the system in or on which the RBG resides. 1895  When such failures are detected that affect the RBG, RBG operation shall be terminated. The RBG 1896  must not be resumed until the reasons for the failure have been determined and the failures have 1897  been repaired and successfully tested for proper operation. 1898  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  55  Implementation Validation 1899  Implementation validation is the process of verifying that an RBG and its components fulfill the 1900  requirements of this Recommendation. Validation is accomplished by: 1901  • Validating the components from [SP800-90A] and [SP800-90B]. 1902  • Validating the use of the constructions in SP 800-90C via code inspection, known-answer 1903  tests, or both, as appropriate. 1904  • Validating that the appropriate documentation as specified in SP 800-90C has been 1905  provided (see below). 1906  Documentation shall be developed that will provide assurance to testers that an RBG that claims 1907  compliance with this Recommendation has been implemented correctly. This documentation shall 1908  include the following as a minimum: 1909  • An identification of the constructions and components used by the RBG, including a 1910  diagram of the interaction between the constructions and components. 1911  • If an external conditioning function is used, an indication of the type of conditioning 1912  function and the method for obtaining any keys that are required by that function. 1913  • Appropriate documentation, as specified in [SP800-90A] and [SP800-90B]. The DRBG 1914  and the entropy sources shall be validated for compliance with SP 800-90A or SP 800-1915  90B, respectively, and the validations successfully finalized before the completion of RBG 1916  implementation validation. 1917  • For an RBG1 or RBG2 construction, the maximum security-strength that can be supported 1918  by the DRBG. 1919  • A description of all validated and non-validated entropy sources used by the RBG, 1920  including identifying whether the entropy source is a physical or non-physical entropy 1921  source. 1922  • Documentation justifying the independence of all validated entropy sources from all other 1923  validated and non-validated entropy sources. 1924  • An identification of the features supported by the RBG (e.g., access to the underlying 1925  DRBG of an RBG3 construction). 1926  • A description of the health tests performed, including an identification of the periodic 1927  intervals for performing the tests. 1928  • A description of any support functions other than health testing. 1929  • A description of the RBG components within the RBG security boundary (see Section 2.5). 1930  • For an RBG1 construction, a statement indicating that the randomness source must be a 1931  validated RBG2(P) or RBG3 construction (e.g., this could be provided in user 1932  documentation and/or a security policy). 1933  • If sub-DRBGs can be used in an RBG1 construction, the maximum number of sub-DRBGs 1934  and the security strengths to be supported by the sub-DRBGs. 1935  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  56  • For an RBG2 construction (including a directly accessible DRBG within an RBG3 1936  construction), a statement indicating whether prediction resistance is always provided 1937  when a request is made by a consuming application, only provided when requested, or 1938  never provided. 1939  • For an RBG3 construction, a statement indicating whether the DRBG can be accessed 1940  directly. 1941  • Documentation specifying the guidance to users about fulfilling the non-testable 1942  requirements for RBG1 constructions, RBG2 constructions, and sub-DRBGs, as 1943  appropriate  (see Sections 5.4 and 6.3, respectively). 1944  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  57  References 1945  [FIPS140] National Institute of Standards and Technology (2001) Security 1946  Requirements for Cryptographic Modules. (U.S. Department of Commerce, 1947  Washington, DC), Federal Information Processing Standards Publication 1948  (FIPS) 140-2, Change Notice 2 December 03, 2002. 1949  https://doi.org/10.6028/NIST.FIPS.140-2 1950  National Institute of Standards and Technology (2010) Security 1951  Requirements for Cryptographic Modules. (U.S. Department of Commerce, 1952  Washington, DC), Federal Information Processing Standards Publication 1953  (FIPS) 140-3. https://doi.org/10.6028/NIST.FIPS.140-3 1954  [FIPS140IG]  National Institute of Standards and Technology, Canadian Centre for 1955  Cyber Security Implementation Guidance for FIPS 140-2 and the 1956  Cryptographic Module Validation Program, [Amended]. Available at 1957  https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-1958  program/documents/fips140-2/FIPS1402IG.pdf 1959  [FIPS180] National Institute of Standards and Technology (2015) Secure Hash 1960  Standard (SHS). (U.S. Department of Commerce, Washington, DC), 1961  Federal Information Processing Standards Publication (FIPS) 180-4. 1962  https://doi.org/10.6028/NIST.FIPS.180-4 1963  [FIPS197] National Institute of Standards and Technology (2001) Advanced 1964  Encryption Standard (AES). (U.S. Department of Commerce, Washington, 1965  DC), Federal Information Processing Standards Publication (FIPS) 197. 1966  https://doi.org/10.6028/NIST.FIPS.197 1967  [FIPS198] National Institute of Standards and Technology (2008) The Keyed-Hash 1968  Message Authentication Code (HMAC). (U.S. Department of Commerce, 1969  Washington, DC), Federal Information Processing Standards Publication 1970  (FIPS) 198-1. https://doi.org/10.6028/NIST.FIPS.198-1. 1971  [FIPS202] National Institute of Standards and Technology (2015) SHA-3 Standard: 1972  Permutation-Based Hash and Extendable-Output Functions. (U.S. 1973  Department of Commerce, Washington, DC), Federal Information 1974  Processing Standards Publication (FIPS) 202. 1975  https://doi.org/10.6028/NIST.FIPS.202 1976  [NISTIR8427] Buller D, Kaufer A, Roginsky AL, Sonmez Turan M (2022). Discussion on 1977  the Full Entropy Assumption of SP 800-90 Series. (National Institute of 1978  Standards and Technology, Gaithersburg, MD), NIST Internal Report 1979  (NISTIR) 8427 ipd. https://doi.org/10.6028/NIST.IR.8427.ipd 1980  [SP800-38B] Dworkin MJ (2005) Recommendation for Block Cipher Modes of 1981  Operation: the CMAC Mode for Authentication. (National Institute of 1982  Standards and Technology, Gaithersburg, MD), NIST Special Publication 1983  https://doi.org/10.6028/NIST.FIPS.140-2 https://doi.org/10.6028/NIST.FIPS.140-3 https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/fips140-2/FIPS1402IG.pdf https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/fips140-2/FIPS1402IG.pdf https://doi.org/10.6028/NIST.FIPS.180-4 https://doi.org/10.6028/NIST.FIPS.197 https://doi.org/10.6028/NIST.FIPS.198-1 https://doi.org/10.6028/NIST.FIPS.202  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  58  (SP) 800-38B, Includes updates as of October 6, 2016. 1984  https://doi.org/10.6028/NIST.SP.800-38B 1985  [SP800-57Part1]  Barker EB (2020) Recommendation for Key Management: Part 1 – 1986  General. (National Institute of Standards and Technology, Gaithersburg, 1987  MD), NIST Special Publication (SP) 800-57 Part 1, Rev. 5.  1988  https://doi.org/10.6028/NIST.SP.800-57pt1r5 1989  [SP800-67] Barker EB, Mouha N (2017) Recommendation for the Triple Data 1990  Encryption Algorithm (TDEA) Block Cipher. (National Institute of 1991  Standards and Technology, Gaithersburg, MD), NIST Special Publication 1992  (SP) 800-67, Rev. 2. https://doi.org/10.6028/NIST.SP.800-67r2 1993  [SP800-90A] Barker EB, Kelsey JM (2015) Recommendation for Random Number 1994  Generation Using Deterministic Random Bit Generators. (National 1995  Institute of Standards and Technology, Gaithersburg, MD), NIST Special 1996  Publication (SP) 800-90A, Rev. 1. https://doi.org/10.6028/NIST.SP.800-1997  90Ar1 1998  [SP800-90B] Sönmez Turan M, Barker EB, Kelsey JM, McKay KA, Baish ML, Boyle M 1999  (2018) Recommendation for the Entropy Sources Used for Random Bit 2000  Generation. (National Institute of Standards and Technology, Gaithersburg, 2001  MD), NIST Special Publication (SP) 800-90B. 2002  https://doi.org/10.6028/NIST.SP.800-90B 2003  [SP800-131A] Barker EB, Roginsky AL (2019) Transitioning the Use of Cryptographic 2004  Algorithms and Key Lengths. (National Institute of Standards and 2005  Technology, Gaithersburg, MD), NIST Special Publication (SP) 800-131A, 2006  Rev. 2. https://doi.org/10.6028/NIST.SP.800-131Ar2 2007  [WS19] Woodage J, Shumow D (2019) An Analysis of NIST SP 800-90A. In: 2008  Ishai Y, Rijmen V (eds) Advances in Cryptology – EUROCRYPT 2019. 2009  EUROCRYPT 2019. Lecture Notes in Computer Science, vol 11477. 2010  Springer, Cham. https://doi.org/10.1007/978-3-030-17656-3_6  2011  https://doi.org/10.6028/NIST.SP.800-38B https://doi.org/10.6028/NIST.SP.800-57pt1r5 https://doi.org/10.6028/NIST.SP.800-67r2 https://doi.org/10.6028/NIST.SP.800-90Ar1 https://doi.org/10.6028/NIST.SP.800-90Ar1 https://doi.org/10.6028/NIST.SP.800-90B https://doi.org/10.6028/NIST.SP.800-131Ar2 https://doi.org/10.1007/978-3-030-17656-3_6  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  59  Appendix A. Entropy vs. Security Strength (Informative) 2012  This section of the appendix compares and contrasts entropy and security strength. 2013  A.1. Entropy 2014  Suppose that an entropy source produces n-bit strings with m bits of entropy in each bitstring. This 2015  means that when an n-bit string is obtained from that entropy source, the best possible guess of the 2016  value of the string has a probability of no more than 2−m of being correct. 2017  Entropy can be thought of as a property of a probability distribution, like the mean or variance. 2018  Entropy measures the unpredictability or randomness of the probability distribution on bitstrings 2019  produced by the entropy source, not a property of any particular bitstring. However, the 2020  terminology is sometimes slightly abused by referring to a bitstring as having m bits of entropy. 2021  This simply means that the bitstring came from a source that ensures m bits of entropy in its output 2022  bitstrings. 2023  Because of the inherent variability in the process, predicting future entropy-source outputs does 2024  not depend on an adversary’s amount of computing power. 2025  A.2. Security Strength 2026  A deterministic cryptographic mechanism (such as one of the DRBGs defined in [SP800-90A]) 2027  has a security strength − a measure of how much computing power an adversary expects to need 2028  to defeat the security of the mechanism. If a DRBG has an s-bit security strength, an adversary 2029  who can make 2w computations of the underlying block cipher or hash function, where w < s, 2030  expects to have about a 2w−s probability of defeating the DRBG’s security. For example, an 2031  adversary who can perform 296 AES encryptions can expect to defeat the security of the CTR-2032  DRBG that uses AES-128 with a probability of about 2−32 (i.e., 296−128). 2033  A.3. A Side-by-Side Comparison 2034  Informally, one way of thinking of the difference between security strength and entropy is the 2035  following: suppose that an adversary somehow obtains the internal state of an entropy source (e.g., 2036  the state of all of the ring oscillators and any internal buffer). This might allow the adversary to 2037  predict the next few bits from the entropy source (assuming that there is some buffering of bits 2038  within the entropy source), but the entropy source outputs will once more become unpredictable 2039  to the adversary very quickly. For example, knowing what faces of the dice are showing on the 2040  craps table does not allow a player to successfully predict the next roll of the dice. 2041  In contrast, suppose that an adversary somehow obtains the internal state of a DRBG. Because the 2042  DRBG is deterministic, the adversary can then predict all future outputs from the DRBG until the 2043  next reseeding of the DRBG with a sufficient amount of entropy. 2044  An entropy source provides bitstrings that are hard for an adversary to guess correctly but usually 2045  have some detectable statistical flaws (e.g., they may have slightly biased bits, or successive bits 2046  may be correlated). However, a well-designed DRBG provides bitstrings that exhibit none of these 2047  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  60  properties. Rather, they have independent and identically distributed bits, with each bit taking on 2048  a value with a probability of exactly 0.5. These bitstrings are only unpredictable to an adversary 2049  who does not know the DRBG’s internal state. 2050  A.4. Entropy and Security Strength in this Recommendation 2051  In the RBG1 construction specified in Section 4, the DRBG is instantiated from either an RBG2(P) 2052  or an RBG3 construction. In order to instantiate the RBG1 construction at a security strength of s 2053  bits, this Recommendation requires the source RBG to support a security strength of at least s bits 2054  and provide a bitstring that is 3s/2 bits long for most of the DRBGs. However, for a CTR_DRBG 2055  without a derivation function, a bitstring that is s + 128 bits long is required. (Note that an RBG3 2056  construction supports any desired security strength.) 2057  In the RBG2 and RBG3 constructions specified in Sections 5 and 6, respectively, the DRBG within 2058  the construction is instantiated using a bitstring with a certain amount of entropy obtained from a 2059  validated entropy source.34 In order to instantiate the DRBG to support an s-bit security strength, 2060  a bitstring with at least 3s/2 bits of entropy is required for the instantiation of most of the DRBGs. 2061  Reseeding requires a bitstring with at least s bits of entropy. However, for a CTR_DRBG without 2062  a derivation function, a bitstring with exactly s + 128 full-entropy bits is required for instantiation 2063  and reseeding, either obtained directly from an entropy source that provides full-entropy output or 2064  from an entropy source via an approved (vetted) conditioning function (see Section 3.3). 2065  The RBG3 constructions specified in Section 6 are designed to provide full-entropy outputs but 2066  with a DRBG included in the design in case the entropy source fails undetectably. Entropy bits are 2067  possibly obtained from an entropy source via an approved (vetted) conditioning function. When 2068  the entropy source is working properly, an n-bit output from the RBG3 construction is said to 2069  provide n bits of entropy. The DRBG in an RBG3 construction is always required to support a 2070  256-bit security strength. If an entropy-source fails and the failure is undetected, the RBG3 2071  construction outputs are generated at a security strength of 256 bits. In this case, the security 2072  strength of a bitstring produced by the RBG is the minimum of 256 and its length (i.e., 2073  security_strength = min(256, length)). 2074  In conclusion, entropy sources and properly functioning RBG3 constructions provide output with 2075  entropy. RBG1 and RBG2 constructions provide output with a security strength that depends on 2076  the security strength of the RBG instantiation and the length of the output. Likewise, if the entropy 2077  source used by an RBG3 construction fails undetectably, the output is then dependent on the 2078  DRBG within the construction (an RBG(P) construction) to produce output at a security strength 2079  of 256 bits. 2080  Because of the difference between the use of “entropy” to describe the output of an entropy source 2081  and the use of “security strength” to describe the output of a DRBG, the term “randomness” is 2082  used as a general term to mean either “entropy” or “security strength,” as appropriate. A 2083  “randomness source” is the general term for an entropy source or RBG that provides the 2084  randomness used by an RBG. 2085  2086  34 However, note that the entropy-source output may be cryptographically processed by an approved conditioning function before being used.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  61  Appendix B. RBG Examples (Informative) 2087  Appendix B.1 discusses and provides an example of the direct access to a DRBG used by an RBG3 2088  construction.  2089  Appendices B.2 – B.6 provide examples of each RBG construction. Not shown in the figures: if 2090  an error that indicates an RBG failure (e.g., a noise source in the entropy source has failed) is 2091  reported, RBG operation is terminated (see Section 7.1.2). For these examples, all entropy sources 2092  are considered to be physical entropy sources. 2093  B.1. Direct DRBG Access in an RBG3 Construction 2094  An implementation may be designed so that the DRBG implementation used within an RBG3 2095  construction can be directly accessed by a consuming application35 using the same or separate 2096  instantiations from the instantiation used by the RBG3 construction (see the examples in Figure 2097  19). 2098  2099  Fig. 19. DRBG Instantiations 2100  In the leftmost example in Figure 19, the same internal state is used by the RBG3 construction and 2101  a directly accessible DRBG. The DRBG implementation is instantiated only once, and only a 2102  single state handle is obtained during instantiation (e.g., RBG3_state handle).36 Generation and 2103  35 Without using other components or functionality used by the RBG3 construction (see Sections 6.2 and 6.3).  36 Because only a single instantiation has been implemented, a state handle is not required.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  62  reseeding for RBG3 operations use RBG3 function calls (see Sections 6.2 and 6.3), while 2104  generation and reseeding for direct DRBG access use RBG2 function calls (see Section 5.2) with 2105  the RBG3_state_handle. Using the same instantiation for both RBG3 operation and direct access 2106  to the DRBG requires additional reseeding processes in the case of an RBG3(RS) construction 2107  (see Section 6.3.2). 2108  In the rightmost example in Figure 19, different internal states are used by the RBG3 construction 2109  and a directly accessible DRBG. The DRBG implementation is instantiated twice – once for RBG3 2110  operations and a second time for direct access to the DRBG. A different state handle needs to be 2111  obtained for each instantiation (e.g., RBG3_state_handle and DRBG_state_handle). Generation 2112  and reseeding for RBG3 operations use RBG3 function calls and RBG3_state_handle (see Sections 2113  6.2 and 6.3), while generation and reseeding for direct DRBG access use RBG2 function calls and 2114  DRBG_state_handle (see Section 5.2). 2115  Multiple directly accessible DRBGs may also be incorporated into an implementation by creating 2116  multiple instantiations. However, no more than one directly accessible DRBG should share the 2117  same internal state with the RBG3 construction (i.e., if n directly accessible DRBGs are required, 2118  either n or n− 1 separate instantiations are required). 2119  The directly accessed DRBG instantiations are in the same security boundary as the RBG3 2120  construction. When accessed directly (rather than operating as part of the RBG3 construction), the 2121  DRBG instantiations are considered to be operating as RBG2(P) constructions as discussed in 2122  Section 5. 2123  B.2. Example of an RBG1 Construction 2124  An RBG1 construction has access to a randomness source only during instantiation when it is 2125  seeded (see Section 4). For this example (see Figure 20), the DRBG used by the RBG1 construction 2126  and the randomness source reside in two different cryptographic modules with a secure channel 2127  connecting them during the instantiation process. Following DRBG instantiation, the secure 2128  channel is not available. For this example, the randomness source is an RBG2(P) construction (see 2129  Section 5) with a state handle of RBG2_state_handle. 2130  The targeted security strength for the RBG1 construction is 256 bits, so a DRBG from [SP800-2131  90A] that is able to support this security strength must be used (HMAC_DRBG using SHA-256 is 2132  used in this example). A personalization_string is provided during instantiation, as recommended 2133  in Section 2.4.1. 2134  As discussed in Section 4, the randomness source (i.e., the RBG2(P) construction for this example) 2135  is not available during normal operation, so reseeding and prediction resistance cannot be 2136  provided. 2137  This example provides an RBG that is instantiated at a security strength of 256 bits. 2138  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  63  2139  Fig. 20. RBG1 Construction Example 2140  B.2.1. Instantiation of the RBG1 Construction 2141  A physically secure channel is required to transport the entropy bits from the randomness source 2142  (the RBG2(P) construction) to the HMAC_DRBG during instantiation; an example of an RBG2(P) 2143  construction is provided in Appendix B.4. Thereafter, the randomness source and the secure 2144  channel are no longer available. 2145  The HMAC_DRBG is instantiated using the Instantiate_function, as specified in Section 2.8.1.1, 2146  with the following call: 2147  (status, RBG1_state_handle) = Instantiate_function (256, prediction_resistance_flag = 2148  FALSE, “Device 7056”). 2149  A security strength of 256 bits is requested for the HMAC_DRBG used in the RBG1 2150  construction. 2151  Since an RBG1 construction does not provide prediction resistance (see Section 4), the 2152  prediction_resistance_flag is set to FALSE.  2153  The personalization string to be used for this example is “Device 7056.” 2154  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  64  The Get_randomness-source_input call in the Instantiate_function results in a single request 2155  being sent to the randomness source to generate bits to establish the security strength (see Section 2156  4.2.1, item 2.a). 2157  The HMAC_DRBG requests 3s/2 = 384 bits from the randomness source, where s = the 2158  256-bit targeted security strength for the DRBG: 2159  (status, randomness_bitstring) = Generate_function(RBG2_state_handle, 384, 256, 2160  prediction_resistance_request = TRUE). 2161  This call requests the randomness source (indicated by RBG2_state_handle) to generate 2162  384 bits at a security strength of 256 bits for the randomness input required for seeding the 2163  DRBG in the RBG1 construction. Prediction resistance is requested so that the randomness 2164  source (i.e., the RBG2(P) construction) is reseeded before generating the requested 384 2165  bits (see Requirement 17 in Section 4.4.1). Note that optional additional_input is not 2166  provided for this example. 2167  2. The RBG2(P) construction checks that the request can be handled (e.g., whether a security 2168  strength of 256 bits is supported). If the request is valid, 384 bits are generated after 2169  reseeding the RBG2(P) construction, the internal state of the RBG2(P) construction is 2170  updated, and status = SUCCESS is returned to the RBG1 construction along with the newly 2171  generated randomness_bitstring. 2172  If the request is determined to be invalid, status = FAILURE is returned along with a Null 2173  bitstring as the randomnessy_bitstring. The FAILURE status is subsequently returned from 2174  the Instantiate_function along with a Null value as the RBG1_state_handle, and the 2175  instantiation process is terminated. 2176  If a valid randomness_bitstring is returned from the RBG2(P) construction, the 2177  randomness_bitstring is used along with the personalization_string to create the seed to 2178  instantiate the DRBG (see [SP800-90A]).37 If the instantiation is successful, the internal state is 2179  established, a status of SUCCESS is returned from the Instantiate_function with a state handle 2180  of RBG1_state_handle, and the RBG can be used to generate pseudorandom bits. 2181  B.2.2. Generation by the RBG1 Construction 2182  Assuming that the HMAC_DRBG in the RBG1 construction has been instantiated (see Appendix 2183  B.2.1), pseudorandom bits are requested from the RBG by a consuming application using the 2184  Generate_function call as specified in Section 2.8.1.2: 2185  (status, returned_bits) = Generate_function (RBG1_state_handle, 2186  requested_number_of_bits, requested_security_strength, prediction_resistance_request = 2187  FALSE, additional_input). 2188  RBG1_state_handle was returned as the state handle during instantiation (see Appendix 2189  B.2.1). 2190  37 The first 256 bits of the randomness_bitstring are used as the randomness input, and the remaining 128 bits are used as the nonce in SP 800-90A,  Revision 1. A future update of SP 800-90A will revise this process by using the entire 384-bit string as the randomness input.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  65  The requested_security_strength may be any value that is less than or equal to 256 (the 2191  instantiated security strength recorded in the DRBG’s internal state). 2192  Since prediction resistance cannot be provided in an RBG1 construction, 2193  prediction_resistance_request is set to FALSE. (Note that the prediction_resistance 2194  request input parameter could be omitted from the Generate_function call for this 2195  example).  2196  Any additional input is optional.  2197  The Generate_function returns an indication of the status. If status = SUCCESS, the 2198  requested_number_of_bits are provided as the returned_bits to the consuming application. If 2199  status = FAILURE, returned_bits is an empty (i.e., null) bitstring. 2200  B.3. Example Using Sub-DRBGs Based on an RBG1 Construction 2201  This example uses an RBG1 construction to instantiate two sub-DRBGs: sub-DRBG1 and sub-2202  DRBG2 (see Figure 21). 2203  2204  Fig. 21. Sub-DRBGs Based on an RBG1 Construction 2205  The instantiation of the RBG1 construction is discussed in Appendix B.2. The RBG1 construction 2206  that is used as the source RBG includes an HMAC_DRBG and has been instantiated to provide a 2207  security strength of 256 bits. The state handle for the construction is RBG1_state_handle. 2208  For this example, Sub-DRBG1 will be instantiated to provide a security strength of 128 bits, and 2209  Sub-DRBG2 will be instantiated to provide a security strength of 256 bits. Both sub-DRBGs use 2210  the same DRBG algorithm as the RBG1 construction.  2211  Neither the RBG1 construction nor the sub-DRBGs can be reseeded or provide prediction 2212  resistance. 2213  This example provides the following capabilities: 2214  • Access to the RBG1 construction to provide output generated at a security strength of 256 2215  bits (see Appendix B.2 for the RBG1 example) 2216  • Access to one sub-DRBG (Sub-DRBG1) that provides output for an application that 2217  requires a security strength of no more than 128 bits 2218  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  66  • Access to a second sub-DRBG (Sub-DRBG2) that provides output for a second application 2219  that requires a security strength of 256 bits 2220  B.3.1. Instantiation of the Sub-DRBGs 2221  Each sub-DRBG is instantiated using output from an RBG1 construction that is discussed in 2222  Appendix 62B.2. 2223  B.3.1.1. Instantiating Sub-DRBG1 2224  Sub-DRBG1 is instantiated using the following Instantiate_function call (see Section 2.8.1.1): 2225  (status, sub-DRBG1_state_handle) = Instantiate_function (128, prediction_resistance_flag 2226  = FALSE, “Sub-DRBG App 1”). 2227  • A security strength of 128 bits is requested from the DRBG indicated by the 2228  RBG1_state_handle. 2229  • Setting “prediction_resistance_flag = FALSE” indicates that a consuming application will 2230  not be allowed to request prediction resistance. Optionally, the parameter can be omitted. 2231  • The personalization string to be used for sub-DRBG1 is “Sub-DRBG App 1.” 2232  • The returned state handle for sub-DRBG1 will be sub-DRBG1_state_handle. 2233  The randomness input for establishing the 128-bit security strength of sub-DRBG1 is requested 2234  using the following Generate_function call to the RBG1 construction): 2235  (status, randomness-source_input) = Generate_function(RBG1_state_handle, 192, 128, 2236  prediction_resistance_request = FALSE, additional_input). 2237  • 192 bits are requested from the source RBG (indicated by RBG1_state_handle) at a security 2238  strength of 128 bits (192 = 128 + 64 = 3s/2). 2239  • Setting “prediction_resistance_flag = FALSE” indicates that the source RBG (the RBG1 2240  construction) will not need to reseed itself before generating the requested output. 2241  Alternatively, the parameter can be omitted. 2242  • Additional input is optional. 2243  If status = SUCCESS is returned from the Generate_function, the HMAC_DRBG in sub-DRBG1 2244  is seeded using the randomness-source_input obtained from the RBG1 construction and the 2245  personalization_string provided in the Instantiate_function call (i.e., “Sub-DRBG App 1”). The 2246  internal state is recorded for Sub-DRBG1 (including the 128-bit security strength), and status = 2247  SUCCESS is returned from the Instantiate_function along with a state handle of sub-2248  DRBG1_state_handle. 2249  If status = FAILURE is returned from the Generate_function call, then the internal state is not 2250  created, status = FAILURE and a Null state handle are returned from the Instantiate_function, 2251  and the sub-DRBG1 cannot be used to generate bits. 2252  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  67  B.3.1.2. Instantiating Sub-DRBG2 2253  Sub-DRBG2 is instantiated using the following Instantiate_function call (see Section 2.8.1.1): 2254  (status, sub-DRBG2_state_handle) = Instantiate_function (256, prediction_resistance_flag = 2255  FALSE, “Sub-DRBG App 2”). 2256  • A security strength of 256 bits is requested from the randomness source (the DRBG 2257  construction indicated by RBG1_state_handle). 2258  • Setting “prediction_resistance_flag = FALSE” indicates that a consuming application will 2259  not be allowed to request prediction resistance. Optionally, the parameter can be omitted. 2260  • The personalization string to be used for sub-DRBG2 is “Sub-DRBG App 2.” 2261  • The returned state handle will be sub-DRBG2_state_handle. 2262  The randomness input for establishing the 256-bit security strength of sub-DRBG2 is requested 2263  using the following Generate_function call to the RBG1 construction): 2264  (status, randomness-source_input) = Generate_function(RBG1_state_handle, 384, 256, 2265  prediction_resistance_request = FALSE, additional_input). 2266  • 384 bits are requested from the source RBG (indicated by RBG1_state_handle) at a security 2267  strength of 256 bits (384 = 256 + 128 = 3s/2). 2268  • Setting “prediction_resistance_flag = FALSE” indicates that the source RBG (the RBG1 2269  construction) will not need to reseed itself before generating the requested output. 2270  Alternatively, the parameter can be omitted. 2271  • Additional input is optional. 2272  If status = SUCCESS is returned from the Generate_function, the HMAC_DRBG in sub-DRBG2 2273  is seeded using the randomness-source_input obtained from the RBG1 construction and the 2274  personalization_string provided in the Instantiate_function call (i.e., “Sub-DRBG App 2”). The 2275  internal state is recorded for Sub-DRBG2 (including the 256-bit security strength), and status = 2276  SUCCESS is returned from the Instantiate_function along with a state handle of sub-2277  DRBG2_state_handle. 2278  If status = FAILURE is returned from the Generate_function call, then the internal state is not 2279  created, status = FAILURE and a Null state handle are returned from the Instantiate_function, 2280  and the sub-DRBG2 cannot be used to generate bits. 2281  B.3.2. Pseudorandom Bit Generation by Sub-DRBGs 2282  Assuming that the sub-DRBG has been successfully instantiated (see Appendix B.3.1), 2283  pseudorandom bits are requested from the sub-DRBG by a consuming application using the 2284  Generate_function call as specified in Section 2.8.1.2: 2285  (status, returned_bits) = Generate_function(state_handle, requested_number_of_bits, 2286  security_strength, prediction_resistance_request, additional input), 2287  where: 2288  • For sub_DRBG1, state_handle = sub-DRBG1_state_handle; 2289  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  68  For sub-DRBG2, state_handle = sub-DRBG2_state_handle; 2290  • requested_number_of_bits must be ≤ 219 (see SP 800-90A for HMAC_DRBG); 2291  • For sub_DRBG1, security strength must be ≤ 128; 2292  • For sub_DRBG2, security strength must be ≤ 256; 2293  • prediction_resistance_request = FALSE (or is omitted); and 2294  • additional_input is optional. 2295  B.4. Example of an RBG2(P) or RBG2(NP) Construction 2296  For this example of an RBG2 construction, no conditioning function is used, and only a single 2297  DRBG instantiation will be used (see Figure 22), so a state handle is not needed. Full-entropy 2298  output is not provided by the entropy source, which may be either a physical or non-physical 2299  entropy source. 2300  2301  Fig. 22. RBG2 Example 2302  The targeted security strength is 256 bits, so a DRBG from [SP800-90A] that can support this 2303  security strength must be used; HMAC_DRBG using SHA-256 is used in this example. A 2304  personalization_string may be provided, as recommended in Section 2.4.1. Reseeding and 2305  prediction resistance are supported and will be available on demand. 2306  This example provides the following capabilities:  2307  • An RBG instantiated at a security strength of 256 bits, and 2308  • Access to an entropy source to provide prediction resistance. 2309  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  69  B.4.1. Instantiation of an RBG2 Construction 2310  The DRBG in the RBG2 construction is instantiated using an Instantiate_function call (see 2311  Section 2.8.1.1): 2312  (status) = Instantiate_function (256, prediction_resistance_flag = TRUE, “RBG2 42”). 2313  • Since there is only a single instantiation, a state_handle is not used for this example. 2314  • Using “prediction_resistance_flag = TRUE”, the RBG is notified that prediction resistance 2315  may be requested in subsequent Generate_function calls. 2316  • The personalization string to be used for this example is “RBG2 42.” 2317  The entropy for establishing the security strength (s) of the DRBG (i.e., s = 256 bits) is requested 2318  using the following Get_ES_Bitstring call to the entropy source (see Section 2.8.2.2 and item 2 2319  in Section 5.2.1): 2320  (status, entropy_bitstring) = Get_ES_Bitstring(384), 2321  where 3s/2 = 384 bits of entropy are requested from the entropy source. 2322  If status = SUCCESS is returned from the Get_ES_Bitstring call, the HMAC_DRBG is seeded 2323  using entropy_bitstring, and the personalization_string is “RBG2 42.” The internal state is 2324  recorded (including the security strength of the instantiation), and status = SUCCESS is returned 2325  to the consuming application by the Instantiate_function. 2326  If status = FAILURE is returned from the Get_ES_Bitstring call, then the internal state is not 2327  created, status = FAILURE and a Null state handle are returned by the Instantiate_function to 2328  the consuming application, and the RBG cannot be used to generate bits. 2329  B.4.2. Generation in an RBG2 Construction 2330  Assuming that the RBG has been successfully instantiated (see Appendix B.4.1), pseudorandom 2331  bits are requested from the RBG by a consuming application using the Generate_function call as 2332  specified in Section 2.8.1.2: 2333  (status, returned_bits) = Generate_function(requested_number_of_bits, security_strength, 2334  prediction_resistance_request, additional input). 2335  • Since there is only a single instantiation of the HMAC_DRBG, a state_handle was not 2336  returned from the Instantiate_function (see Appendix B.4.1) and is not used during the 2337  Generate_function call. 2338  • The requested_security_strength may be any value that is less than or equal to 256 (the 2339  instantiated security strength recorded in the HMAC_DRBG’s internal state). 2340  • prediction_resistance_request = TRUE if prediction resistance is requested and FALSE 2341  otherwise. 2342  • Additional input is optional. 2343  If prediction resistance is requested, a reseed of the HMAC_DRBG is requested by the 2344  Generate_function before the requested bits are generated (see Appendix B.4). If status = 2345  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  70  FAILURE is returned from the Reseed_function, status = FAILURE is also returned to the 2346  consuming application by the Generate_function, along with a Null value as the returned_bits. 2347  Whether or not prediction resistance is requested, a status indication is returned from the 2348  Generate_function call. If status = SUCCESS, a bitstring of at least requested_number_of_bits 2349  is provided as the returned_bits to the consuming application. If status = FAILURE, returned_bits 2350  is an empty bitstring. 2351  B.4.3. Reseeding an RBG2 Construction 2352  The HMAC_DRBG will be reseeded 1) if explicitly requested by the consuming application, 2) 2353  whenever generation with prediction resistance is requested by the Generate_function, or 3) 2354  automatically during a Generate_function call at the end of the DRBG’s designed seedlife (see 2355  the Generate_function specification in [SP800-90A)]. 2356  The Reseed_function call, as specified in Section 2.8.1.3, is: 2357  status = Reseed_function(additional_input). 2358  • Since there is only a single instantiation of the HMAC_DRBG, a state_handle was not 2359  returned from the Instantiate_function (see Appendix B.4.1) and is not used during the 2360  Reseed_function call. 2361  • The additional_input is optional.  2362  Since entropy is obtained directly from the entropy source (case 2 in Section 5.2.3), the 2363  implementation has replaced the Get_randomness-source_input call used by the 2364  Reseed_function in [SP800-90A] with a Get_ES_Bitstring call. 2365  The HMAC_DRBG is reseeded with a security strength of 256 bits as follows: 2366  (status, entropy_bitstring) = Get_ES_Bitstring(256). 2367  If status = SUCCESS is returned by Get_ES_Bitstring, the entropy_bitstring contains at least 256 2368  bits of entropy and is at least 256 bits long. Status = SUCCESS is returned to the calling application 2369  (e.g., the Generate_function) by the Reseed_function. 2370  If status = FAILURE, entropy_bitstring is an empty (e.g., null) bitstring. The HMAC_DRBG is 2371  not reseeded, and status= FAILURE is returned from Reseed_function to the calling application. 2372  B.5. Example of an RBG3(XOR) Construction 2373  This construction is specified in Section 6.2 and requires a DRBG and a source of full-entropy 2374  bits. For this example, the entropy source itself does not provide full-entropy output, so the vetted 2375  Hash conditioning function listed in [SP800-90B] using SHA-256 is used as an external 2376  conditioning function. 2377  The Hash_DRBG specified in [SP800-90A] will be used as the DRBG, with SHA-256 used as the 2378  underlying hash function for the DRBG (note the use of SHA-256 for both the Hash_DRBG and 2379  the vetted conditioning function). The DRBG will obtain input directly from the RBG’s entropy 2380  source without conditioning (as shown in Figure 23), since bits with full entropy are not required 2381  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  71  for input to the DRBG, even though full-entropy bits are required for input to the XOR operation 2382  (shown as “⊕” in the figure) from the entropy source via the conditioning function. 2383  2384  Fig. 23. RBG3(XOR) Construction Example 2385  As specified in Section 6.2, the DRBG must be instantiated (and reseeded) at 256 bits, which is 2386  possible for SHA-256. 2387  In this example, only a single instantiation is used, and a personalization string is provided during 2388  instantiation. The DRBG is not directly accessible. 2389  Calls are made to the RBG using the RBG3(XOR) calls specified in Section 6.2. 2390  The Hash_DRBG itself is not directly accessible.  2391  This example provides the following capabilities: 2392  • Full-entropy output by the RBG, 2393  • Fallback to the security strength provided by the Hash_DRBG (256 bits) if the entropy 2394  source has an undetected failure, and 2395  • Access to an entropy source to instantiate and reseed the Hash_DRBG. 2396  B.5.1. Instantiation of an RBG3(XOR) Construction 2397  The Hash_DRBG is instantiated using: 2398  status = RBG3(XOR)_DRBG_Instantiate(“RBG3(XOR)”), 2399  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  72  • Since the DRBG is not directly accessible, there is no need for a separate instantiation, so 2400  there is also no need for the return of a state handle. 2401  • The personalization string for the DRBG is “RBG3(XOR).” 2402  The RBG3(XOR)_DRBG_Instantiate function in Section 6.2.1.1 uses a DRBG 2403  Instantiate_function to seed the Hash_DRBG: 2404  (status) = Instantiate_function(256, prediction_resistance_flag = FALSE, 2405  personalization_string). 2406  • Since the DRBG is not directly accessible, there is no need for a separate instantiation, so 2407  there is also no need for the return of a state handle. 2408  • The DRBG is instantiated at a security strength of 256 bits. 2409  • The DRBG is notified that prediction resistance is not required using 2410  prediction_resistance_flag = FALSE. Since the DRBG will not be accessed directly, 2411  prediction_resistance will never be requested. Optionally, the implementation could omit 2412  this parameter. 2413  • The personalization string for the DRBG is “RBG3(XOR).” It was provided in the 2414  RBG3(XOR)_DRBG_Instantiate call. 2415  Section 6.2.1.1 refers to Section 5.2.1 for further information on instantiating the DRBG. 2416  The entropy for establishing the security strength (s) of the Hash_DRBG (i.e., where s = 256 bits) 2417  is requested using the following Get_ES_Bitstring call: 2418  (status, entropy_bitstring) = Get_ES_Bitstring(384), 2419  where 3s/2 = 384 bits of entropy are requested from the entropy source. 2420  If status = SUCCESS is returned from the Get_ES_Bitstring call, the Hash_DRBG is seeded 2421  using the entropy_ bitstring and the personalization_string (“RBG3(XOR)”). The internal state is 2422  recorded (including the 256-bit security strength of the instantiation), and status = SUCCESS is 2423  returned to the consuming application by the Instantiate_function. The RBG can be used to 2424  generate full-entropy bits. 2425  If status = FAILURE is returned from the Get_ES_Bitstring call, status = FAILURE and a Null 2426  state handle are returned to the consuming application from the Instantiate_function. `The 2427  Hash_DRBG’s internal state is not established, and the RBG cannot be used to generate bits. 2428  B.5.2. Generation by an RBG3(XOR) Construction 2429  Assuming that the Hash_DRBG has been instantiated (see Appendix B.4.1), the RBG can be called 2430  by a consuming application to generate output with full entropy. 2431  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  73  B.5.2.1. Generation 2432  Let n indicate the requested number of bits to generate. The construction in Section 6.3.1.2 is used 2433  as follows: 2434  RBG3(XOR)_Generate: 2435  Input: integer n, string additional_input. 2436  Output: integer status, bitstring returned_bits. 2437  Process: 2438  1. (status, ES_bits) = Get_conditioned_full-entropy_input(n). 2439  2. If (status ≠ SUCCESS), then return(status, Null). 2440  3. (status, DRBG_bits) = Generate_function(n, 256, prediction_resistance_request = 2441  FALSE, additional_input). 2442  4. If (status ≠ SUCCESS), then return(status, Null). 2443  5. returned_bits = ES_bits ⊕ DRBG_bits. 2444  6. Return SUCCESS, returned_bits. 2445  Note that the state_handle parameter is not used in the RBG3(XOR)_Generate call or the 2446  Generate_function call (in step 3) for this example since a state_handle was not returned from 2447  the RBG3(XOR)_DRBG_Instantiate function (see Appendix B.5.1). 2448  In step 1, the entropy source is accessed via the conditioning function using the 2449  Get_conditioned_full-entropy_input routine (see Appendix B.5.2.2) to obtain n bits with full 2450  entropy. 2451  Step 2 checks that the Get_conditioned_full-entropy_input call in step 1 was successful. If it 2452  was not successful, the RBG3(XOR)_Generate function is aborted, returning status ≠ SUCCESS 2453  to the consuming application along with a Null bitstring as the returned_bits. 2454  Step 3 calls the Hash_DRBG to generate n bits to be XORed with the n-bit output of the entropy 2455  source (ES_Bits; see step 1) in order to produce the RBG output. Note that a request for prediction 2456  resistance is not made in the Generate_function call (i.e., prediction_resistance_request = 2457  FALSE). Optionally, this parameter could be omitted since prediction resistance is never 2458  requested. 2459  Step 4 checks that the Generate_function invoked in step 3 was successful. If it was not 2460  successful, the RBG3(XOR)_Generate function is aborted, returning status ≠ SUCCESS to the 2461  consuming application along with a Null bitstring as the returned_bits. 2462  If step 3 returns an indication of success, the ES_bits returned in step 1 and the DRBG_bits obtained 2463  in step 3 are XORed together in step 5. The result is returned to the consuming application in step 2464  6. 2465  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  74  B.5.2.2. Get_conditioned_full-entropy_input Function 2466  The Get_conditioned_full-entropy_input construction is specified in Section 3.3.2. For this 2467  example, the routine becomes the following: 2468  Get_conditioned_full_entropy_ input: 2469  Input: integer n. 2470  Output: integer status, bitstring Full-entropy_bitstring. 2471  Process: 2472  1.  temp = the Null string. 2473  2. ctr = 0. 2474  3. While ctr < n, do 2475  3.1  (status, entropy_bitstring) = Get_ES_Bitstring (320). 2476  3.2 If (status ≠ SUCCESS), then return (status, invalid_string). 2477  3.3 conditioned_output = HashSHA_256(entropy_bitstring). 2478  3.4 temp =temp || conditioned_output. 2479  3.5 ctr = ctr + 256. 2480  4. Full-entropy_bitstring = leftmost(temp, n). 2481  5. Return (SUCCESS, Full-entropy_bitstring). 2482  Steps 1 and 2 initialize the temporary bitstring (temp) for holding the full-entropy bitstring being 2483  assembled, and the counter (ctr) that counts the number of full-entropy bits produced so far. 2484  Step 3 obtains and processes the entropy for each iteration. 2485  • Step 3.1 requests 320 bits from the entropy source(s) (i.e., output_len + 64 bits, where 2486  output_len = 256 for SHA-256). 2487  • Step 3.2 checks whether or not the status returned in step 3.1 indicated a success. If the 2488  status did not indicate a success, the status is returned along with an invalid (e.g., Null) 2489  bitstring as the Full-entropy_bitstring. 2490  • Step 3.3 invokes the Hash conditioning function (see Section 3.3.1.2) using SHA-256 for 2491  processing the entropy_bitstring obtained from step 3.1. 2492  • Step 3.4 concatenates the conditioned_output received in step 3.3 to the temporary bitstring 2493  (temp), and step 3.5 increments the counter for the number of full-entropy bits that have 2494  been produced so far. 2495  After at least n bits have been produced in step 3, step 4 selects the leftmost n bits of the temporary 2496  string (temp) to be returned as the bitstring with full entropy. 2497  Step 5 returns the result from step 4 (Full-entropy_bitstring). 2498  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  75  B.5.3. Reseeding an RBG3(XOR) Construction 2499  The Hash_DRBG must be reseeded at the end of its designed seedlife and may be reseeded on 2500  demand (e.g., by the consuming application). Reseeding will be automatic whenever the end of 2501  the DRBG’s seedlife is reached during a Generate_function call (see [SP800-90A]). For this 2502  example, whether reseeding is done automatically during a Generate_function call or is 2503  specifically requested by a consuming application, the Reseed_function call is: 2504  status = Reseed_function(additional_input). 2505  • The state_handle parameter is not used in the Reseed_function call since a state_handle 2506  was not returned from the RBG3(XOR)_DRBG_Instantiate function (see Appendix 2507  B.5.1). 2508  • The security strength for reseeding the Hash_DRBG is recorded in the internal state as 256 2509  bits. 2510  • Additional input is optional. 2511  Section 6.3.1.3 refers to Section 5.2.3 for reseeding the Hash_DRBG. Since entropy is obtained 2512  directly from the entropy source and no conditioning function is used (case 2 in Section 6.3.2), the 2513  implementation has replaced the Get_randomness-source_input call used by the 2514  Reseed_function in [SP800-90A] with a Get_ES_Bitstring call. 2515  The Hash_DRBG is reseeded with a security strength of 256 bits as follows: 2516  (status, entropy_bitstring) = Get_ES_Bitstring(256). 2517  If status = SUCCESS is returned by the Get_ES_Bitstring call, entropy_bitstring consists of at 2518  least 256 bits that contain at least 256 bits of entropy. These bits are used to reseed the 2519  Hash_DRBG. Status = SUCCESS is then returned to the calling application by the 2520  Reseed_function. 2521  If status = FAILURE, entropy_bitstring is an empty (e.g., null) bitstring. The Hash_DRBG is not 2522  reseeded, and status ≠ SUCCESS is returned from the Reseed_function to the calling application 2523  (e.g., the Generate_function). 2524  B.6. Example of an RBG3(RS) Construction 2525  This construction is specified in Section 6.3 and requires an entropy source and a DRBG (see the 2526  left half of Figure 24 outlined in green). The DRBG is directly accessible using the same 2527  instantiation that is used by the RBG3(RS) construction (i.e., they share the same internal state). 2528  When accessed directly, the DRBG behaves as an RBG2(P) construction (see the right half of 2529  Figure 24 outlined in blue). 2530  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  76  2531  Fig. 24. RBG3(RS) Construction Example 2532  The CTR_DRBG specified in [SP800-90A] will be used as the DRBG with AES-256 used as the 2533  underlying block cipher for the DRBG. The CTR_DRBG will be implemented using a derivation 2534  function (located inside the CTR_DRBG implementation). In this case, full-entropy output will 2535  not be required for the entropy source (see [SP800-90A]). However, an alternative example could 2536  use the CTR_DRBG without a derivation function. In that case, either the entropy source would 2537  need to provide full-entropy output, or a vetted conditioning function would be required to 2538  condition the entropy to provide full-entropy bits before providing it to the DRBG. 2539  As specified in Section 6.2, a DRBG used as part of the RBG must be instantiated (and reseeded) 2540  at a security strength of 256 bits (which AES-256 can support). 2541  For this example, the DRBG has a fixed security strength (256 bits), which is hard-coded into the 2542  implementation so will not be used as an input parameter. 2543  Calls are made to the RBG as specified in Section 6.3.1. Calls made to the directly accessible 2544  DRBG (part of a RBG2(P) construction) use the RBG calls specified in Section 5.2. Since an 2545  entropy source is always available, the directly accessed DRBG can be reseeded and support 2546  prediction resistance. 2547  If the entropy source produces output at a slow rate, a consuming application might call the 2548  RBG3(RS) construction only when full-entropy bits are required, obtaining all other output from 2549  the directly accessible DRBG. 2550  This example provides the following capabilities: 2551  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  77  • Full-entropy output by the RBG3(RS) construction, 2552  • Fallback to the security strength of the RBG3(RS)’s DRBG instantiation (256 bits) if the 2553  entropy source has an undetected failure, 2554  • Direct access to an RBG2(P) construction with a security strength of 256 bits for faster 2555  output when full-entropy output is not required, 2556  • Access to an entropy source to instantiate and reseed the DRBG, and 2557  • Prediction resistance support for the directly accessed DRBG. 2558  B.6.1. Instantiation of an RBG3(RS) Construction 2559  Instantiation for this example consists of the instantiation of the CTR_DRBG used by the 2560  RBG3(RS) construction. 2561  The DRBG is initialized as follows: 2562  (status, RBG3(RS)_state_handle) = RBG3(RS)_DRBG_Instantiate(“RBG3(RS) 2021”). 2563  • “RBG3(RS) 2021” is to be used as the personalization string for the DRBG instantiation 2564  used in the RBG3(RS) construction. 2565  • RBG3(RS)_state_handle is returned as the state handle for the DRBG instantiation used 2566  by the RBG3(RS) construction. 2567  Appendices B.6.2 and B.6.3 will show the differences between the operation of the RBG3(RS) 2568  and RBG2(P) constructions. 2569  B.6.2. Generation by an RBG3(RS) Construction 2570  Assuming that the DRBG instantiation for the RBG3(RS) construction has been instantiated (see 2571  Appendix B.6.1), the RBG can be invoked by a consuming application to generate outputs with 2572  full entropy. The RBG3(RS)_Generate construction in Section 6.3.1.2.1 is invoked using 2573  (status, returned_bits) = RBG3(RS)_Generate(RBG3(RS)_state_handle, n, 2574  additional_information). 2575  • The RBG3(RS)_state_handle (obtained during instantiation; see Appendix B.6.1) is used 2576  to access the internal state information for the DRBG instantiation for the RBG3(RS) 2577  construction. 2578  • The consuming application requests n bits. 2579  • The input of additional_information is optional. 2580  The process is specified in Section 6.3.1.2.1. The state handle in the Generate_function is 2581  RBG3(RS)_state_handle, which was obtained during instantiation (see Appendix B.6.1). 2582  B.6.3. Generation by the Directly Accessible DRBG 2583  Assuming that the DRBG has been instantiated (see Appendix B.6.1), it can be accessed directly 2584  by a consuming application in the same manner as the RBG2(P) example in Appendix B.4.2 using 2585  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  78  the RBG3(RS)_state_handle obtained during instantiation (see Appendix B.6.1) and using a 2586  Generate_function call: 2587  (status, returned_bits) = Generate_function(RBG3(RS)_state_handle, n, 2588  prediction_resistance_request, additional_input). 2589  Note that the security strength parameter (256) was omitted since its value has been hard coded. 2590  Requirement 2 in Section 6.3.2 requires that the DRBG be reseeded whenever a request for 2591  generation by a directly accessible DRBG follows a request for generation by the RBG3(RS) 2592  construction. For this example, the internal state includes an indication about whether the last use 2593  of the DRBG was as part of the RBG3(RS) construction or was directly accessible. If the 2594  Generate_function (above) does not include a request for prediction resistance (e.g., 2595  prediction_resistance_request was not set to TRUE), then the DRBG will be reseeded anyway 2596  using the entropy source before generating output if the previous use of the DRBG was part of the 2597  RBG3(RS) construction. 2598  B.6.4. Reseeding a DRBG 2599  When operating as part of the RBG3(RS) construction, the Reseed_function is invoked one or 2600  more times to produce full-entropy output when the RBG3(RS)_Generate function is invoked by 2601  a consuming application. 2602  When operating as part of the RBG2(P) construction (the directly accessible DRBG), the DRBG 2603  is reseeded 1) if explicitly requested by the consuming application, 2) automatically whenever a 2604  generation with prediction resistance is requested during a direct access of the DRBG (see 2605  Appendix B.6.3), 3) whenever the previous use of the DRBG was by the RBG3(RS)_Generate 2606  function (see Appendix B.6.2), or 4) automatically during a Generate_function call at the end of 2607  the seedlife of the RBG2(P) construction (see the Generate_function specification in [SP800-2608  90A]). 2609  The Reseed_function call is: 2610  status = Reseed_function(RBG3(RS)_state_handle, additional_input). 2611  • The state_handle is RBG3(RS)_state handle, and 2612  • additional_input is optional.38 2613  The DRBG is reseeded with a security strength of 256 bits as follows: 2614  (status, entropy_bitstring) = Get_ES_Bitstring(256). 2615  If status = SUCCESS is returned by Get_ES_Bitstring, entropy_bitstring consists of at least 256 2616  bits containing at least 256 bits of entropy. Status = SUCCESS is returned to the calling application 2617  by the Reseed_function. 2618  38 Note that when the RBG3(RS) Generate function uses a Hash_DRBG, HMAC_DRBG, or CTR_DRBG with no derivation function and Method  A, whereby 64 bits of additional entropy are required to produce output_len bits with full entropy (see Section 7.3.1,.2.1, step 3.1), the additional  64 bits of entropy obtained in step 3.1.1 is provided to the Generate_function (in step 3.1.3) with prediction requested. In Section 9.3 of SP 800- 90A, the Generate_function reseeds the DRBG when prediction resistance is requested using entropy from the entropy source and any additional  input that is provided – the additional 64 bits of entropy, in this case.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  79  If status ≠ SUCCESS (e.g., the entropy source has failed), entropy_bitstring is an empty (e.g., null) 2619  bitstring, the DRBG is not reseeded, and a FAILURE status is returned from Reseed_function to 2620  the calling application (e.g., the Generate_function). 2621  2622  Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG 2623  C.1. Background and Scope 2624  The CTR_DRBG, specified in [SP800-90A], uses the block cipher AES and has two versions that 2625  may be implemented: with or without a derivation function. 2626  When a derivation function is not used, SP 800-90A requires the use of bitstrings with full entropy 2627  for instantiating and reseeding a CTR_DRBG. This addendum permits the use of an RBG 2628  compliant with SP 800-90C to provide the required seed material for the CTR_DRBG when 2629  implemented as specified in SP 800-90C (see Appendix C.2). 2630  When a derivation function is used in a CTR_DRBG implementation, SP 800-90A specifies the 2631  use of the block cipher derivation function. This addendum modifies the requirements in SP 800-2632  90A for the CTR_DRBG by specifying two additional derivation functions that may be used 2633  instead of the block cipher derivation function (see Appendix C.3). 2634  C.2. CTR_DRBG without a Derivation Function 2635  When a derivation function is not used, SP 800-90A requires that seedlen full-entropy bits be 2636  provided as the randomness input (e.g., from an entropy source that provides full-entropy output), 2637  where seedlen is the length of the key to be used by the CTR_DRBG plus the length of the output 2638  block.39 SP 800-90C includes an approved method for externally conditioning the output of an 2639  entropy source to provide a bitstring with full entropy when using an entropy source that does not 2640  provide full-entropy output. 2641  SP 800-90C also permits the use of seed material from an RBG when the DRBG to be instantiated 2642  and reseeded is implemented and used as specified in SP 800-90C. 2643  C.3. CTR_DRBG using a Derivation Function 2644  When a derivation function is used within a CTR_DRBG, SP 800-90A specifies the use of the 2645  Block_cipher_df included in that document during instantiation and reseeding to adjust the length 2646  of the seed material to seedlen bits, where  2647  seedlen = the security strength + the block length. 2648  For AES, seedlen = 256, 320 or 384 bits (see [SP800-90A], Rev. 1). During generation, the length 2649  of any additional input provided during the generation request is adjusted to seedlen bits as well 2650  (see SP 800-90A). 2651  39 128 bits for AES.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  80  Two alternative derivation functions are specified in Appendices C.3.2 and C.3.3. Appendix C.3.1  2652  discusses the keys and constants for use with the alternative derivation functions specified in 2653  Appendices C.3.2 and C.3.3. 2654  C.3.1. Derivation Keys and Constants 2655  Both of the derivation methods specified in Appendices C.3.2 and C.3.3 an AES derivation key 2656  (df_Key) whose length shall meet or exceed the instantiated security strength of the DRBG 2657  instantiation. 2658  The df_Key may be set to any value and may be the current value of a key used by the DRBG. 2659  These alternative methods use three 128-bit constants C1, C2 and C3, which are defined as: 2660  C1 = 000000...00 2661  C2 = 101010...10 2662  C3 = 010101...01 2663  The value of B used in Appendices C.3.2 and C.3.3 depends on the length of the AES derivation 2664  key (df_Key). When the length of df_Key = 128 bits, then B = 2. Otherwise, B = 3. 2665  C.3.2. Derivation Function Using CMAC 2666  CMAC is a block-cipher mode of operation specified in [SP800-38B]. The CMAC_df derivation 2667  function is specified as follows: 2668  CMAC_df: 2669  Input: bitstring input_string, integer number_of_bits_to_return. 2670  Output: bitstring Z. 2671  Process: 2672  1. Let C1, C2, C3 be 128-bit blocks defined as 000000...0, 101010...10, 010101...01, 2673  respectively. 2674  2. Get df_Key. Comment: See Appendix C.3.1. 2675  3. Z = the Null string. 2676  4. For i = 1 to B: 2677  Z = Z || CMAC(df_Key, Ci || input_string). 2678  5. Z = leftmost (Z, number_of_bits_to_return). 2679  6. Return(Z). 2680  C.3.3. Derivation Function Using CBC-MAC 2681  This CBC-MAC derivation function shall only be used when the input_string has the following 2682  properties: 2683  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  81  • The length of the input string is always a fixed length. 2684  • The length of the input_string is an integer multiple of 128 bits. Let m be the number of 2685  128-bit blocks in the input_string. 2686  This derivation function is specified as follows: 2687  CBC-MAC_df: 2688  Input: bitstring input_string, integer number_of_bits_to_return. 2689  Output: bitstring Z. 2690  Process: 2691  1. Let C1, C2, C3 be 128-bit blocks defined as 000000...0, 101010...10, 010101...01, 2692  respectively. 2693  2. Get df_Key. Comment: See Appendix C.3.1. 2694  3. Z = the Null string. 2695  4. Let input_string = S1 || S2 || ... || Sm, where the Si are contiguous 128-bit blocks. 2696  5. For j = 1 to B: 2697  5.1 S0 = Cj. 2698  5.2 V = 128-bit block of all zeroes. 2699  5.3 For i = 0 to m: 2700  V = Encrypt(df_Key, V ⊕ Si). Comment: Perform the cipher operation 2701  specified in [FIPS197]. 2702  5.4 Z = Z || V. 2703  6. Z = leftmost(Z, number_of_bit_to_return). 2704  7. Return(Z). 2705  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  82  Appendix D. List of Symbols, Abbreviations, and Acronyms 2706  AES 2707  Advanced Encryption Standard40 2708  API 2709  Application Programming Interface 2710  CAVP 2711  Cryptographic Algorithm Validation Program 2712  CDF 2713  Cumulative Distribution Function 2714  CMVP 2715  Cryptographic Module Validation Program 2716  DRBG 2717  Deterministic Random Bit Generator41  2718  FIPS 2719  Federal Information Processing Standard 2720  ITL 2721  Information Technology Laboratory 2722  MAC 2723  Message Authentication Code 2724  NIST 2725  National Institute of Standards and Technology 2726  RAM 2727  Random Access Memory 2728  RBG 2729  Random Bit Generator 2730  SP 2731  (NIST) Special Publication 2732  Sub-DRBG 2733  Subordinate DRBG 2734  TDEA 2735  Triple Data Encryption Algorithm42 2736  XOR 2737  Exclusive-Or (operation) 2738  0x 2739  A string of x zeroes 2740  x 2741  40 As specified in [FIPS 197].  41 Mechanism specified in [SP800-90A].  42 As specified in [SP 800-67], Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  83  The ceiling of x; the least integer number that is not less than the real number x. For example, 3 = 3, and 5.5 = 6. 2742  ε 2743  A positive constant that is assumed to be smaller than 2−32 2744  E(X) 2745  The expected value of the random variable X 2746  len(x) 2747  The length of x in bits 2748  min(a, b) 2749  The minimum of a and b 2750  output_len 2751  The bit length of the output block of a cryptographic primitive 2752  s 2753  The security strength 2754  X ⊕ Y 2755  Boolean bitwise exclusive-or (also bitwise addition modulo 2) of two bitstrings X and Y of the same length 2756  + 2757  Addition over real numbers 2758  × 2759  Multiplication over real numbers  2760  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  84  Appendix E. Glossary 2761  adversary 2762  A malicious entity whose goal is to determine, to guess, or to influence the output of an RBG. 2763  approved 2764  An algorithm or technique for a specific cryptographic use that is specified in a FIPS or NIST Recommendation, 2765  adopted in a FIPS or NIST Recommendation, or specified in a list of NIST-approved security functions. 2766  backtracking resistance 2767  A property of a DRBG that provides assurance that compromising the current internal state of the DRBG does not 2768  weaken previously generated outputs. See SP 800-90A for a more complete discussion. (Contrast with prediction 2769  resistance.) 2770  biased 2771  A random variable is said to be biased if values of the finite sample space are selected with unequal probability. 2772  Contrast with unbiased. 2773  big-endian format 2774  A format in which the most significant bytes (the bytes containing the high-order or leftmost bits) are stored in the 2775  lowest address with the following bytes in sequentially higher addresses. 2776  bitstring 2777  An ordered sequence (string) of 0s and 1s. The leftmost bit is the most significant bit. 2778  block cipher 2779  A parameterized family of permutations on bitstrings of a fixed length; the parameter that determines the permutation 2780  is a bitstring called the key. 2781  conditioning function (external) 2782  As used in SP 800-90C, a deterministic function that is used to produce a bitstring with full entropy. 2783  consuming application 2784  An application that uses random outputs from an RBG. 2785  cryptographic boundary 2786  An explicitly defined physical or conceptual perimeter that establishes the physical and/or logical bounds of a 2787  cryptographic module and contains all of the hardware, software, and/or firmware components of a cryptographic 2788  module. 2789  cryptographic module 2790  The set of hardware, software, and/or firmware that implements cryptographic functions (including cryptographic 2791  algorithms and key generation) and is contained within the cryptographic boundary. 2792  deterministic random bit generator (DRBG) 2793  An RBG that produces random bitstrings by applying a deterministic algorithm to initial seed material. 2794  Note: A DRBG at least has access to a randomness source initially. 2795  Note: A portion of the seed material is secret. 2796  digitization 2797  The process of generating raw discrete digital values from non-deterministic events (e.g., analog noise sources) within 2798  a noise source. 2799  entropy 2800  A measure of disorder, randomness, or variability in a closed system. 2801  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  85  Note: The entropy of a random variable X is a mathematical measure of the amount of information gained by an 2802  observation of X. 2803  Note: The most common concepts are Shannon entropy and min-entropy. Min-entropy is the measure used in SP 800-2804  90. 2805  entropy rate 2806  The validated rate at which an entropy source provides entropy in terms of bits per entropy-source output (e.g., five 2807  bits of entropy per eight-bit output sample). 2808  entropy source 2809  The combination of a noise source, health tests, and optional conditioning component that produce bitstrings 2810  containing entropy. A distinction is made between entropy sources having physical noise sources and those having 2811  non-physical noise sources. 2812  Note: Health tests are comprised of continuous tests and startup tests. 2813  fresh entropy 2814  A bitstring that is output from a non-deterministic randomness source that has not been previously used to generate 2815  output or has otherwise been made externally available. 2816  Note: The randomness source should be an entropy source or RBG3 construction. 2817  full-entropy bitstring 2818  A bitstring with ideal randomness (i.e., the amount of entropy per bit is equal to 1). This Recommendation assumes 2819  that a bitstring has full entropy if the entropy rate is at least 1 − ε, where ε is at most 2−32. 2820  hash function 2821  A (mathematical) function that maps values from a large (possibly very large) domain into a smaller range. The 2822  function satisfies the following properties: 2823  1. (One-way) It is computationally infeasible to find any input that maps to any pre-specified output. 2824  2. (Collision-free) It is computationally infeasible to find any two distinct inputs that map to the same output. 2825  health testing 2826  Testing within an implementation immediately prior to or during normal operations to obtain assurance that the 2827  implementation continues to perform as implemented and validated. 2828  ideal randomness source 2829  The source of an ideal random sequence of bits. Each bit of an ideal random sequence is unpredictable and unbiased, 2830  with a value that is independent of the values of the other bits in the sequence. Prior to an observation of the sequence, 2831  the value of each bit is equally likely to be 0 or 1, and the probability that a particular bit will have a particular value 2832  is unaffected by knowledge of the values of any or all of the other bits. An ideal random sequence of n bits contains n 2833  bits of entropy. 2834  independent entropy sources 2835  Two entropy sources are independent if knowledge of the output of one entropy source provides no information about 2836  the output of the other entropy source. 2837  instantiate 2838  The process of initializing a DRBG with sufficient randomness to generate pseudorandom bits at the desired security 2839  strength. 2840  internal state (of a DRBG) 2841  The collection of all secret and non-secret information about an RBG or entropy source that is stored in memory at a 2842  given point in time. 2843  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  86  known-answer test 2844  A test that uses a fixed input/output pair to detect whether a deterministic component was implemented correctly or 2845  to detect whether it continues to operate correctly. 2846  min-entropy 2847  A lower bound on the entropy of a random variable. The precise formulation for min-entropy is (−log2 max pi) for a 2848  discrete distribution having probabilities p1, ..., pk. Min-entropy is often used as a measure of the unpredictability of a 2849  random variable. 2850  must 2851  Used in SP 800-90C to indicate a requirement that may not be testable by a CMVP testing lab. Note that must may 2852  be coupled with not to become must not. 2853  noise source 2854  A source of unpredictable data that outputs raw discrete digital values. The digitization mechanism is considered part 2855  of the noise source. A distinction is made between physical noise sources and non-physical noise sources. 2856  non-physical entropy source 2857  An entropy source whose primary noise source is non-physical. 2858  non-physical noise source 2859  A noise source that typically exploits system data and/or user interaction to produce digitized random data. 2860  non-validated entropy source 2861  An entropy source that has not been validated by the CMVP as conforming to SP 800-90B. 2862  null string 2863  An empty bitstring. 2864  personalization string 2865  An optional input value to a DRBG during instantiation to make one DRBG instantiation behave differently from 2866  other instantiations. 2867  physical entropy source 2868  An entropy source whose primary noise source is physical. 2869  physical noise source 2870  A noise source that exploits physical phenomena (e.g., thermal noise, shot noise, jitter, metastability, radioactive 2871  decay, etc.) from dedicated hardware designs (using diodes, ring oscillators, etc.) or physical experiments to produce 2872  digitized random data. 2873  prediction resistance 2874  A property of a DRBG that provides assurance that compromising the current internal state of the DRBG does not 2875  allow future DRBG outputs to be predicted past the point where the DRBG has been reseeded with sufficient entropy. 2876  See SP 800-90A for a more complete discussion. (Contrast with backtracking resistance.) 2877  pseudocode 2878  An informal, high-level description of a computer program, algorithm, or function that resembles a simplified 2879  programming language. 2880  random bit generator (RBG) 2881  A device or algorithm that outputs a random sequence that is effectively indistinguishable from statistically 2882  independent and unbiased bits. 2883  randomness 2884  As used in this Recommendation, the unpredictability of a bitstring. If the randomness is produced by a non-deterministic 2885  source (e.g., an entropy source or RBG3 construction), the unpredictability is dependent on the quality of the source. If 2886  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  87  the randomness is produced by a deterministic source (e.g., a DRBG), the unpredictability is based on the capability of 2887  an adversary to break the cryptographic algorithm for producing the pseudorandom bitstring. 2888  randomness input 2889  An input bitstring from a randomness source that provides an assessed minimum amount of randomness (e.g., entropy) 2890  for a DRBG. See min-entropy. 2891  randomness source 2892  A source of randomness for an RBG. The randomness source may be an entropy source or an RBG construction. 2893  RBG1 construction 2894  An RBG construction with the DRBG and the randomness source in separate cryptographic modules. 2895  RBG2 construction 2896  An RBG construction with one or more entropy sources and a DRBG within the same cryptographic module. This 2897  RBG construction does not provide full-entropy output. 2898  RBG2(NP) construction 2899  A non-physical RBG2 construction. An RBG2 construction that obtains entropy from one or more validated non-2900  physical entropy sources and possibly from one or more validated physical entropy sources. This RBG construction 2901  does not provide full-entropy output. 2902  RBG2(P) construction 2903  A physical RBG2 construction. An RBG construction that includes a DRBG and one or more entropy sources in the 2904  same cryptographic module. Only the entropy from validated physical entropy sources is counted when fulfilling an 2905  entropy request within the RBG. This RBG construction does not provide full-entropy output. 2906  RBG3 construction 2907  An RBG construction that includes a DRBG and one or more entropy sources in the same cryptographic module. 2908  When working properly, bitstrings that have full entropy are produced. Sometimes called a non-deterministic random 2909  bit generator (NRBG) or true random number (or bit) generator. 2910  reseed 2911  To refresh the internal state of a DRBG with seed material. The seed material should contain sufficient entropy to 2912  allow recovery from a possible compromise. 2913  sample space 2914  The set of all possible outcomes of an experiment. 2915  secure channel 2916  A physically protected secure path for transferring data between two cryptographic modules that ensures 2917  confidentiality, integrity, and replay protection as well as mutual authentication between the modules. 2918  security boundary 2919  For an entropy source: A conceptual boundary that is used to assess the amount of entropy provided by the values 2920  output from the entropy source. The entropy assessment is performed under the assumption that any observer 2921  (including any adversary) is outside of that boundary during normal operation. 2922  For a DRBG: A conceptual boundary that contains all of the DRBG functions and internal states required for a DRBG. 2923  For an RBG: A conceptual boundary that is defined with respect to one or more threat models that includes an 2924  assessment of the applicability of an attack and the potential harm caused by the attack. 2925  security strength 2926  A number associated with the amount of work (i.e., the number of basic operations of some sort) that is required to 2927  “break” a cryptographic algorithm or system in some way. In this Recommendation, the security strength is specified 2928  in bits and is a specific value from the set {128, 192, 256}. If the security strength associated with an algorithm or 2929  system is s bits, then it is expected that (roughly) 2s basic operations are required to break it. 2930  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  88  Note: This is a classical definition that does not consider quantum attacks. This definition will be revised to address 2931  quantum issues in the future. 2932  seed 2933  To initialize the internal state of a DRBG with seed material. The seed material should contain sufficient entropy to 2934  meet security requirements. 2935  seed material 2936  A bitstring that is used as input to a DRBG. The seed material determines a portion of the internal state of the DRBG. 2937  seedlife 2938  The period of time between instantiating or reseeding a DRBG with seed material and reseeding the DRBG with seed 2939  material containing fresh entropy or uninstantiation of the DRBG. 2940  shall 2941  The term used to indicate a requirement that is testable by a testing lab. Shall may be coupled with not to become 2942  shall not. See Testable requirement. 2943  should 2944  The term used to indicate an important recommendation. Ignoring the recommendation could result in undesirable 2945  results. Note that should may be coupled with not to become should not. 2946  state handle 2947  A pointer to the internal state information for a particular DRBG instantiation. 2948  subordinate DRBG (sub-DRBG) 2949  A DRBG that is instantiated by an RBG1 construction. 2950  support a security strength (by a DRBG) 2951  The DRBG has been instantiated at a security strength that is equal to or greater than the security strength requested 2952  for the generation of random bits. 2953  targeted security strength 2954  The security strength that is intended to be supported by one or more implementation-related choices (e.g., algorithms, 2955  cryptographic primitives, auxiliary functions, parameter sizes, and/or actual parameters). 2956  testable requirement 2957  A requirement that can be tested for compliance by a testing lab via operational testing, a code review, or a review of 2958  relevant documentation provided for validation. A testable requirement is indicated using a shall statement. 2959  threat model 2960  A description of a set of security aspects that need to be considered. A threat model can be defined by listing a set of 2961  possible attacks along with the probability of success and the potential harm from each attack. 2962  unbiased 2963  A random variable is said to be unbiased if all values of the finite sample space are chosen with the same 2964  probability. Contrast with biased. 2965  uninstantiate 2966  The termination of a DRBG instantiation. 2967  validated entropy source 2968  An entropy source that has been successfully validated by the CAVP and CMVP for conformance to SP 800-90B. 2969  1. Introduction and Purpose  1.1. Audience  1.2. Document Organization  2. General Information  2.1. RBG Security  2.2. RBG Constructions  2.3. Sources of Randomness for an RBG  2.4. DRBGs  2.4.1. DRBG Instantiations  2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise  2.5. RBG Security Boundaries  2.6. Assumptions and Assertions  2.7. General Implementation and Use Requirements and Recommendations  2.8. General Function Calls  2.8.1. DRBG Functions  2.8.1.1. DRBG Instantiation  2.8.1.2. DRBG Generation Request  2.8.1.3. DRBG Reseed Request  2.8.1.4. The Get_randomness-source_input Call  2.8.2. Interfacing with Entropy Sources Using the GetEntropy and Get_ES_Bitstring Functions  2.8.2.1. The GetEntropy Call  2.8.2.2. The Get_ES_Bitstring Function  2.8.3. Interfacing with an RBG3 Construction  2.8.3.1. Instantiating a DRBG within an RBG3 Construction  2.8.3.2. Generation Using an RBG3 Construction  3. Accessing Entropy Source Output  3.1. The Get_ES_Bitstring Function  3.2. Entropy Source Requirements  3.3. External Conditioning to Obtain Full-Entropy Bitstrings  3.3.1. Conditioning Function Calls  3.3.1.1. Keys Used in External Conditioning Functions  3.3.1.2. Hash Function-based Conditioning Functions  3.3.1.3. Block Cipher-based Conditioning Functions  3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings  4. RBG1 Constructions Based on RBGs with Physical Entropy Sources  4.1. RBG1 Description  4.2. Conceptual Interfaces  4.2.1. Instantiating the DRBG in the RBG1 Construction  4.2.2. Requesting Pseudorandom Bits  4.3. Using an RBG1 Construction with Subordinate DRBGs (Sub-DRBGs)  4.3.1. Instantiating a Sub-DRBG  4.3.2. Requesting Random Bits  4.4. Requirements  4.4.1. RBG1 Requirements  4.4.2. Sub-DRBG Requirements  5. RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources  5.1. RBG2 Description  5.2. Conceptual Interfaces  5.2.1. RBG2 Instantiation  5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction  5.2.3. Reseeding an RBG2 Construction  5.3. RBG2 Requirements  6. RBG3 Constructions Based on Physical Entropy Sources  6.1. General Requirements  6.2. RBG3(XOR) Construction  6.2.1. Conceptual Interfaces  6.2.1.1. Instantiation of the DRBG  6.2.1.2. Random and Pseudorandom Bit Generation  6.2.1.3. Pseudorandom Bit Generation Using a Directly Accessible DRBG  6.2.1.4. Reseeding the DRBG Instantiations  6.2.2. RBG3(XOR) Requirements  6.3. RBG3(RS) Construction  6.3.1. Conceptual Interfaces  6.3.1.1. Instantiation of the DRBG Within an RBG3(RS) Construction  6.3.1.2. Random and Pseudorandom Bit Generation  6.3.1.3. Reseeding  6.3.2. Requirements for a RBG3(RS) Construction  7. Testing  7.1. Health Testing  7.1.1. Testing RBG Components  7.1.2. Handling Failures  7.1.2.1. Entropy-Source Failures  7.1.2.2. Failures by Non-Entropy-Source Components  7.2. Implementation Validation  References  Appendix A. Entropy vs. Security Strength (Informative)  A.1. Entropy  A.2. Security Strength  A.3. A Side-by-Side Comparison  A.4. Entropy and Security Strength in this Recommendation  Appendix B. RBG Examples (Informative)  B.1. Direct DRBG Access in an RBG3 Construction  B.2. Example of an RBG1 Construction  B.2.1. Instantiation of the RBG1 Construction  B.2.2. Generation by the RBG1 Construction  B.3. Example Using Sub-DRBGs Based on an RBG1 Construction  B.3.1. Instantiation of the Sub-DRBGs  B.3.1.1. Instantiating Sub-DRBG1  B.3.1.2. Instantiating Sub-DRBG2  B.3.2. Pseudorandom Bit Generation by Sub-DRBGs  B.4. Example of an RBG2(P) or RBG2(NP) Construction  B.4.1. Instantiation of an RBG2 Construction  B.4.2. Generation in an RBG2 Construction  B.4.3. Reseeding an RBG2 Construction  B.5. Example of an RBG3(XOR) Construction  B.5.1. Instantiation of an RBG3(XOR) Construction  B.5.2. Generation by an RBG3(XOR) Construction  B.5.2.1. Generation  B.5.2.2. Get_conditioned_full-entropy_input Function  B.5.3. Reseeding an RBG3(XOR) Construction  B.6. Example of an RBG3(RS) Construction  B.6.1. Instantiation of an RBG3(RS) Construction  B.6.2. Generation by an RBG3(RS) Construction  B.6.3. Generation by the Directly Accessible DRBG  B.6.4. Reseeding a DRBG  Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG  C.1. Background and Scope  C.2. CTR_DRBG without a Derivation Function  C.3. CTR_DRBG using a Derivation Function  C.3.1. Derivation Keys and Constants  C.3.2. Derivation Function Using CMAC  C.3.3. Derivation Function Using CBC-MAC  Appendix D. List of Symbols, Abbreviations, and Acronyms  Appendix E. Glossary",
    "original document": "NIST SP 800-90C 3pd (Third Public Draft), Recommendation for Random Bit Generator (RBG) Constructions  NIST Special Publication  1  NIST SP 800-90C 3pd 2  Recommendation for Random Bit 3  Generator (RBG) Constructions 4  Third Public Draft (3pd) 5  6  Elaine Barker 7  John Kelsey 8  Kerry McKay 9  Allen Roginsky 10  Meltem Sönmez Turan 11  This publication is available free of charge from: 12  https://doi.org/10.6028/NIST.SP.800-90C.3pd 13  https://crossmark.crossref.org/dialog/?doi=10.6028/NIST.SP.800-90C.3pd  NIST Special Publication  14  NIST SP 800-90C 3pd 15  Recommendation for Random Bit 16  Generator (RBG) Constructions 17  Third Public Draft (3pd) 18  19  Elaine Barker 20  John Kelsey 21  Kerry McKay 22  Allen Roginsky 23  Meltem Sönmez Turan 24  Computer Security Division 25  Information Technology Laboratory 26  27  This publication is available free of charge from: 28  https://doi.org/10.6028/NIST.SP.800-90C.3pd 29  September 2022 30  31  U.S. Department of Commerce  32  Gina M. Raimondo, Secretary 33  National Institute of Standards and Technology  34  Laurie E. Locascio, NIST Director and Under Secretary of Commerce for Standards and Technology 35  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  Certain commercial entities, equipment, or materials may be identified in this document in order to describe an 36  experimental procedure or concept adequately. Such identification is not intended to imply recommendation or 37  endorsement by the National Institute of Standards and Technology (NIST), nor is it intended to imply that the entities, 38  materials, or equipment are necessarily the best available for the purpose. 39  There may be references in this publication to other publications currently under development by NIST in accordance 40  with its assigned statutory responsibilities. The information in this publication, including concepts and methodologies, 41  may be used by federal agencies even before the completion of such companion publications. Thus, until each 42  publication is completed, current requirements, guidelines, and procedures, where they exist, remain operative. For 43  planning and transition purposes, federal agencies may wish to closely follow the development of these new 44  publications by NIST. 45  Organizations are encouraged to review all draft publications during public comment periods and provide feedback to 46  NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at 47  https://csrc.nist.gov/publications. 48  Authority 49  This publication has been developed by NIST in accordance with its statutory responsibilities under the Federal 50  Information Security Modernization Act (FISMA) of 2014, 44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283. 51  NIST is responsible for developing information security standards and guidelines, including minimum requirements 52  for federal information systems, but such standards and guidelines shall not apply to national security systems without 53  the express approval of appropriate federal officials exercising policy authority over such systems. This guideline is 54  consistent with the requirements of the Office of Management and Budget (OMB) Circular A-130. 55  56  Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and binding 57  on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines be interpreted 58  as altering or superseding the existing authorities of the Secretary of Commerce, Director of the OMB, or any other 59  federal official.  This publication may be used by nongovernmental organizations on a voluntary basis and is not 60  subject to copyright in the United States. Attribution would, however, be appreciated by NIST. 61  NIST Technical Series Policies 62  Copyright, Fair Use, and Licensing Statements 63  NIST Technical Series Publication Identifier Syntax 64  Publication History 65  Approved by the NIST Editorial Review Board on YYYY-MM-DD [will be added in final published version] 66  How to Cite this NIST Technical Series Publication:  67  Barker EB, Kelsey JM, McKay KA, Roginsky AL, Sönmez Turan M (2022) Recommendation for Random Bit 68  Generator (RBG) Constructions. (National Institute of Standards and Technology, Gaithersburg, MD), NIST Special 69  Publication (SP) 800-90C 3pd. https://doi.org/10.6028/NIST.SP.800-90c.3pd 70  NIST Author ORCID iDs [will be added in final published version] 71  Author 1: 0000-0000-0000-0000 72  Author 2: 0000-0000-0000-0000 73  Author 3: 0000-0000-0000-0000 74  Author 4: 0000-0000-0000-0000 75  https://csrc.nist.gov/publications https://doi.org/10.6028/NIST-TECHPUBS.CROSSMARK-POLICY https://www.nist.gov/document/publication-identifier-syntax-nist-technical-series-publications  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  Public Comment Period 76  September 7, 2022 – December 7, 2022 77  Submit Comments 78  rbg_comments@nist.gov 79  80  National Institute of Standards and Technology 81  Attn: Computer Security Division, Information Technology Laboratory 82  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 83  All comments are subject to release under the Freedom of Information Act (FOIA). 84  mailto:rbg_comments@nist.gov  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  i  Reports on Computer Systems Technology 85  The Information Technology Laboratory (ITL) at the National Institute of Standards and 86  Technology (NIST) promotes the U.S. economy and public welfare by providing technical 87  leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test 88  methods, reference data, proof of concept implementations, and technical analyses to advance the 89  development and productive use of information technology. ITL’s responsibilities include the 90  development of management, administrative, technical, and physical standards and guidelines for 91  the cost-effective security and privacy of other than national security-related information in federal 92  information systems. The Special Publication 800-series reports on ITL’s research, guidelines, and 93  outreach efforts in information system security, and its collaborative activities with industry, 94  government, and academic organizations. 95  Abstract 96  The NIST Special Publication (SP) 800-90 series of documents supports the generation of high-97  quality random bits for cryptographic and non-cryptographic use. SP 800-90A specifies several 98  deterministic random bit generator (DRBG) mechanisms based on cryptographic algorithms. SP 99  800-90B provides guidance for the development and validation of entropy sources. This document 100  (SP 800-90C) specifies constructions for the implementation of random bit generators (RBGs) that 101  include DRBG mechanisms as specified in SP 800-90A and that use entropy sources as specified 102  in SP 800-90B. Constructions for three classes of RBGs (namely, RBG1, RBG2, and RBG3) are 103  specified in this document. 104  Keywords 105  deterministic random bit generator (DRBG); entropy; entropy source; random bit generator 106  (RBG); randomness source; RBG1 construction; RBG2 construction; RBG3 construction; 107  subordinate DRBG (sub-DRBG).  108  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  ii  Note to Reviewers  109  1. This draft of SP800-90C describes three RBG constructions. Note that in this draft, a non-110  deterministic random bit generator (NRBG) is presented as an RBG3 construction. 111  Question: In a future revision of SP 800-90C, should other constructions be included? 112  This version of SP 800-90C does not address the use of an RBG software implementation in 113  which a) a cryptographic library or an application is loaded into a system and b) the software 114  accesses entropy sources or RBGs already associated with the system for its required 115  randomness. NIST intends to address this situation in the near future. 116  2. The RBG constructions provided in this draft use NIST-approved cryptographic primitives 117  (such as block ciphers and hash functions) as underlying components. Note that non-vetted 118  conditioning components may be used within SP 800-90B entropy sources. 119  Although NIST still allows three-key TDEA as a block-cipher algorithm, Section 4 of [SP800-120  131A] indicates that its use is deprecated through 2023 and will be disallowed thereafter for 121  applying cryptographic protection. This document (i.e., SP 800-90C) does not approve the 122  use of three-key TDEA in an RBG. 123  Although SHA-1 is still approved by NIST, NIST is planning to remove SHA-1 from a future 124  revision of FIPS 180-4, so the SP 800-90 series will not be including the use of SHA-1. 125  The use of the SHA-3 hash functions are approved in SP 800-90C for Hash_DRBG and 126  HMAC_DRBG but are not currently included in [SP800-90A]. SP 800-90A will be revised to 127  exclude the use of TDEA and SHA-1 and include the use of the SHA-3 family of hash 128  functions. 129  3. Since the projected date for requiring a minimum security strength of 128 bits for U.S. 130  Government applications is 2030 (see [SP800-57Part1]), RBGs are only specified to provide 131  128, 192, and 256 bits of security strength (i.e., the 112-bit security strength has been 132  removed). Note that a consuming application may still request a lower security strength, but 133  the RBG output will be generated at the instantiated security strength. 134  4. Guidance is provided for accessing entropy sources and for obtaining full-entropy bits using 135  the output of an entropy source that does not inherently provide full-entropy output (see 136  Section 3.3). 137  5. SP 800-90A requires that when instantiating a CTR_DRBG without a derivation function, the 138  randomness source needs to provide full-entropy bits (see SP 800-90A). However, this draft 139  (SP 800-90C) relaxes this requirement in the case of an RBG1 construction, as specified in 140  Section 4. In this case, the external randomness source may be another RBG construction. An 141  addendum to SP 800-90A has been prepared as a temporary specification in SP 800-90C, but 142  SP 800-90A will be revised in the future to accommodate this change. 143  6. The DRBG used in RBG3 constructions supports a security strength of 256 bits. The RBG1 144  and RBG2 constructions may support any valid security strength (i.e., 128, 192 or 256 bits). 145  7. SP 800-90A currently allows the acquisition of a nonce (when required) for DRBG 146  instantiation from any randomness source. However, SP 800-90C does not include an explicit 147  requirement for the generation of a nonce when instantiating a DRBG. Instead, additional bits 148  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  iii  beyond those needed for the security strength are acquired from the randomness source. SP 149  800-90A will be revised to agree with this change. 150  8. SP 800-90C allows the use of both physical and non-physical entropy sources. See the 151  definitions of physical and non-physical entropy sources in Appendix E. Also, multiple 152  validated entropy sources may be used to provide entropy, and two methods are provided in 153  Section 2.3 for counting the entropy provided in a bitstring. 154  9. The CMVP is considering providing information on an entropy source validation certificate 155  that indicates whether an entropy source is physical or non-physical. 156  10. The CMVP is developing a program to validate entropy sources against SP 800-90B with the 157  intent of allowing the re-use of those entropy sources in different RBG implementations. 158  Question: Are there any issues that still need to be addressed in SP 800-90C to allow the re-159  use of validated entropy sources in different RBG implementations? Note that in many cases, 160  specific issues need to be addressed in the FIPS 140 implementation guide rather than in this 161  document.  162  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  iv  Call for Patent Claims  163  This public review includes a call for information on essential patent claims (claims whose use 164  would be required for compliance with the guidance or requirements in this Information 165  Technology Laboratory (ITL) draft publication). Such guidance and/or requirements may be 166  directly stated in this ITL Publication or by reference to another publication. This call also includes 167  disclosure, where known, of the existence of pending U.S. or foreign patent applications relating 168  to this ITL draft publication and of any relevant unexpired U.S. or foreign patents. 169  ITL may require from the patent holder, or a party authorized to make assurances on its behalf, in 170  written or electronic form, either: 171  a) assurance in the form of a general disclaimer to the effect that such party does not hold and 172  does not currently intend holding any essential patent claim(s); or 173  b) assurance that a license to such essential patent claim(s) will be made available to 174  applicants desiring to utilize the license for the purpose of complying with the guidance or 175  requirements in this ITL draft publication either: 176  i. under reasonable terms and conditions that are demonstrably free of any unfair 177  discrimination; or 178  ii. without compensation and under reasonable terms and conditions that are 179  demonstrably free of any unfair discrimination. 180  Such assurance shall indicate that the patent holder (or third party authorized to make assurances 181  on its behalf) will include in any documents transferring ownership of patents subject to the 182  assurance, provisions sufficient to ensure that the commitments in the assurance are binding on 183  the transferee, and that the transferee will similarly include appropriate provisions in the event of 184  future transfers with the goal of binding each successor-in-interest. 185  The assurance shall also indicate that it is intended to be binding on successors-in-interest 186  regardless of whether such provisions are included in the relevant transfer documents. 187  Such statements should be addressed to: rbg_comments@nist.gov  188  mailto:rbg_comments@nist.gov  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  v  Table of Contents 189  Introduction and Purpose .................................................................................................. 1 190  191  192  General Information ............................................................................................................ 3 193  194  195  196  197  2.4.1. DRBG Instantiations ................................................................................................... 6 198  2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise ............. 7 199  200  201  202  203  2.8.1. DRBG Functions ....................................................................................................... 13 204  2.8.2. Interfacing with Entropy Sources Using the GetEntropy and Get_ES_Bitstring 205  Functions............................................................................................................................... 16 206  2.8.3. Interfacing with an RBG3 Construction ..................................................................... 18 207  Accessing Entropy Source Output .................................................................................. 20 208  209  210  211  3.3.1. Conditioning Function Calls ...................................................................................... 22 212  3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings ................... 24 213  RBG1 Constructions Based on RBGs with Physical Entropy Sources ....................... 27 214  215  216  4.2.1. Instantiating the DRBG in the RBG1 Construction ................................................... 29 217  4.2.2. Requesting Pseudorandom Bits ............................................................................... 31 218  219  4.3.1. Instantiating a Sub-DRBG ......................................................................................... 33 220  4.3.2. Requesting Random Bits .......................................................................................... 33 221  222  4.4.1. RBG1 Requirements ................................................................................................. 33 223  4.4.2. Sub-DRBG Requirements ......................................................................................... 35 224  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  vi  RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources ....... 37 225  226  227  5.2.1. RBG2 Instantiation .................................................................................................... 38 228  5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction .................................. 40 229  5.2.3. Reseeding an RBG2 Construction ............................................................................ 40 230  231  RBG3 Constructions Based on Physical Entropy Sources .......................................... 43 232  233  234  6.2.1. Conceptual Interfaces ............................................................................................... 45 235  6.2.2. RBG3(XOR) Requirements ....................................................................................... 48 236  237  6.3.1. Conceptual Interfaces ............................................................................................... 49 238  6.3.2. Requirements for a RBG3(RS) Construction ............................................................ 53 239  Testing ............................................................................................................................... 54 240  241  7.1.1. Testing RBG Components ........................................................................................ 54 242  7.1.2. Handling Failures ...................................................................................................... 54 243  244  References ................................................................................................................................. 57 245  Appendix A. Entropy vs. Security Strength (Informative) .................................................. 59 246  247  248  249  250  Appendix B. RBG Examples (Informative) .......................................................................... 61 251  252  253  B.2.1. Instantiation of the RBG1 Construction ..................................................................... 63 254  B.2.2. Generation by the RBG1 Construction ..................................................................... 64 255  256  B.3.1. Instantiation of the Sub-DRBGs ................................................................................ 66 257  B.3.1.1. Instantiating Sub-DRBG1 .................................................................................. 66 258  B.3.1.2. Instantiating Sub-DRBG2 .................................................................................. 67 259  B.3.2. Pseudorandom Bit Generation by Sub-DRBGs ........................................................ 67 260  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  vii  261  B.4.1. Instantiation of an RBG2 Construction ...................................................................... 69 262  B.4.2. Generation in an RBG2 Construction ....................................................................... 69 263  B.4.3. Reseeding an RBG2 Construction ............................................................................ 70 264  265  B.5.1. Instantiation of an RBG3(XOR) Construction ........................................................... 71 266  B.5.2. Generation by an RBG3(XOR) Construction ............................................................ 72 267  B.5.2.1. Generation ......................................................................................................... 73 268  B.5.2.2. Get_conditioned_full-entropy_input Function .................................................... 74 269  B.5.3. Reseeding an RBG3(XOR) Construction .................................................................. 75 270  271  B.6.1. Instantiation of an RBG3(RS) Construction .............................................................. 77 272  B.6.2. Generation by an RBG3(RS) Construction ............................................................... 77 273  B.6.3. Generation by the Directly Accessible DRBG ........................................................... 77 274  B.6.4. Reseeding a DRBG .................................................................................................. 78 275  Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG ..... 79 276  277  278  279  C.3.1. Derivation Keys and Constants ................................................................................. 80 280  C.3.2. Derivation Function Using CMAC ............................................................................. 80 281  C.3.3. Derivation Function Using CBC-MAC ....................................................................... 80 282  Appendix D. List of Symbols, Abbreviations, and Acronyms ........................................... 82 283  Appendix E. Glossary ........................................................................................................... 84 284  List of Tables 285  Table 1. RBG Capabilities ............................................................................................................ 4 286  Table 2. Key Lengths for the Hash-based Conditioning Functions ............................................ 22 287  Table 3. Values for generating full-entropy bits by an RBG3(RS) Construction ......................... 50 288  289  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  viii  List of Figures 290  Fig. 1. DRBG Instantiations .......................................................................................................... 7 291  Fig. 2. Example of an RBG Security Boundary within a Cryptographic Module ........................... 9 292  Fig. 3. General Function Calls .................................................................................................... 13 293  Fig. 4. Instantiate_function ......................................................................................................... 14 294  Fig. 5. Generate_function ........................................................................................................... 15 295  Fig. 6. Reseed_function .............................................................................................................. 16 296  Fig. 7. GetEntropy function ......................................................................................................... 17 297  Fig. 8. Get_ES_Bitstring function ............................................................................................... 17 298  Fig. 9. RBG3 DRBG_Instantiate function ................................................................................... 18 299  Fig. 10. RBG3(XOR)_Generate function .................................................................................... 19 300  Fig. 11. RBG3(RS)_Generate function ....................................................................................... 19 301  Fig. 12. RBG1 Construction ........................................................................................................ 28 302  Fig. 13. Instantiation Using an RBG2(P) Construction as a Randomness Source ..................... 29 303  Fig. 14. Instantiation using an RBG3(XOR) or RBG3(RS) Construction as a Randomness 304  Source ........................................................................................................................... 30 305  Fig. 15. RBG1 Construction with Sub-DRBGs ........................................................................... 32 306  Fig. 16. RBG2 Construction ........................................................................................................ 37 307  Fig. 17. RBG3(XOR) Construction ............................................................................................. 45 308  Fig. 18. RBG3(RS) Construction ................................................................................................ 49 309  Fig. 19. DRBG Instantiations ...................................................................................................... 61 310  Fig. 20. RBG1 Construction Example ......................................................................................... 63 311  Fig. 21. Sub-DRBGs Based on an RBG1 Construction .............................................................. 65 312  Fig. 22. RBG2 Example .............................................................................................................. 68 313  Fig. 23. RBG3(XOR) Construction Example .............................................................................. 71 314  Fig. 24. RBG3(RS) Construction Example ................................................................................. 76 315  316  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  ix  Acknowledgments 317  The National Institute of Standards and Technology (NIST) gratefully acknowledges and 318  appreciates contributions from Chis Celi (NIST); Darryl Buller, Aaron Kaufer, and Mike Boyle 319  (National Security Agency); Werner Schindler, Matthias Peter, Johannes Mittman (Bundesamt für 320  Sicherheit in der Informationstechnik); and the members of the Cryptographic Module User Forum 321  (CMUF) for assistance in the development of this Recommendation. NIST also thanks the many 322  contributions by the public and private sectors. 323  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  1  Introduction and Purpose 324  Cryptography and security applications make extensive use of random bits. However, the 325  generation of random bits is challenging in many practical applications of cryptography. 326  The National Institute of Standards and Technology (NIST) developed the Special Publication 327  (SP) 800-90 series to support the generation of high-quality random bits for both cryptographic 328  and non-cryptographic purposes. The SP 800-90 series consists of three parts: 329  • SP 800-90A, Recommendation for Random Number Generation Using Deterministic 330  Random Bit Generators, specifies several approved deterministic random bit generator 331  (DRBG) mechanisms based on approved cryptographic algorithms that – once provided 332  with seed material that contains sufficient entropy – can be used to generate random bits 333  suitable for cryptographic applications. 334  • SP 800-90B, Recommendation for the Entropy Sources Used for Random Bit Generation, 335  provides guidance for the development and validation of entropy sources − mechanisms 336  that generate entropy from physical or non-physical noise sources and that can be used to 337  generate the input for the seed material needed by a DRBG or for input to an RBG. 338  • SP 800-90C, Recommendation for Random Bit Generator (RBG) Constructions, specifies 339  constructions for random bit generators (RBGs) using entropy sources that comply with 340  SP 800-90B and DRBGs that comply with SP 800-90A. Three classes of RBGs are 341  specified in this document (see Sections 5, 6, and 7). SP 800-90C also provides high-level 342  guidance for testing RBGs for conformance to this Recommendation. 343  The RBG constructions defined in this Recommendation consist of two main components: the 344  entropy sources that generate true random variables (variables that may be biased, i.e., each 345  possible outcome does not need to have the same chance of occurring) and the DRBGs that ensure 346  that the outputs of the RBG are indistinguishable from the ideal distribution to a computationally 347  bounded adversary. 348  Throughout this document, the phrase “this Recommendation” refers to the aggregate of SP 800-349  90A, SP 800-90B, and SP 800-90C, while the phrase “this document” refers only to SP 800-90C. 350  SP 800-90C has been developed in coordination with NIST’s Cryptographic Algorithm Validation 351  Program (CAVP) and Cryptographic Module Validation Program (CMVP). The document uses 352  “shall” and “must” to indicate requirements and uses “should” to indicate an important 353  recommendation. The term “shall” is used when a requirement is testable by a testing lab during 354  implementation validation using operational tests or a code review. The term “must” is used for 355  requirements that may not be testable by the CAVP or CMVP. An example of such a requirement 356  is one that demands certain actions and/or considerations from a system administrator. Meeting 357  these requirements can be verified by a CMVP review of the cryptographic module’s 358  documentation. If the requirement is determined to be testable at a later time (e.g., after SP 800-359  90C is published and before it is revised), the CMVP will so indicate in the Implementation 360  Guidance for FIPS 140, Security Requirements for Cryptographic Modules. 361  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  2  Audience  362  The intended audience for this Recommendation includes 1) developers who want to design and 363  implement RBGs that can be validated by NIST’s CMVP and CAVP, 2) testing labs that are 364  accredited to perform the validation tests and the evaluation of the RBG constructions, and 3) users 365  who install RBGs in systems. 366  Document Organization  367  This document is organized as follows: 368  • Section 2 provides background and preliminary information for understanding the 369  remainder of the document. 370  • Section 3 provides guidance on accessing and handling entropy sources, including the 371  external conditioning of entropy-source output. 372  • Sections 4, 5, and 6 specify the RBG constructions. 373  • Section 7 discusses health and implementation-validation testing. 374  • References contains a list of papers and publications cited in this document. 375  The following informational appendices are also provided: 376  • Appendix A provides discussions on entropy versus security strength. 377  • Appendix B provides examples of each RBG construction. 378  • Appendix C is an addendum to SP 800-90A that includes two additional derivation 379  functions that may be used with the CTR_DRBG. These functions will be moved into SP 380  800-90A as part of the next revision of that document. 381  • Appendix D provides a list of abbreviations, symbols, functions, and notations used in this 382  document.  383  • Appendix E provides a glossary with definitions for terms used in this document.  384  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  3  General Information 385  RBG Security 386  Ideal randomness sources generate identically distributed and independent uniform random bits 387  that provide full-entropy outputs (i.e., one bit of entropy per output bit). Real-world RBGs are 388  designed with a security goal of indistinguishability from the output of an ideal randomness source. 389  That is, given some limits on an adversary’s data and computing power, it is expected that there is 390  no adversary that can reliably distinguish between RBG outputs and outputs from an ideal 391  randomness source. 392  Consider an adversary that can perform 2w computations (typically, these are guesses of the RBG’s 393  internal state) and is given an output sequence from either an RBG with a security strength of s 394  bits (where s ≥ w) or an ideal randomness source. It is expected that an adversary has no better 395  probability of determining which source was used for its random bits than 396  1/2 + 2w−s−1 + ε, 397  where ε is negligible. In this Recommendation, the size of the output is limited to 264 output bits 398  and ε  ≤ 2−32. 399  An RBG that has been designed to support a security strength of s bits is suitable for any 400  application with a targeted security strength that does not exceed s. An RBG that is compliant with 401  this Recommendation can support requests for output with a security strength of 128, 192, or 256 402  bits, except for an RBG3 construction (as described in Section 6), which can provide full-entropy 403  output. 404  A bitstring with full entropy has an amount of entropy equal to its length. Full-entropy bitstrings 405  are important for cryptographic applications, as these bitstrings have ideal randomness properties 406  and may be used for any cryptographic purpose. They may be truncated to any length such that the 407  amount of entropy in the truncated bitstring is equal to its length. However, due to the difficulty 408  of generating and testing full-entropy bitstrings, this Recommendation assumes that a bitstring has 409  full entropy if the amount of entropy per bit is at least 1 − ε, where ε is at most 2−32. NISTIR 84271 410  provides a justification for the selection of ε. 411  RBG Constructions 412  A construction is a method of designing an RBG or some component of an RBG to accomplish a 413  specific goal. Three classes of RBG constructions are defined in this document: RBG1, RBG2, 414  and RBG3 (see Table 1). Each RBG includes a DRBG from [SP800-90A] and is based on the use 415  of a randomness source that is validated for compliance with [SP800-90B] or SP 800-90C. Once 416  instantiated, a DRBG can generate output at a security strength that does not exceed the DRBG’s 417  instantiated security strength. 418  1 See NISTIR 8427, Discussion on the Full Entropy Assumption of SP 800-90 series.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  4  Table 1. RBG Capabilities 419  Construction Internal  Entropy Source  Prediction  Resistance Full Entropy Type of  randomness source  RBG1 No No No Physical  RBG2 Yes Yesa No Physical or  Non-physical  RBG3 Yes Yesa Yes Physical  a If sufficient entropy is available or can be obtained when reseeding the RBG’s DRBG. 420  1. An RBG1 construction (see Section 4) does not have access to a randomness source after 421  instantiation. It is instantiated once in its lifetime over a secure channel from an external 422  RBG with appropriate security properties. An RBG1 construction does not support 423  reseeding and cannot provide prediction resistance as described in Section 2.4.2 and 424  [SP800-90A]. The construction can be used to initialize subordinate DRBGs. 425  2. An RBG2 construction (see Section 5) includes one or more entropy sources that are used 426  to instantiate and reseed the DRBG within the construction. This construction can provide 427  prediction resistance (see Section 2.4.2 and [SP800-90A]) when sufficient entropy is 428  available or can be obtained from the RBG’s entropy source(s) at the time that prediction 429  resistance is requested. The construction has two variants that depend on the type of 430  entropy source(s) employed (i.e., physical and non-physical). 431  3. An RBG3 construction is designed to provide output with a security strength equal to the 432  requested length of its output by producing outputs that have full entropy (i.e., an RBG 433  designed as an RBG3 construction can, in effect, support all security strengths) (see Section 434  2.1). This construction provides prediction resistance and has two types, namely 435  RBG3(XOR) and RBG3(RS). 436  a. An RBG3(XOR) construction (see Section 6.2) combines the output of one or more 437  validated entropy sources with the output of an instantiated, approved DRBG using an 438  exclusive-or (XOR) operation. 439  b. An RBG3(RS) construction (see Section 6.3) uses one or more validated entropy 440  sources to provide randomness input for the DRBG by continuously reseeding. 441  This document also provides constructions for 1) subordinate DRBGs (sub-DRBGs) that are 442  instantiated and possibly reseeded by an RBG1 construction (see Section 4.3) and 2) acquiring 443  entropy from an entropy source and conditioning the output to provide a bitstring with full entropy 444  (see Section 3.3). SP 800 90A provides constructions for instantiating and reseeding DRBGs and 445  requesting the generation of pseudorandom bitstrings. 446  All constructions in SP 800-90C are described in pseudocode. These pseudocode conventions are 447  not intended to constrain real-world implementations but to provide a consistent notation to 448  describe the constructions. By convention, unless otherwise specified, integers are unsigned 32-449  bit values, and when used as bitstrings, they are represented in the big-endian format. 450  Sources of Randomness for an RBG 451  The RBG constructions specified in this document are based on the use of validated entropy 452  sources. Some RBG constructions (e.g., the RBG3 construction) access these entropy sources 453  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  5  directly to obtain entropy. Other constructions (e.g., the RBG1 construction) fulfill their entropy 454  requirements by accessing another RBG as a randomness source. In this case, the source RBG may 455  include its own entropy source. 456  SP 800 90B provides guidance for the development and validation of entropy sources − 457  mechanisms that provide entropy for an RBG. Validated entropy sources (i.e., entropy sources that 458  have been successfully validated by the CMVP as complying with SP 800-90B) provide fixed-459  length outputs and have been validated as reliably providing a specified minimum amount of 460  entropy for each output (e.g., each eight-bit output has been validated as providing at least five bits 461  of entropy).2 462  An entropy source is a physical entropy source if the primary noise source of the entropy source 463  is physical – that is, it uses dedicated hardware to provide entropy (e.g., from ring oscillators, 464  thermal noise, shot noise, jitter, or metastability). Similarly, a validated entropy source is a non-465  physical entropy source if the primary noise source of the entropy source is non-physical – that is, 466  entropy is provided by system data (e.g., the entropy present in the RAM data or system time). 467  The entropy-source type is certified during SP 800-90B validation. 468  One or more validated entropy sources are used to provide entropy for instantiating and reseeding 469  the DRBGs in RBG2 or RBG3 constructions or used by an RBG3 construction to generate output 470  upon request by a consuming application. 471  An implementation could be designed to use a combination of physical and non-physical entropy 472  sources. When requests are made to the sources, bitstring outputs are concatenated until the amount 473  of entropy in the concatenated bitstring meets or exceeds the request. Two methods are provided 474  for counting the entropy provided in the concatenated bitstring. 475  Method 1: The RBG implementation includes one or more physical entropy sources, and one 476  or more non-physical entropy sources may also be included in the implementation. However, 477  only the entropy in a bitstring that is provided from physical entropy sources is counted toward 478  fulfilling the amount of entropy requested in an entropy request. Any entropy in a bitstring that 479  is provided by a non-physical entropy source is not counted, even if bitstrings produced by the 480  non-physical entropy source are included in the concatenated bitstring that is used by the RBG. 481  Method 2: The RBG implementation includes one or more non-physical entropy sources, and 482  one or more physical entropy sources may also be included in the implementation. The entropy 483  from both non-physical entropy sources and (if present) physical entropy sources is counted 484  when fulfilling an entropy request. 485  Example: Let pesi be the ith output of a physical entropy source, and npesi be the jh output of a 486  non-physical entropy source. If an implementation consists of one physical and one non-487  physical entropy source, and a request has been made for 128 bits of entropy, the concatenated 488  bitstring might be something like: 489  pes1 || pes2 || npes1 || pes3 || ... || npesm ||pesn, 490  which is the concatenated output of the physical and non-physical entropy sources. 491  2 Note that this document also discusses the use of non-validated entropy sources. When discussing such entropy sources, “non-validated” will  always precede “entropy sources.” The use of the term “validated entropy source” may be shortened to just “entropy source” to avoid repetition.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  6  According to Method 1, only the entropy in pes1, pes2, ..., pesn would be counted toward fulfilling 492  the 128-bit request. Any entropy in npes1, ... npesm is not counted. 493  According to Method 2, all of the entropy in pes1, pes2, ... pesn and in npes1, npes2, ..., npesm is 494  counted. Since the entropy from both non-physical and physical entropy sources is counted in 495  Method 2, the concatenated output string is expected to be shorter compared to that credited using 496  Method 1. 497  When multiple entropy sources are used, there is no requirement on the order in which the entropy 498  sources are accessed or the number of times that each entropy source is accessed to fulfill an 499  entropy request (e.g., if two physical entropy sources are used, it is possible that a request would 500  be fulfilled by only one of the entropy sources because entropy is not available at the time of the 501  request from the other entropy source). However, the Method 1 or Method 2 criteria for counting 502  entropy still applies. 503  This Recommendation assumes that the entropy produced by a validated physical entropy source 504  is generally more reliable than the entropy produced by a validated non-physical entropy source 505  since non-physical entropy sources are typically influenced by human actions or network events, 506  the unpredictability of which is difficult to accurately quantify. Therefore, Method 1 is considered 507  to provide more assurance that the concatenated bitstring actually contains at least the requested 508  amount of entropy (128 bits for the example). Note that RBG2(P) and RBG3 constructions only 509  count the entropy using Method 1 (see Sections 5 and 6). 510  DRBGs 511  Approved DRBG designs are specified in [SP800-90A]. A DRBG includes instantiate, generate, 512  and health-testing functions and may include reseed and uninstantiate functions. The instantiation 513  of a DRBG involves acquiring sufficient randomness to initialize the DRBG to support a targeted 514  security strength and establish the internal state, which includes the secret information for 515  operating the DRBG. The generate function produces output upon request and updates the internal 516  state. Health testing is used to determine that the DRBG continues to operate correctly. Reseeding 517  introduces fresh entropy into the DRBG’s internal state and is used to recover from a potential (or 518  actual) compromise (see Section 2.4.2 for additional discussion). An uninstantiate function is used 519  to terminate a DRBG instantiation and destroy the information in its internal state. 520  2.4.1. DRBG Instantiations  521  A DRBG implementation consists of software code, hardware, or both hardware and software that 522  is used to implement a DRBG design. The same implementation can be used to create multiple 523  “copies” of the same DRBG (e.g., for different purposes) without replicating the software code or 524  hardware. Each “copy” is a separate instantiation of the DRBG with its own internal state that is 525  accessed via a state handle that is unique to that instantiation (see Figure 1). Each instantiation 526  may be considered a different DRBG, even though it uses the same software code or hardware. 527  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  7  528  Fig. 1. DRBG Instantiations 529  Each DRBG instantiation is initialized with input from some randomness source that establishes 530  the security strengths that can be supported by the DRBG. During this process, an optional but 531  recommended personalization string may also be used to differentiate between instantiations in 532  addition to the output of the randomness source. The personalization string could, for example, 533  include information particular to the instantiation or contain entropy collected during system 534  activity (e.g., from a non-validated entropy source). An implementation should allow the use of a 535  personalization string. More information on personalization strings is provided in [SP800-90A]. 536  A DRBG may be implemented to accept further input during operation from the randomness 537  source (e.g., to reseed the DRBG) and/or additional input from inside or outside of the 538  cryptographic module that contains the DRBG. This additional input could, for example, include 539  information particular to a request for generation or reseeding or could contain entropy collected 540  during system activity (e.g., from a validated or non-validated entropy source).3 541  2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise 542  Under some circumstances, the internal state of an RBG (containing the RBG’s secret information) 543  could be leaked to an adversary. This would typically happen as the result of a side-channel attack 544  or tampering with a hardware device, and it may not be detectable by the RBG or any consuming 545  application. 546  All DRBGs in [SP800-90A] are designed with backtracking resistance − that is, learning the 547  DRBG’s current internal state does not provide knowledge of previous outputs. Since all RBGs in 548  SP 800-90C are based on the use of SP 800-90A DRBGs, they also inherit this property. However, 549  3 Entropy provided in additional input does not affect the instantiated security strength of the DRBG instantiation. However, it is good practice to  include any additional entropy when available to provide more security.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  8  once the secret information within the DRBG’s internal state is compromised, all future DRBG 550  outputs are known to the adversary unless the DRBG is reseeded − a process that returns the DRBG 551  to a non-compromised state. 552  A DRBG is reseeded when at least s bits of fresh entropy are used to update the internal state 553  (where s is the security strength of the DRBG) so that the updated internal state is unknown and 554  extremely unlikely to be correctly guessed. A DRBG that has been reseeded has prediction 555  resistance against an adversary who knows its previous internal state. Reseeding may be 556  performed upon request from a consuming application (either an explicit request for reseeding or 557  a request for the generation of bits with prediction resistance); on a fixed schedule based on time, 558  number of outputs, or events; or as sufficient entropy becomes available. 559  Although reseeding provides fresh entropy bits that are incorporated into an already instantiated 560  DRBG at a security strength of s bits, this Recommendation does not consider the reseed process 561  as increasing the DRBG’s security strength. For example, a reseed of a DRBG that has been 562  instantiated to support a security strength of 128 bits does not increase the DRBG’s security 563  strength to 256 bits when reseeding with 128 bits of fresh entropy. 564  An RBG1 construction has no access to a randomness source after instantiation and so cannot be 565  reseeded or recover from a compromise (see Section 4). Thus, it can never provide prediction 566  resistance. 567  An RBG2 construction contains an entropy source that is used to reseed the DRBG within the 568  construction (see Section 5) and recover from a possible compromise of the RBG’s internal state. 569  Prediction resistance may be requested by a consuming application during a request for the 570  generation of (pseudo) random bits. If sufficient entropy can be obtained from the entropy 571  source(s) at that time, the DRBG is reseeded before the requested bits are generated. If sufficient 572  entropy is not available, an error indication is returned, and no bits are generated for output. 573  Therefore, it is recommended that prediction resistance not be claimed for an RBG implementation 574  unless sufficient entropy is reliably available upon request. 575  An RBG3 construction is provided with fresh entropy for every RBG output (see Section 6). As a 576  result, every output from an RBG3 construction has prediction resistance. 577  For a more complete discussion of backtracking and prediction resistance, see [SP800-90A]. 578  RBG Security Boundaries 579  An RBG exists within a conceptual RBG security boundary that should be defined with respect to 580  one or more threat models that include an assessment of the applicability of an attack and the 581  potential harm caused by the attack. The RBG security boundary must be designed to assist in the 582  mitigation of these threats using physical or logical mechanisms or both. 583  The primary components of an RBG are a randomness source (i.e., an entropy source or an RBG 584  construction), a DRBG, and health tests for the RBG. RBG input (e.g., entropy bits and a 585  personalization string) shall enter an RBG only as specified in the functions described in Section 586  2.8. The security boundary of a DRBG is discussed in [SP800-90A]. The security boundary for an 587  entropy source is discussed in [SP800-90B]. Both the entropy source and the DRBG contain their 588  own health tests within their respective security boundaries. 589  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  9  Figure 2 shows an RBG implemented within a [FIPS 140]-validated cryptographic module. The 590  RBG security boundary shall either be the same as the cryptographic module boundary or be 591  completely contained within that boundary. The data input may be a personalization string or 592  additional input (see Section 2.4.1). The data output is status information and possibly random bits 593  or a state handle. Within the RBG security boundary of the figure are an entropy source and a 594  DRBG − each with its own (conceptual) security boundary. An entropy-source security boundary 595  includes a noise source, health tests, and (optionally) a conditioning component. A DRBG security 596  boundary contains the chosen DRBG, memory for the internal state, and health tests. An RBG 597  security boundary contains health tests and may also contain an (optional) external conditioning 598  function. The RBG2 and RBG3 constructions in Sections 5 and 6, respectively, use this model. 599  600  Fig. 2. Example of an RBG Security Boundary within a Cryptographic Module 601  Note that in the case of the RBG1 construction in Section 4, the security boundary containing the 602  DRBG does not include a randomness source (shown as an entropy source in Figure 2). 603  A cryptographic primitive (e.g., an approved hash function) used by an RBG may be used by 604  other applications within the same cryptographic module. However, these other applications shall 605  not modify or reveal the RBG’s output, intermediate values, or internal state. 606  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  10  Assumptions and Assertions 607  The RBG constructions in SP 800-90C are based on the use of validated entropy sources and the 608  following assumptions and assertions for properly functioning entropy sources: 609  1. An entropy source is independent of another entropy source if a) their security boundaries 610  do not overlap (e.g., they reside in separate cryptographic modules, or one is a physical 611  entropy source and the other is a non-physical entropy source), b) there are no common 612  noise sources,4 and c) statistical tests provide evidence of the independence of the entropy 613  sources. 614  2. The use of both validated and non-validated entropy sources is permitted in an 615  implementation, but only entropy sources that have been validated for compliance with 616  [SP800-90B] are used to provide the randomness input for seeding and reseeding a DRBG 617  or providing entropy for an RBG3 construction. 618  The following assumptions and assertions pertain to the use of validated entropy sources for 619  providing entropy bits: 620  3. For the purpose of analysis, it is assumed that a) the number of bits that are output by an 621  entropy source is never more than 264, and b) the number of output bits from the RBG is 622  never more than 264 bits for a DRBG instantiation. In the case of an RBG1 construction 623  with one or more subordinate DRBGs, the output limit applies to the total output provided 624  by the RBG1 construction and all of its subordinate DRBGs. 625  4. Each entropy-source output has a fixed length, ES_len (in bits). 626  5. Each entropy-source output is assumed to contain a fixed amount of entropy, denoted as 627  ES_entropy, that was assessed during entropy-source implementation validation. (See 628  [SP800-90B] for entropy estimation.) ES-entropy is assumed to be at least 0.1 bits per bit 629  of output. 630  6. Each entropy source has been characterized as either a physical entropy source or a non-631  physical entropy source upon successful validation. 632  7. The outputs from a single entropy source can be concatenated. The entropy of the resultant 633  bitstring is the sum of the entropy from each entropy-source output. For example, if m 634  outputs are concatenated, then the length of the bitstring is m × ES_len bits, and the entropy 635  for that bitstring is assumed to be m × ES_entropy bits. (This is a consequence of the model 636  of entropy used in [SP800-90B].) 637  8. The output of multiple independent entropy sources can be concatenated in an RBG. The 638  entropy in the resultant bitstring is the sum of the entropy in the output of each independent 639  entropy-source output that is considered to be contributing to the entropy in the bitstring 640  (see Methods 1 and 2 in Section 2.3). For example, suppose that the output from 641  independent physical entropy sources A and B and non-physical entropy source C are 642  concatenated. The length of the concatenated bitstring is the sum of the lengths of the 643  component bitstrings (i.e., ES_lenA + ES_lenB + ES_lenC). 644  4 They may, however, use the same type of noise source (e.g., both entropy sources could use ring oscillators but not the same ones).  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  11  • Using Method 1 in Section 2.3, the amount of entropy in the concatenated bitstring 645  is ES_entropyA + ES_entropyB. 646  • Using Method 2 in Section 2.3, the amount of entropy in the concatenated bitstring 647  is the sum of the entropies in the bitstrings (i.e., ES_entropyA + ES_entropyB + 648  ES_entropyC). 649  9. Under certain conditions, the output of one or more entropy sources can be externally 650  conditioned to provide full-entropy output. See Section 3.3.2 and Section 6.3.1 for the use 651  of this assumption and [NISTIR8427] for rationale. 652  Furthermore,  653  10. The amount of entropy in a subset bitstring that is “extracted” from the output block of an 654  approved hash function or block cipher is a proportion of the entropy in that block, such 655  that 656  𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = � 𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑒𝑒𝑒𝑒_𝑙𝑙𝑒𝑒𝑒𝑒 𝑒𝑒𝑠𝑠𝑒𝑒𝑒𝑒𝑠𝑠𝑒𝑒_𝑙𝑙𝑒𝑒𝑒𝑒�  𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑜𝑜𝑠𝑠𝑠𝑠𝑜𝑜𝑠𝑠𝑠𝑠_𝑠𝑠𝑏𝑏𝑜𝑜𝑏𝑏𝑏𝑏 657  where subset_len is the length of the subset bitstring, output_len is the length of the output 658  block, entropyoutput_block is the amount of entropy in the output block, and entropysubset is the 659  amount of entropy in the subset bitstring. 660  11. Full entropy bits can be extracted from the output block of a hash function or block cipher 661  when the amount of fresh entropy inserted into the algorithm exceeds the number of bits to 662  be extracted by at least 64 bits. For example, if output_len is the length of the output block, 663  all bits of the output block can be assumed to have full entropy if at least output_len + 64 664  bits of entropy are inserted into the algorithm. As another example, if a DRBG is reseeded 665  at its security strength s, (s − 64) bits with full entropy can be extracted from the DRBG’s 666  output block. 667  12. To instantiate a DRBG at a security strength of s bits, a bitstring of at least 3s/2 bits long 668  is needed from a randomness source for an RBG1 construction, and a bitstring with at least 669  3s/2 bits of entropy is needed from an entropy source for an RBG2 or RBG3 construction. 670  13. One or more of the constructions provided herein are used in the design of an RBG. 671  14. All components of an RBG2 and RBG3 construction (as specified in Sections 5 and 6) 672  reside within the physical boundary of a single [FIPS140]-validated cryptographic module. 673  15. The DRBGs specified in [SP800-90A] are assumed to meet their explicit security claims 674  (e.g., backtracking resistance, prediction resistance, claimed security strength, etc.). 675  The following assumptions and assertions have been made for the subordinate DRBGs (sub-676  DRBGs) that are seeded (i.e., initialized) using an RBG1 construction: 677  16. A sub-DRBG is considered to be part of the RBG1 construction that initializes it. 678  17. The assumptions and assertions in items 3, 10, and 14 (above) apply to sub-DRBGs. 679  General Implementation and Use Requirements and Recommendations 680  When implementing the RBGs specified in this Recommendation, an implementation: 681  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  12  1. Shall destroy intermediate values before exiting the function or routine in which they are 682  used,  683  2. Shall employ an “atomic” generate operation whereby a generate request is completed 684  before using any of the requested bits, 685  3. Should consider the threats posed by quantum computers in the future, and 686  4. Should be implemented with the capability to support a security strength of 256 bits or to 687  provide full-entropy output. 688  When using RBGs, the user or application requesting the generation of random or pseudorandom 689  bits should request only the number of bits required for a specific immediate purpose rather than 690  generating bits to be stored for future use. Since, in most cases, the bits are intended to be secret, 691  the stored bits (if not properly protected) are potentially vulnerable to exposure, thus defeating the 692  requirement for secrecy. 693  General Function Calls 694  Functions used within this document for accessing the DRBGs in [SP800-90A], the entropy 695  sources in [SP800-90B], and the RBG3 constructions specified in SP 800-90C are provided below. 696  Each function shall return a status code that shall be checked (e.g., a status of success or failure 697  by the function). 698  If the status code indicates a success, then additional information may also be returned, such as a 699  state handle from an instantiate function or the bits that were requested to be generated during a 700  generate function. 701  If the status code indicates a failure of an RBG component, then see Section 7.1.2 for error-702  handling guidance. Note that if the status code does not indicate a success, an invalid output (e.g., 703  a null bitstring) shall be returned with the status code if information other than the status code 704  could be returned. 705  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  13  706  Fig. 3. General Function Calls 707  2.8.1. DRBG Functions 708  SP 800-90A specifies several functions for use within a DRBG, indicating the input and output 709  parameters and other implementation details. Note that, in some cases, some input parameters may 710  be omitted, and some output information may not be returned. 711  At least two functions are required in a DRBG: 712  1. An instantiate function that seeds the DRBG using the output of a randomness source and 713  other input (see Section 2.8.1.1) and 714  2. A generate function that produces output for use by a consuming application (see Section 715  2.8.1.2). 716  A DRBG may also support a reseed function (see Section 2.8.1.3). A Get_randomness-717  source_input function is used in SP 800-90A to request output from a randomness source during 718  instantiation and reseeding (see Section 2.8.1.4). 719  The use of the Uninstantiate_function specified in SP 800-90A is not explicitly discussed in SP 720  800-90C but may be required by an implementation. 721  2.8.1.1. DRBG Instantiation 722  A DRBG shall be instantiated prior to the generation of pseudorandom bits at the highest security 723  strength to be supported by the DRBG instantiation using the following call: 724  (status, state_handle) = Instantiate_function(requested_instantiation_security_strength, 725  prediction_resistance_flag, personalization_string). 726  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  14  727  Fig. 4. Instantiate_function 728  The Instantiate_function (shown in Figure 4) is used to instantiate a DRBG at the 729  requested_instantiation_security_strength using the output of a randomness source5 and an 730  optional personalization_string to create seed material. A prediction_resistance flag may be used 731  to indicate whether subsequent Generate_function calls may request prediction resistance. As 732  stated in Section 2.4.1, a personalization_string is optional but strongly recommended. (Details 733  about the Instantiate_function are provided in [SP800-90A].) 734  If the returned status code for the Instantiate_function indicates a success (i.e., the DRBG has 735  been instantiated at the requested security strength), a state handle may6 be returned to indicate the 736  particular DRBG instance. When provided, the state handle will be used in subsequent calls to the 737  DRBG (e.g., during a Generate_function call) to identify the internal state information for the 738  instantiation. The information in the internal state includes the security strength of the instantiation, 739  the number of times that the instantiation has produced output, and other information that changes 740  during DRBG execution (see [SP800-90A] for each DRBG design). 741  When the DRBG has been instantiated at the requested_instantiation_security_strength, the 742  DRBG will operate at that security strength even if the requested_security_strength in subsequent 743  Generate_function calls (see Section 2.8.1.2) is less than the instantiated security strength. 744  If the status code indicates an error and an implementation is designed to return a state handle, an 745  invalid (e.g., Null) state handle shall be returned. 746  2.8.1.2. DRBG Generation Request 747  Pseudorandom bits are generated after DRBG instantiation using the following call: 748  (status, returned_bits) = Generate_function(state_handle, requested_number_of_bits, 749  requested_security_strength, prediction_resistance_request, additional_input). 750  5 The randomness source provides the randomness input required to instantiate the security strength of the DRBG.  6 In cases where only one instantiation of a DRBG will ever exist, a state handle need not be returned since only one internal state will be created.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  15  751  Fig. 5. Generate_function 752  The Generate_function (shown in Figure 5) requests that a DRBG generate a specified number 753  of bits. The request may indicate the DRBG instance to be used (using the state handle returned 754  by an Instantiate_function call; see Section 2.8.1.1), the number of bits to be returned, the security 755  strength that the DRBG needs to support for generating the bitstring, and whether or not prediction 756  resistance is to be obtained during this execution of the Generate_function. Optional additional 757  input may also be incorporated into the function call. As stated in Section 2.4.1, the ability to 758  handle and use additional input is recommended. 759  The Generate_function returns status information – either an indication of success or an error. If 760  the returned status code indicates a success, the requested number of bits is returned. 761  • If requested_number_of_bits is equal to or greater than the instantiated security strength, 762  the security strength that the returned_bits can support (if used as a key) is: 763  ss_key = the instantiated security strength, 764  where ss_key is the security strength of the key. 765  • If the requested_number of bits is less than the instantiated security strength, and the 766  returned_bits are to be used as a key, the key is capable of supporting a security strength 767  of: 768  ss_key = requested_number_of_bits. 769  If the status code indicates an error, the returned_bits shall consist of an invalid (e.g., Null) 770  bitstring that must not be used. Examples of conditions in which an error indication shall be 771  returned include the following: 772  • The requested_security_strength exceeds the instantiated security strength for the DRBG 773  (i.e., the security strength recorded in the DRBG’s internal state during instantiation). 774  • Prediction resistance has been requested but cannot be obtained at this time. 775  Details about the Generate_function are provided in Section 9.3 of [SP800-90A]. 776  2.8.1.3. DRBG Reseed Request 777  The reseeding of a DRBG instantiation is intended to insert additional entropy into that DRBG 778  instantiation (e.g., to recover from a possible compromise or to provide prediction resistance). This 779  is accomplished using the following call (note that this does not increase the security strength of 780  the DRBG): 781  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  16  status = Reseed_function(state_handle, additional_input). 782  783  Fig. 6. Reseed_function 784  A Reseed_function (shown in Figure 6) is used to acquire at least s bits of fresh entropy for the 785  DRBG instance indicated by the state handle (or the only instance if no state handle has been 786  provided), where s is the security strength of the DRBG.7 In addition to the randomness input 787  provided from the randomness source(s) during reseeding, optional additional input may be 788  incorporated into the reseed process. As discussed in Section 2.4.1, the capability for handling 789  and using additional input is recommended. (Details about the Reseed_function are provided in 790  [SP800-90A].) 791  An indication of the status is returned. 792  The Reseed_function is not permitted in an RBG1 construction (see Section 4) but is permitted 793  in the RBG2 and RBG3 constructions (see Sections 5 and 6, respectively). 794  2.8.1.4. The Get_randomness-source_input Call 795  A Get_randomness-source_input call is used in the Instantiate_function and Reseed_function 796  in [SP800-90A] to indicate when a randomness source (i.e., an entropy source or RBG) needs to 797  be accessed to obtain randomness input. Details are not provided in SP 800-90A about how the 798  Get_randomness-source_input call needs to be implemented. SP 800-90C provides guidance on 799  how the call should actually be implemented based on various situations. Sections 4, 5, and 6 800  provide instructions for obtaining input from a randomness source when the Get_randomness-801  source_input call is encountered in SP 800-90A.8 802  2.8.2. Interfacing with Entropy Sources Using the GetEntropy and 803  Get_ES_Bitstring Functions 804  2.8.2.1. The GetEntropy Call 805  An entropy source, as discussed in [SP800-90B], is a mechanism for producing bitstrings that 806  cannot be predicted and whose unpredictability can be quantified in terms of min-entropy. SP 800-807  90B uses the following call for accessing an entropy source: 808  (status, ES_output) = GetEntropy (bits_of_entropy), 809  7 The value of s is available in the DRBG’s internal state.  8 Note that, at this time, modifications to the Instantiate_function and Reseed_function specification in SP 800-90A and to the appropriate  algorithms in Section 10 of that document may be required to accommodate the specific requests for entropy for each RBG construction.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  17  where bits_of_entropy is the amount of entropy requested, ES_output is a bitstring containing the 810  requested amount of entropy, and status indicates whether or not the request has been satisfied. 811  See Figure 7. 812  813  Fig. 7. GetEntropy function 814  If the status indicates a success, a bitstring of at least bits_of_entropy long is returned as the 815  ES_output. ES_output must contain at least the requested amount of entropy indicated by the 816  bits_of_entropy input parameter. If the status does not indicate a success, an invalid ES_output 817  bitstring is returned (e.g., ES_output could be a null bitstring). 818  2.8.2.2. The Get_ES_Bitstring Function 819  A single GetEntropy call may not be sufficient to obtain the entropy required for seeding and 820  reseeding a DRBG and for providing input for the exclusive-or operation in an RBG3(XOR) 821  construction (see Section 6.2). Therefore, SP 800-90C uses a Get_ES_Bitstring function (see 822  Figure 8) to obtain the required entropy from one or more GetEntropy calls. The 823  Get_ES_Bitstring function is invoked as follows: 824  (status, entropy_bitstring) = Get_ES_Bitstring(bits_of_entropy), 825  where bits_of_entropy is the amount of entropy requested in the returned entropy_ bitstring, and 826  status indicates whether or not the request has been satisfied. 827  828  Fig. 8. Get_ES_Bitstring function 829  Note that if non-validated entropy sources are used (e.g., to provide entropy to be used as additional 830  input), they shall be accessed using a different function than is used to access validated entropy 831  sources (i.e., the Get_ES_Bitstring function). 832  If the returned status from the Get_ES_Bitstring function indicates a success, the requested 833  amount of entropy (i.e., indicated by bits_of_entropy) shall be returned in the entropy_bitstring, 834  whose length is equal to or greater than bits_of_entropy. If the status does not indicate a success, 835  an invalid entropy_bitstring shall be returned (e.g., entropy_bitstring is a null bitstring). 836  The Get_ES_Bitstring function will be used in this document to access validated entropy sources 837  to obtain one or more bitstrings with entropy using GetEntropy calls. 838  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  18  See Section 3.1 for additional discussion about the Get_ES_Bitstring function. 839  2.8.3. Interfacing with an RBG3 Construction 840  An RBG3 construction requires interface functions to instantiate its DRBG (see Section 2.8.3.1) 841  and to request the generation of full-entropy bits (see Section 2.8.3.2). 842  2.8.3.1. Instantiating a DRBG within an RBG3 Construction 843  The RBG3_DRBG_Instantiate function is used to instantiate the DRBG within the RBG3 844  construction using the following call: 845  (status, state_handle) = RBG3_DRBG_Instantiate(prediction_resistance_flag, 846  personalization_string). 847  848  Fig. 9. RBG3 DRBG_Instantiate function 849  The RBG3’s instantiate function (shown in Figure 9) will result in a call to the DRBG’s 850  Instantiate_function (provided in Section 2.8.1.1). An optional but recommended 851  personalization_string (see Section 2.4.1) may be provided as an input parameter. If included, the 852  personalization_string shall be passed to the DRBG that is instantiated in the 853  Instantiate_function request. See Sections 6.2.1.1 and 6.3.1.1 for more specificity. 854  If the returned status code indicates a success, a state handle may be returned to indicate the 855  particular DRBG instance that is to be used by the construction. Note that if multiple instances of 856  the DRBG are used, a separate state handle shall be returned for each instance. When provided, 857  the state handle shall be used in subsequent calls to that RBG (e.g., during a call to the generate 858  function) when multiple instances of the DRBG have been instantiated. If the status code indicates 859  an error (e.g., entropy is not currently available, or the entropy source has failed), an invalid (e.g., 860  Null) state handle shall be returned. 861  2.8.3.2. Generation Using an RBG3 Construction 862  The RBG3(XOR) and RBG3(RS) generate functions are different because of the difference in their 863  designs (see Sections 6.2.1.2 and 6.3.1.2). 864  For the RBG3(XOR) construction, the generate function is invoked using the following call: 865  (status, returned_bits) = RBG3(XOR)_Generate(state_handle, requested_number_of_bits, 866  prediction_resistance_request, additional_input). 867  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  19  868  Fig. 10. RBG3(XOR)_Generate function 869  For the RBG3(RS) construction, the generate function is invoked using the following call: 870  (status, returned_bits) = RBG3(RS)_Generate(state_handle, 871  requested_number_of_bits, additional_input). 872  873  Fig. 11. RBG3(RS)_Generate function 874  The RBG3(XOR)_Generate function (shown in Figure 10) includes a 875  prediction_resistance_request parameter to request a reseed of the RBG3(XOR)’s DRBG 876  instantiation, when desired. This parameter is not included as a parameter for the 877  RBG3(RS)_Generate function (shown in Figure 11) since this design always reseeds itself during 878  execution. 879  The generate functions result in calls to the entropy sources and the DRBG instantiation used by 880  the RBG3 construction. This call accesses the DRBG using the Generate_function call provided 881  in Section 2.8.1.2. The input parameters to the two generate functions are used when calling the 882  DRBG instantiation used by that RBG3 construction. 883  If the returned status code indicates a success, a bitstring that contains the newly generated bits is 884  returned. The RBG then uses the resulting bitstring as specified for each RBG3 construction (see 885  Section 6). 886  If the status code indicates an error (e.g., the entropy source has failed), an invalid (e.g., Null) 887  bitstring shall be returned as the returned_bits.  888  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  20  Accessing Entropy Source Output 889  The security provided by an RBG is based on the use of validated entropy sources. Section 3.1 890  discusses the use of the Get_ES_Bitstring function to request entropy from one or more entropy 891  sources. Section 3.2 discusses the behavior required by an entropy source. Section 3.3 discusses 892  the conditioning of the output of one or more entropy sources to obtain a bitstring with full entropy 893  before further use by an RBG. 894  The Get_ES_Bitstring Function 895  The Get_ES_Bitstring function specified in Section 2.8.2.2 is used within an RBG to obtain 896  entropy from one or more validated entropy sources using one or more GetEntropy calls (see 897  Sections 2.8.2.1 and 3.2) in whatever manner is required (e.g., by polling the entropy sources or 898  by extracting bits containing entropy from a pool of collected bits). The Get_ES_Bitstring 899  function shall only be used to access validated entropy sources to obtain the entropy for seeding 900  and reseeding a DRBG and for providing input for the exclusive-or operation of an RBG3(XOR) 901  construction (see Section 6.2). 902  In many cases, the Get_ES_Bitstring function will need to query an entropy source (or a set of 903  entropy sources) multiple times to obtain the amount of entropy requested. For the most part, the 904  construction of the Get_ES_Bitstring function itself is not specified in this document but is left 905  to the developer to implement appropriately for the selected entropy sources. 906  The behavior of the Get_ES_Bitstring function shall be as follows: 907  1. A Get_ES_Bitstring function shall only be used to access one or more validated entropy 908  sources. 909  2. The entropy bitstrings produced from multiple entropy-source calls to a single validated 910  entropy source or by calls to multiple validated entropy sources shall be concatenated into 911  a single bitstring. The entropy in the bitstring is computed as the sum of the entropy 912  produced by each call to a validated entropy source that is to be counted as contributing 913  entropy to the bitstring (see Section 2.3).9 914  3. If a failure is reported during an invocation of the Get_ES_Bitstring function by any 915  physical or non-physical entropy source whose entropy is counted toward fulfilling an 916  entropy request, the failure shall be handled as discussed in Section 7.1.2. 917  4. If a non-physical entropy source whose entropy is not counted reports a failure, the failure 918  shall be reported to the RBG or the consuming application. 919  5. The Get_ES_Bitstring function shall not return an entropy_bitstring unless the bitstring 920  contains sufficient entropy to fulfill the entropy request. The returned status shall indicate 921  a success only when this condition is met. 922  9 For Method 1 in Section 3.3, only entropy contributed by one or more validated physical entropy sources is counted. For Method 2, the entropy  from all validated entropy sources is counted.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  21  Entropy Source Requirements 923  This Recommendation requires the use of one or more validated entropy sources to provide 924  entropy for seeding and reseeding a DRBG and for input to the XOR operation in the RBG3(XOR) 925  construction specified in Section 6.2. In addition to the assumptions and assertions concerning 926  entropy sources in Section 2.6, the following conditions shall be met when using these entropy 927  sources: 928  1. Only validated entropy sources shall be used to provide the entropy bitstring for seeding 929  and reseeding a DRBG and for providing input to the XOR operation in the RBG3(XOR) 930  construction. 931  Non-validated entropy sources may be used by an RBG to provide input for personalization 932  strings and/or the additional input in DRBG function calls (see Section 2.4.1). 933  2. Each validated entropy source shall be independent of all other validated or non-validated 934  entropy sources used by the RBG. 935  3. The outputs from an entropy source shall not be reused (e.g., the value in the entropy 936  source is erased after being output). 937  4. When queried for entropy, the validated entropy sources must respond as follows: 938  a. The requested output must be returned only if the returned status indicates a 939  success. In this case, the ES-output bitstring must contain the requested amount of 940  entropy. (Note that the ES-output bitstring may be longer than the amount of 941  entropy requested, i.e., the bitstring may not have full entropy.) 942  b. If an indication of a failure is returned by a validated entropy source as the status, 943  an invalid (e.g., Null) bitstring shall be returned as ES_output. 944  5. If the validated entropy-source components operate continuously regardless of whether 945  requests are received and a failure is determined, the entropy source shall immediately 946  report the failure to the RBG (see Section 7.1.2). 947  6. If a validated entropy source reports a failure (e.g., because of a failed health test), the 948  entropy source shall not produce output (except possibly for a failure status indication) 949  until the failure is corrected. The entropy source shall immediately report the failure to the 950  Get_ES_Bitstring function (see Section 3.1). If multiple validated entropy sources are 951  used, the report shall identify the entropy source that reported the failure. 952  7. A detected failure of any entropy source shall cause the RBG to report the failure to the 953  consuming application and terminate the RBG operation. The RBG must not be returned 954  to normal operation until the conditions that caused the failure have been corrected and 955  tested for successful operation. 956  External Conditioning to Obtain Full-Entropy Bitstrings 957  An RBG3(XOR) construction (see Section 6.2) and a CTR_DRBG without a derivation function 958  in an RBG2 or RBG3 construction (see Sections 5 and 6) require bitstrings with full entropy from 959  an entropy source. If the validated entropy source does not provide full-entropy output, a method 960  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  22  for conditioning the output to obtain a bitstring with full entropy is needed. Since this conditioning 961  is performed outside an entropy source, the output is said to be externally conditioned. 962  When external conditioning is performed, the vetted conditioning function listed in [SP800-90B] 963  shall be used. 964  3.3.1. Conditioning Function Calls 965  The conditioning functions operate on bitstrings obtained from one or more calls to the entropy 966  source(s). 967  The following format is used in Section 3.3.2 for a conditioning-function call: 968  conditioned_output = Conditioning_function(input_parameters), 969  where the input_parameters for the selected conditioning function are discussed in Sections 3.3.1.2 970  and 3.3.1.3, and conditioned_output is the output returned by the conditioning function. 971  3.3.1.1. Keys Used in External Conditioning Functions 972  The HMAC, CMAC, and CBC-MAC vetted conditioning functions require the input of a Key of 973  a specific length (keylen). Unlike other cryptographic applications, keys used in these external 974  conditioning functions do not require secrecy to accomplish their purpose so may be hard-coded, 975  fixed, or all zeros. 976  For the CMAC and CBC-MAC conditioning functions, the length of the key shall be an 977  approved key length for the block cipher used (e.g., keylen = 128, 192, or 256 bits for AES). 978  For the HMAC conditioning function, the length of the key shall be equal to the length of the hash 979  function’s output block (i.e., output_len). 980  Table 2. Key Lengths for the Hash-based Conditioning Functions 981  Hash Function Length of the output block  (output_len) and key (keylen)  SHA-224, SHA-512/224, SHA3-224 224  SHA-256, SHA-512/256, SHA3-256 256  SHA-384, SHA3-384 384  SHA-512, SHA3-512 512  Using random keys may provide some additional security in case the input is more predictable 982  than expected. Thus, these keys should be chosen randomly in some way (e.g., by drawing bits 983  directly from the entropy source and inserting them into the key or by providing entropy-source 984  bits to a conditioning function with a fixed key to derive the new key). Note that any entropy used 985  to randomize the key shall not be used for any other purpose (e.g., as input to the conditioning 986  function). 987  3.3.1.2. Hash Function-based Conditioning Functions 988  Conditioning functions may be based on approved hash functions. 989  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  23  One of the following calls shall be used for external conditioning when the conditioning function 990  is based on a hash function: 991  1. Using an approved hash function directly: 992  conditioned_output = Hash(entropy_bitstring), 993  where the hash function operates on the entropy_bitstring provided as input. 994  2. Using HMAC with an approved hash function: 995  conditioned_output = HMAC(Key, entropy_bitstring), 996  where HMAC operates on the entropy_bitstring using a Key determined as specified in 997  Section 3.3.1.1. 998  3. Using Hash_df as specified in SP 800-90A: 999  conditioned_output = Hash_df(entropy_bitstring, output_len),  1000  where the derivation function operates on the entropy_bitstring provided as input to 1001  produce a bitstring of output_len bits. 1002  In all three cases, the length of the conditioned output is equal to the length of the output block of 1003  the selected hash function (i.e., output_len). 1004  3.3.1.3. Block Cipher-based Conditioning Functions 1005  Conditioning functions may be based on approved block ciphers.10 TDEA shall not be used as 1006  the block cipher (see Section 2.6). 1007  For block cipher-based conditioning functions, one of the following calls shall be used for external 1008  conditioning: 1009  1. Using CMAC (as specified in [SP800-38B]) with an approved block cipher: 1010  conditioned_output = CMAC(Key, entropy_bitstring), 1011  where CMAC operates on the entropy_bitstring using a Key determined as specified in 1012  Section 3.3.1.1. 1013  2. Using CBC-MAC (specified in Appendix F of [SP800-90B]) with an approved block 1014  cipher: 1015  conditioned_output = CBC-MAC(Key, entropy_bitstring), 1016  where CBC-MAC operates on the entropy_bitstring using a Key determined as specified 1017  in Section 3.3.1.1. 1018  10 At the time of publication, only AES-128, AES-192, and AES-256 were approved as block ciphers for the  conditioning functions (see SP 800-90B). In all three cases, the block length is 128 bits.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  24  CBC-MAC shall only be used as an external conditioning function under the following 1019  conditions: 1020  a. The length of the input is an integer multiple of the block size of the block cipher 1021  (e.g., a multiple of 128 bits for AES) − no padding is done by CBC-MAC itself.11 1022  b. All inputs to CBC-MAC in the same RBG shall have the same length. 1023  c. If the CBC-MAC conditioning function is used to obtain full entropy from an 1024  entropy source for CTR_DRBG instantiation or reseeding: 1025   A personalization string shall not be used during instantiation. 1026   Additional input shall not be used during the reseeding of the 1027  CTR_DRBG but may be used during the generate process. 1028  CBC-MAC is not approved for any use other than in an RBG (see [SP800-90B]). 1029  3. Using the Block_cipher_df as specified in [SP800-90A] with an approved block cipher: 1030  conditioned_output = Block_cipher_df(entropy_bitstring, block_length), 1031  where Block_cipher_df operates on the entropy_bitstring using a key specified within the 1032  function, and the block_length is 128 bits for AES. 1033  In all three cases, the length of the conditioned output is equal to the length of the output block 1034  (i.e., 128 bits for AES). If the requested amount of entropy is requested for subsequent use by an 1035  RBG,12 then multiple iterations of the conditioning function may be required, each using a different 1036  entropy_bitstring. 1037  3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings 1038  This construction will produce a bitstring with full entropy using one of the conditioning functions 1039  identified in Section 3.3.1.1 for an RBG2 or RBG3 construction whenever a bitstring with full 1040  entropy is required (e.g., to seed or reseed a CTR_DRBG with no derivation function or to provide 1041  full entropy for the RBG3(XOR) construction). This process is unnecessary if the entropy source 1042  provides full-entropy output. 1043  Let output_len be the length of the output block of the vetted conditioning function to be used; 1044  output_len is the length of the hash function’s output block when a hash-based conditioning 1045  function is used (see Section 3.3.1.2); output_len = 128 when an AES-based conditioning function 1046  is used (see Section 3.3.1.3). 1047  The approach used by this construction is to acquire sufficient entropy from the entropy source to 1048  produce output_len bits with full entropy in the conditioning function’s output block, where 1049  output_len is the length of the output block. The amount of entropy required for each use of the 1050  conditioning function is output_len + 64 bits (see item 11 of Section 2.6). This process is repeated 1051  until the requested number of full-entropy bits have been produced. 1052  11 Any padding required could be done before submitting the entropy_bitstring to the CBC-MAC function.  12 Since the output block of AES is only 128 bits, this will often be the case when seeding or reseeding a DRBG.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  25  The Get_conditioned_full_entropy_ input function below obtains entropy from one or more 1053  entropy sources using the Get_ES_Bitstring function discussed in Section 3.1 and conditions it 1054  to provide an n-bit string with full entropy. 1055  Get_conditioned_full_entropy_input: 1056  Input: integer n. Comment: the requested number of full-entropy bits. 1057  Output: integer status, bitstring returned_bitstring. 1058  Process: 1059  1. temp = the Null string. 1060  2. ctr = 0. 1061  3. While ctr < n, do 1062  3.1  (status, entropy_bitstring) = Get_ES_Bitstring(output_len + 64). 1063  3.2 If (status ≠ SUCCESS), then return (status, invalid_bitstring). 1064  3.3 conditioned_output = Conditioning_function(input_parameters). 1065  3.4 temp = temp || conditioned_output. 1066  3.5 ctr = ctr + output_len. 1067  4. returned_bitstring = leftmost(temp, n). 1068  5. Return (SUCCESS, returned_bitstring). 1069  Steps 1 and 2 initialize the temporary bitstring (temp) for storing the full-entropy bitstring being 1070  assembled and the counter (ctr) that counts the number of full-entropy bits produced for each 1071  iteration of step 3. 1072  Step 3 obtains and processes the entropy for each iteration. 1073  • Step 3.1 requests output_len + 64 bits from the validated entropy sources. When the output 1074  of multiple entropy sources is used, the entropy counted for fulfilling the request for outlen 1075  + 64 bits is determined using Method 1 or Method 2 as specified in Section 2.3 in the 1076  following situations: 1077  Method 1 shall be used when: 1078  Instantiating and reseeding an RBG2(P) construction containing a CTR_DRBG with no 1079  derivation function (see Section 5.2.1, item 1b, and Section 5.2.3), 1080  Instantiating and reseeding a CTR_DRBG with no derivation function that is used within 1081  an RBG3 construction (see Section 6.1, requirement 1), or 1082  Generating bits in an RBG3(XOR) construction (see Section 6.2.1.2, step 1). 1083  Method 2 shall be used when instantiating and reseeding an RBG2(NP) construction 1084  containing a CTR_DRBG with no derivation function (see Section 5.2.1, item 1b, and 1085  Section 5.2.3). 1086  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  26  • Step 3.2 checks whether or not the status returned in step 3.1 indicated a success. If the 1087  status did not indicate a success, the status is returned along with an invalid bitstring as the 1088  returned_bitstring (e.g., invalid_bitstring is Null). 1089  • Step 3.3 invokes the conditioning function for processing the entropy_bitstring obtained 1090  from step 3.1. The input_parameters for the selected Conditioning_function are specified 1091  in Sections 3.3.1.2 or 3.3.1.3, depending on the conditioning function used. 1092  • Step 3.4 concatenates the conditioned_output received in step 3.3 to the temporary bitstring 1093  (temp), and step 3.5 increments the counter for the number of full-entropy bits that have 1094  been produced so far. 1095  • If at least n full-entropy bits have not been produced, repeat the process starting at step 3.1. 1096  • Step 4 truncates the full-entropy bitstring to n bits. 1097  • Step 5 returns an n-bit full-entropy bitstring as the returned_bitstring.  1098  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  27  RBG1 Constructions Based on RBGs with Physical Entropy Sources 1099  An RBG1 construction provides a source of cryptographic random bits from a device that has no 1100  internal randomness source. Its security depends entirely on being instantiated securely from an 1101  RBG with access to a physical entropy source that resides outside of the device. 1102  An RBG1 construction is instantiated (i.e., seeded) only once before its first use by an RBG2(P) 1103  construction (see Section 5) or an RBG3 construction (see Section 6). Since a randomness source 1104  is not available after DRBG instantiation, an RBG1 construction cannot be reseeded and, therefore, 1105  cannot provide prediction resistance. 1106  An RBG1 construction may be useful for constrained devices in which an entropy source cannot 1107  be implemented or in any device in which access to a suitable source of randomness is not available 1108  after instantiation. Since an RBG1 construction cannot be reseeded, the use of the DRBG is limited 1109  to the DRBG’s seedlife (see [SP800-90A]). 1110  Subordinate DRBGs (sub-DRBGs) may be used within the security boundary of an RBG1 1111  construction (see Section 4.3). The use of one or more sub-DRBGs may be useful for 1112  implementations that use flash memory, such as when the number of write operations to the 1113  memory is limited (resulting in short device lifetimes) or when there is a need to use different 1114  DRBG instantiations for different purposes. The RBG1 construction is the source of the 1115  randomness that is used to (optionally) instantiate one or more sub-DRBGs. Each sub-DRBG is a 1116  DRBG specified in SP 800-90A and is intended to be used for a limited time and a limited purpose. 1117  A sub-DRBG is, in fact, a different instantiation of the DRBG design implemented within the 1118  RBG1 construction (see Section 2.4.1). 1119  RBG1 Description 1120  As shown in Figure 12, an RBG1 construction consists of a DRBG contained within a DRBG 1121  security boundary in one cryptographic module and an RBG (serving as a randomness source) 1122  contained within a separate cryptographic module from that of the RBG1 construction. Note that 1123  the required health tests are not shown in the figure. 1124  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  28  1125  Fig. 12. RBG1 Construction 1126  The RBG for instantiating the DRBG within the RBG1 construction must be either an RBG2(P) 1127  construction that has support for prediction resistance requests ( see Section 5) or an RBG3 1128  construction (see Section 6). A physically secure channel between the randomness source and the 1129  DRBG is used to securely transport the randomness input required for the instantiation of the 1130  DRBG. An optional recommended personalization string and optional additional input may be 1131  provided from within the DRBG’s cryptographic module or from outside of that module (see 1132  Section 2.4.1). 1133  An external conditioning function is not needed for this design because the output of the RBG has 1134  already been cryptographically processed. 1135  The output from an RBG1 construction may be used within the cryptographic module (e.g., to seed 1136  a sub-DRBG as specified in Section 4.3) or by an application outside of the RBG1 security 1137  boundary. 1138  The security strength provided by the RBG1 construction is the minimum of the security strengths 1139  provided by the DRBG within the construction, the secure channel, and the RBG used to seed the 1140  DRBG. 1141  Examples of RBG1 and sub-DRBG constructions are provided in Appendices B.2 and B.3, 1142  respectively. 1143  Conceptual Interfaces 1144  Interfaces to the DRBG within an RBG1 construction include function calls for instantiating the 1145  DRBG and generating pseudorandom bits upon request (see Sections 4.2.1 and 4.2.2). 1146  Note that reseeding is not included in this construction. 1147  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  29  4.2.1. Instantiating the DRBG in the RBG1 Construction 1148  The DRBG within the RBG1 construction may be instantiated at any security strength possible for 1149  the DRBG design using the Instantiate_function discussed in Section 2.8.1.1 and [SP800-90A], 1150  subject to the maximum security strength that is supported by the RBG used as the randomness 1151  source. 1152  (status, RBG1_state_handle) =  1153  Instantiate_function (s, prediction_resistance_flag = FALSE, personalization_string), 1154  where s is the requested security strength for the DRBG in the RBG1 construction. If used, the 1155  prediction_resistance_flag is set to FALSE since the DRBG cannot be reseeded to provide 1156  prediction resistance. 1157  An external RBG (i.e., the randomness source) shall be used to obtain the bitstring necessary for 1158  establishing the DRBG’s s-bit security strength. 1159  In SP 800-90A, the Instantiate_function specifies the use of a Get_randomness-source_input 1160  call to obtain randomness input from the randomness source for instantiation (see Section 2.8.1.4 1161  in this document and in [SP800-90A]). For an RBG1 construction, an approved external RBG2(P) 1162  or RBG3 construction must be used as the randomness source (see Sections 5 and 6, respectively). 1163  If the randomness source is an RBG2(P) construction (see Figure 13), the Get_randomness-1164  source_input call in the Instantiate_function shall be replaced by a Generate_function call to 1165  the RBG2(P) construction (in whatever manner is required) (see Sections 2.8.1.2 and 5.2.2). The 1166  RBG2(P) construction must be reseeded using its internal entropy source(s) before generating bits 1167  to be provided to the RBG1 construction. This is accomplished by setting the 1168  prediction_resistance_request parameter in the Generate_function call to TRUE (see steps 1a 1169  and 2a below). 1170  1171  Fig. 13. Instantiation Using an RBG2(P) Construction as a Randomness Source 1172  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  30  If the randomness source is an RBG3 construction (as shown in Figure 14), the Get_randomness-1173  source_input call shall be replaced by the appropriate RBG3 generate function (see Sections 1174  2.8.3.2, 6.2.1.2, and 6.3.1.2 and steps 1b, 1c, 2b, and 2c below). 1175  1176  Fig. 14. Instantiation using an RBG3(XOR) or RBG3(RS) Construction as a Randomness Source 1177  Let s be the security strength to be instantiated. The DRBG within an RBG1 construction is 1178  instantiated as follows: 1179  1. When an RBG1 construction is instantiating a CTR_DRBG without a derivation function, 1180  s + 128 bits13 shall be obtained from the randomness source as follows: 1181  If the randomness source is an RBG2(P) construction (see Figure 13), the 1182  Get_randomness-source_input call is replaced by: 1183  (status, randomness-source_input) = Generate_function(RBG2_state_handle, s + 1184  128, s, prediction_resistance_request = TRUE, additional_input). 1185  Note that the DRBG within the RBG2(P) construction must be reseeded before 1186  generating output.14 This may be accomplished by requesting prediction resistance 1187  (i.e., setting prediction_resistance_request = TRUE). See Requirement 17 in Section 1188  4.4.1. 1189  13 For AES, the block length is 128 bits, and the key length is equal to the security strength s. SP 800-90A requires the randomness input from the  randomness source to be key length + block length bits when a derivation function is not used.  14 See Requirement 11 in Section 5.4.1.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  31  If the randomness source is an RBG3(XOR) construction (see Figure 14), the 1190  Get_randomness-source_input call is replaced by: 1191  (status, randomness-source_input) = RBG3(XOR)_Generate(RBG3_state_handle, s 1192  + 128, prediction_resistance_request, additional_input). 1193  A request for prediction resistance from the DRBG used by the RBG3(XOR) 1194  construction is optional. 1195  c) If the randomness source is an RBG3(RS) construction (see Figure 14), the 1196  Get_randomness-source_input call is replaced by: 1197  (status, randomness-source_input) = RBG3(RS)_Generate(RBG3_state_handle, 1198  3s/2, additional_input). 1199  2. When an RBG1 construction is instantiating any other DRBG (including a CTR_DRBG 1200  with a derivation function), 3s/2 bits shall be obtained from a randomness source that 1201  provides a security strength of at least s bits. 1202  a) If the randomness source is an RBG2(P) construction (see Figure 13), the 1203  Get_randomness-source_input call is replaced by: 1204  (status, randomness-source_input) = Generate_function(RGB2_state_handle, 3s/2, 1205  s, prediction_resistance_request = TRUE, additional_input). 1206  Note that the DRBG within the RBG2(P) construction must be reseeded before 1207  generating output. This is accomplished by requesting prediction resistance (i.e., by 1208  setting prediction_resistance_request = TRUE). See Requirement 17 in Section 4.4. 1209  b) If the randomness source is an RBG3(XOR) construction (see Figure 14), the 1210  Get_randomness-source_input call is replaced by: 1211  (status, randomness-source_input) = RBG3(XOR)_Generate(RBG3_state_handle, 1212  3s/2, prediction_resistance_request, additional_input). 1213  A request for prediction resistance from the DRBG used by the RBG3(XOR) 1214  construction is optional. 1215  c) If the randomness source is an RBG3(RS) construction (see Figure 14), the 1216  Get_randomness_-sourceinput call is replaced by: 1217  (status, randomness-source_input) = RBG3(RS)_Generate(RBG3_state_handle, 1218  3s/2, additional_input). 1219  4.2.2. Requesting Pseudorandom Bits 1220  Pseudorandom bits from the RBG1 construction shall be requested using the following call: 1221  (status, returned_bits) = Generate_function(RBG1_state_handle, 1222  requested_number_of_bits, s, prediction_resistance_request = FALSE, additional_input). 1223  The prediction_resistance_request is set to FALSE or the parameter may be omitted since a 1224  reseeding capability is not included in an RBG1 construction. 1225  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  32  Using an RBG1 Construction with Subordinate DRBGs (Sub-DRBGs) 1226  Figure 15 depicts an example of the use of optional subordinate DRBGs (sub-DRBGs) within the 1227  security boundary of an RBG1 construction. The RBG1 construction is used as the randomness 1228  source to provide separate outputs to instantiate each of its sub_DRBGs. 1229  1230  Fig. 15. RBG1 Construction with Sub-DRBGs 1231  The RBG1 construction and each of its sub-DRBGs shall be implemented as separate physical or 1232  logical entities (see Figure 15). 1233  • When implemented as separate physical entities, the DRBG algorithms used by the RBG1 1234  construction and a sub-DRBG shall be the same DRBG algorithm (e.g., the RBG1 1235  construction and all of its sub_DRBGs use HMAC_DRBG and SHA-256). 1236  • When implemented as separate logical entities, the same software or hardware 1237  implementation of a DRBG algorithm is used but with a different internal state for each 1238  logical entity (e.g., the RBG1 construction has an internal state whose state handle is 1239  RBG1_state_handle, while the state handle for Sub-DRBG 1’s internal state is sub-1240  DRBG1_state_handle). 1241  The sub-DRBGs have the following characteristics: 1242  1. A sub-DRBG cannot be reseeded or provide prediction resistance. 1243  2. Sub-DRBG outputs are considered outputs from the RBG1 construction. 1244  3. The security strength that can be provided by a sub-DRBG is no more than the security 1245  strength of its randomness source (i.e., the RBG1 construction). 1246  4. Each sub-DRBG has restrictions on its use (e.g., the number of outputs) as specified for its 1247  DRBG algorithm in [SP800-90A]. 1248  5. Sub-DRBGs cannot provide output with full entropy. 1249  6. The number of sub-DRBGs that can be instantiated by a RBG1 construction is limited only 1250  by practical considerations associated with the implementation or application. 1251  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  33  4.3.1. Instantiating a Sub-DRBG 1252  Instantiation of the sub-DRBG is requested (e.g., by a consuming application) using the 1253  Instantiate_function discussed in Section 2.8.1.1 and [SP800-90A]. 1254  (status, sub-DRBG_state_handle) =  1255  Instantiate_function(s, prediction_resistance_flag = FALSE, personalization_string), 1256  where s is the requested security strength for the (target) sub-DRBG (note that s must be no greater 1257  than the security strength of the RBG1 construction).15 1258  The (target) sub-DRBG is instantiated as follows: 1259  1. When the sub-DRBG uses CTR_DRBG without a derivation function, s + 128 bits16 shall 1260  be obtained from the RBG1 construction as follows: 1261  (status, randomness-source_input) = Generate_function(RBG1_state_handle, s + 1262  128, s, prediction_resistance_request = FALSE, additional_input). 1263  2. When the sub-DRBG uses any other DRBG (including a CTR_DRBG with a derivation 1264  function), 3s/2 bits shall be obtained from the RBG1 construction as follows: 1265  (status, randomness-source_input) = Generate_function(RBG1_state_handle, 3s/2, 1266  s, prediction_resistance_request = FALSE, additional_input). 1267  4.3.2. Requesting Random Bits 1268  Pseudorandom bits may be requested from a sub-DRBG using the following call (see Section 1269  2.8.1.2): 1270  (status, returned_bits) = Generate_function(sub_DRBG_state_handle, 1271  requested_number_of_bits, requested_security_strength, prediction_resistance_request = 1272  FALSE, additional_input), 1273  where sub_DRBG_state_handle (if used) was returned by the Instantiate_function (see Sections 1274  2.8.1.1 and 4.3.1). 1275  Requirements 1276  4.4.1. RBG1 Requirements 1277  An RBG1 construction being instantiated has the following testable requirements (i.e., testable by 1278  the validation labs): 1279  1. An approved DRBG from [SP800-90A] whose components are capable of providing the 1280  targeted security strength for the RBG1 construction shall be employed. 1281  15 The implementation is required to check the requested security strength (for the sub-DRBG) against the security strength recorded in the internal  state of the RBG1’s DRBG (see SP 800-90A).  16 For AES, the block length is 128 bits, and the key length is equal to the security strength s. SP 800-90A requires the randomness input from the  randomness source to be (key length + block length) bits when a derivation function is not used.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  34  2. The RBG1 components shall be successfully validated for compliance with [SP800-90A], 1282  SP 800-90C, [FIPS140], and the specification of any other approved algorithm used within 1283  the RBG1 construction, as applicable. 1284  3. The RBG1 construction shall not produce any output until it is instantiated. 1285  4. The RBG1 construction shall not include a reseed capability. 1286  5. The RBG1 construction shall not permit itself to be instantiated more than once.17 1287  6. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), 3s/2 bits 1288  shall be obtained from a randomness source (see Requirements 13 - 17), where s is the 1289  targeted security strength for the DRBG used in the RBG1 construction. 1290  7. For a CTR_DRBG (without a derivation function), s + 128 bits18 shall be obtained from 1291  the randomness source (see Requirements 13 - 17), where s is the targeted security strength 1292  for the DRBG used in the RBG1 construction. 1293  8. The internal state of the RBG1 construction shall be maintained19 and updated to produce 1294  output on demand. 1295  9. The RBG1 construction shall not provide output for generating requests that specify a 1296  security strength greater than the instantiated security strength of its DRBG. 1297  10. If the RBG1 construction is used to instantiate a sub-DRBG, the RBG1 construction may 1298  directly produce output in addition to instantiating the sub-DRBG. 1299  11. If the seedlife of the DRBG within the RBG1 construction is ever exceeded or a health test 1300  of the DRBG fails, the use of the RBG1 construction shall be terminated. 1301  12. If a health test on the RBG1 construction fails, the RBG1 construction and all of its sub-1302  DRBGs shall be terminated. 1303  The non-testable requirements for the RBG1 construction are listed below. If these requirements 1304  are not met, no assurance can be obtained about the security of the implementation. 1305  13. An approved RBG2(P) construction with support for prediction resistance requests or an 1306  RBG3 construction must be used as the randomness source for the DRBG in the RBG1 1307  construction. 1308  14. The randomness source must fulfill the requirements in Section 5 (for an RBG(P) 1309  construction) or Section 6 (for an RBG3 construction), as appropriate. 1310  15. The randomness source must provide the requested number of bits at a security strength of 1311  s bits or higher, where s is the targeted security strength for the RBG1 construction. 1312  16. The specific output of the randomness source (or portion thereof) that is used for the 1313  instantiation of an RBG1 construction must not be used for any other purpose, including 1314  for seeding a different instantiation. 1315  17 While technically possible to reseed the DRBG, doing so outside of very controlled conditions (e.g., “in the field”) might result in seeds with less  than the required amount of randomness.  18 Note that s + 128 = keylen + blocklen = seedlen, as specified in SP 800-90A.  19 This means ever-changing but maintained regardless of access to power for its entire lifetime.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  35  17. If an RBG2(P) construction is used as the randomness source for the RBG1 construction, 1316  the RBG2(P) construction must be reseeded (i.e., prediction resistance must be obtained 1317  within the RBG2(P) construction) before generating bits for each RBG1 instantiation. 1318  18. A physically secure channel must be used to insert the randomness input from the 1319  randomness source into the DRBG of the RBG1 construction. 1320  19. An RBG1 construction must not be used for applications that require a higher security 1321  strength than has been instantiated. 1322  4.4.2. Sub-DRBG Requirements 1323  A sub-DRBG has the following testable requirements (i.e., testable by the validation labs).  1324  1. The randomness source for a sub-DRBG shall be an RBG1 construction; a sub-DRBG 1325  shall not serve as a randomness source for another sub-DRBG. 1326  2. A sub-DRBG shall employ the same DRBG components as its randomness source. 1327  3.  A sub-DRBG shall reside in the same security boundary as the RBG1 construction that 1328  initializes it. 1329  4. The RBG1 construction shall fulfill the appropriate requirements of Section 4.4.1. 1330  5. A sub-DRBG shall exist only for a limited time and purpose, as determined by the 1331  application or developer. 1332  6. The output from the RBG1 construction that is used for sub-DRBG instantiation shall not 1333  be output from the security boundary of the construction and shall not be used for any 1334  other purpose, including for seeding a different sub-DRBG. 1335  7. A sub-DRBG shall not permit itself to be instantiated more than once.  1336  8. A sub-DRBG shall not provide output for use by the RBG1 construction (e.g., as additional 1337  input) or another sub-DRBG in the security boundary. 1338  9. The security strength s requested for a target sub-DRBG instantiation shall not exceed the 1339  security strength that is supported by the RBG1 construction. 1340  10. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), 3s/2 bits 1341  shall be obtained from the RBG1 construction for instantiation, where s is the requested 1342  security strength for the target sub-DRBG. 1343  11 For a CTR_DRBG (without a derivation function), s + 128 bits shall be obtained from the 1344  RBG1 construction for instantiation, where s is the requested security strength for the target 1345  sub-DRBG. 1346  12. A sub-DRBG shall not produce output until it is instantiated. 1347  13. A sub-DRBG shall not provide output for generating requests that specify a security 1348  strength greater than the instantiated security strength of the sub-DRBG. 1349  14. A sub-DRBG shall not include a reseed capability. 1350  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  36  15. If the seedlife of a sub-DRBG is ever exceeded or a health test of the sub-DRBG fails, the 1351  use of the sub-DRBG shall be terminated. 1352  A non-testable requirement for a sub-DRBG (not testable by the validation labs) is: 1353  16. The output of a sub-DRBG must not be used as input to seed other DRBGs (e.g., the 1354  DRBGs in other RBGs).  1355  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  37  RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources 1356  An RBG2 construction is a cryptographically secure RBG with continuous access to one or more 1357  validated entropy sources within its RBG security boundary. The RBG is instantiated before use, 1358  generates outputs on demand, and can be used in an RBG3 construction (see Section 6). An RBG2 1359  construction may support reseeding and may provide prediction resistance during generation 1360  requests (i.e., by performing a reseed of the DRBG prior to generating output). Both reseeding and 1361  providing prediction resistance are optional for this construction. 1362  If full-entropy output is required by a consuming application, an RBG3 construction from Section 1363  6 needs to be used rather than an RBG2 construction. 1364  An RBG2 construction may be useful for all devices in which an entropy source can be 1365  implemented. 1366  RBG2 Description 1367  The DRBG for an RBG2 construction is contained within the same RBG security boundary and 1368  cryptographic module as its validated entropy source(s) (see Figure 16). The entropy source is 1369  used to provide the entropy bits for both DRBG instantiation and the reseeding of the DRBG used 1370  by the construction (e.g., to provide prediction resistance). An optional recommended 1371  personalization string and optional additional input may be provided from within the cryptographic 1372  module or from outside of that module. 1373  1374  Fig. 16. RBG2 Construction 1375  The output from the RBG may be used within the cryptographic module or by an application 1376  outside of the module. 1377  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  38  An example of an RBG2 construction is provided in Appendix B.4. 1378  An RBG2 construction may be implemented to use one or more validated physical and/or non-1379  physical entropy sources for instantiation and reseeding. Two variants of the RBG2 construction 1380  may be implemented. 1381  1. An RBG2(P) construction uses the output of one or more validated physical entropy 1382  sources and (optionally) one or more validated non-physical entropy sources as discussed 1383  in Method 1 of Section 2.3 (i.e., only the entropy produced by validated physical entropy 1384  sources is counted toward the entropy required for instantiating or reseeding the RBG). 1385  Any amount of entropy may be obtained from a non-physical entropy source as long as 1386  sufficient entropy has been obtained from the physical entropy sources to fulfill an entropy 1387  request. 1388  2. An RBG2(NP) construction uses the output of any validated non-physical or physical 1389  entropy sources as discussed in Method 2 of Section 2.3 (i.e., the entropy produced by both 1390  validated physical and non-physical entropy sources is counted toward the entropy required 1391  for instantiating or reseeding the RBG). 1392  These variants affect the implementation of a Get_ES_Bitstring function (as specified in Section 1393  2.8.2.2 and discussed in Section 3.1), either accessing the entropy source directly or via the 1394  Get_conditioned_full_entropy_input function during instantiation and reseeding (see Sections 1395  5.2.1 and 5.2.3). That is, when instantiating and reseeding an RBG2(P) construction (including a 1396  DRBG within an RBG3 construction as discussed in Section 6), Method 1 in Section 2.3 is used 1397  to combine the entropy from the entropy sources, and Method 2 is used when instantiating and 1398  reseeding an RBG2(NP) construction. 1399  Conceptual Interfaces 1400  The RBG2 construction interfaces to the DRBG include function calls for instantiating the DRBG 1401  (see Section 5.2.1), generating pseudorandom bits on request (see Section 5.2.2), and (optionally) 1402  reseeding the DRBG at the end of the DRBG’s seedlife and providing prediction resistance upon 1403  request (see Section 5.2.3). 1404  Once instantiated, an RBG2 construction with a reseed capability may be reseeded on demand or 1405  whenever sufficient entropy is available. 1406  5.2.1. RBG2 Instantiation 1407  An RBG2 construction may be instantiated at any valid20 security strength possible for the DRBG 1408  and its components using the following call: 1409  (status, RBG2_state_handle) = Instantiate_function (s, prediction_resistance_flag, 1410  personalization_string), 1411  20 A security strength of either 128, 192, or 256 bits.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  39  where s is the requested instantiation security strength for the DRBG. The 1412  prediction_resistance_flag (if used) is set to TRUE if prediction resistance is to be supported and 1413  FALSE otherwise. 1414  An RBG2 construction obtains entropy for its DRBG from one or more validated entropy sources, 1415  either directly or using a conditioning function to process the output of the entropy source to obtain 1416  a full-entropy bitstring for instantiation (e.g., when employing a CTR_DRBG without a derivation 1417  function using entropy sources that do not provide full-entropy output). 1418  SP 800-90A uses a Get_randomness-source_input call to obtain the entropy needed for 1419  instantiation (see SP 800-90A). 1420  1. When the DRBG is a CTR_DRBG without a derivation function, full-entropy bits shall be 1421  obtained as follows: 1422  a) If the entropy source provides full-entropy output, the Get_randomness-source_input 1423  call is replaced by:21, 22 1424  (status, entropy_bitstring) = Get_ES_Bitstring (s + 128).23 1425  For an RBG2(P) construction, only validated physical entropy sources shall be used. 1426  The output of the entropy sources shall be concatenated to obtain the s + 128 full-1427  entropy bits to be returned as entropy_bitstring. 1428  (This recommendation assumes that non-physical entropy sources cannot provide full-1429  entropy output. Therefore, the Get_ES_bitstring function shall not be used with non-1430  physical entropy sources in this case.) 1431  b) If the entropy sources does not provide full-entropy output, the Get_randomness-1432  source_input call is replaced by:24, 25 1433  (status, Full_entropy_bitstring) =  1434  Get_conditioned_full_entropy_input(s + 128). 1435  Validated physical and/or non-physical entropy sources shall be used to provide the 1436  requested entropy. For an RBG2(P) construction, the requested s + 128 bits of entropy 1437  shall be counted as specified in Method 1 of Section 2.3. For an RBG2(NP) 1438  construction, the requested s + 128 bits of entropy shall be counted as specified in 1439  Method 2 of Section 2.3. 1440  2.  For the Hash_DRBG, HMAC_DRBG and CTR_DRBG (with a derivation function), the 1441  entropy source shall provide 3s/2 bits of entropy to establish the security strength. 1442  a) If the consuming application requires full entropy in the returned bitstring, the 1443  Get_randomness-source_input call is replaced by: 1444  (status, Full_entropy_bitstring) =  1445  Get_conditioned_full_entropy_input(3s/2). 1446  21 Appropriate changes may be required for the Instantiate_function in [SP800-90A] and the algorithms in Section 10 of that document.  22 See Section 3.8.2.2 for a specification of the Get_ES_Bitstring function.  23 For a CTR_DRBG using AES, s + 128 = the length of the key + the length of the AES block = seedlen (see Table 2 in SP 800-90A).  24 Appropriate changes may be required for the Instantiate_function in [SP800-90A] and the algorithms in Section 10.2 of that document.  25 See Section 4.3.2 for a specification of the Get_conditioned_full_entropy_input function.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  40  b) If the consuming application does not require full entropy in the returned bitstring, the 1447  Get_randomness-source_input call is replaced by: 1448  (status, entropy_bitstring) = Get_ES_Bitstring(3s/2). 1449  Validated physical and/or non-physical entropy sources shall be used to provide the 1450  requested entropy. For an RBG2(P) construction, the requested 3s/2 bits of entropy shall 1451  be counted as specified in Method 1 of Section 2.3. For an RBG2(NP) construction, the 1452  requested 3s/2 bits of entropy shall be counted as specified in Method 2 of Section 3.3. 1453  5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction 1454  Pseudorandom bits may be requested using the following call (see Section 2.8.1.2): 1455  (status, returned_bits) = Generate_function(RBG2_state_handle, requested_number_of_bits, 1456  requested_security_strength, prediction_resistance_request, additional_input), 1457  where state_handle (if used) was returned by the Instantiate_function (see Sections 2.8.1.1 and 1458  5.2.1). 1459  Support for prediction resistance is optional. If prediction resistance is supported, its use is 1460  optional. This RBG may be designed to always provide prediction resistance, to only provide 1461  prediction resistance upon request, or to be unable to provide prediction resistance (i.e., to not 1462  support prediction-resistance requests during generation). 1463  Note that when prediction resistance is requested, the Generate_function will invoke the 1464  Reseed_function. If sufficient entropy is not available for reseeding, an error indication shall be 1465  returned, and the requested bits shall not be generated. 1466  5.2.3. Reseeding an RBG2 Construction 1467  As discussed in Section 2.4.2, when the RBG2 construction includes a reseed capability, the 1468  reseeding of the DRBG may be performed 1) upon request from a consuming application (either 1469  an explicit request for reseeding or a request for the generation of bits with prediction resistance); 1470  2) on a fixed schedule based on time, number of outputs, or events; or 3) as sufficient entropy 1471  becomes available. 1472  An RBG2 construction is reseeded using the following call: 1473  status = Reseed_function(RBG2_state_handle, additional_input), 1474  where the RBG2_state_handle (when used) was obtained during the instantiation of the RBG (see 1475  Sections 2.8.1.1 and 5.2.1). 1476  SP 800-90A uses a Get_randomness-source_input call to obtain the entropy needed for 1477  reseeding the DRBG (see Section 2.8.1.3 herein and in [SP800-90A]. The DRBG is reseeded at 1478  the instantiated security strength recorded in the DRBG’s internal state. The Get_randomness-1479  source_input call in SP 800-90A shall be replaced with the following: 1480  1. For the CTR_DRBG without a derivation function, use the appropriate replacement as 1481  specified in step 1 of Section 5.2.1. 1482  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  41  2. For the Hash_DRBG, HMAC_DRBG and CTR_DRBG (with a derivation function), 1483  replace the Get_randomness-sourceinput call in the Reseed_function with the 1484  following:26 1485  a) If the consuming application requires full entropy in the returned bitstring, the 1486  Get_randomness-source_input call is replaced by: 1487  (status, Full_entropy_bitstring) = Get_conditioned_full_entropy_input(s). 1488  b) If the consuming application does not require full entropy in the returned bitstring, 1489  the Get_randomness-source_input call is replaced by: 1490  (status, entropy_bitstring) = Get_ES_Bitstring(s). 1491  Validated physical and/or non-physical entropy sources shall be used to provide the 1492  requested entropy. For an RBG2(P) construction, the requested s bits of entropy shall be 1493  counted as specified in Method 127 of Section 2.3. For an RBG2(NP) construction, the 1494  requested s bits of entropy shall be counted as specified in Method 228 of Section 2.3. 1495  RBG2 Requirements 1496  An RBG2 construction has the following requirements in addition to those specified in [SP800-1497  90A]: 1498  1. The RBG shall employ an approved and validated DRBG from [SP800-90A] whose 1499  components are capable of providing the targeted security strength for the RBG. 1500  2. The RBG and its components shall be successfully validated for compliance with [SP800-1501  90A], [SP800-90B], SP 800-90C, [FIPS140], and the specification of any other approved 1502  algorithm used within the RBG, as appropriate. 1503  3. The RBG may include a reseed capability. If implemented, the reseeding of the DRBG 1504  shall be performed either a) upon request from a consuming application (either an explicit 1505  request for reseeding or a request for the generation of bits with prediction resistance); b) 1506  on a fixed schedule based on time, number of outputs, or events; and/or c) as sufficient 1507  entropy becomes available. 1508  4. Validated entropy sources shall be used to instantiate and reseed the DRBG. A non-1509  validated entropy sources shall not be used for this purpose. 1510  5. The entropy sources used for the instantiation and reseeding of an RBG(P) construction 1511  shall include one or more validated physical entropy sources; the inclusion of one or more 1512  validated non-physical entropy sources is optional. A bitstring that contains entropy shall 1513  be assembled and the entropy in that bitstring determined as specified in Method 1 of 1514  Section 2.3 (i.e., only the entropy provided by validated physical entropy sources shall be 1515  counted toward fulfilling the amount of entropy in an entropy request). 1516  26 See Sections 2.8.2.2 and 3.1 for discussions of the Get_ES_bitstring function.  27 Method 1 only counts the entropy provided by validated physical sources.  28 Method 2 counts the entropy provided by both physical and non-physical entropy sources.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  42  6. The entropy sources used for the instantiation and reseeding of an RBG2(NP) construction 1517  shall include one or more validated non-physical entropy sources; the inclusion of one or 1518  more validated physical entropy sources is optional. A bitstring containing entropy shall 1519  be assembled and the entropy in that bitstring determined as specified in Method 2 of 1520  Section 2.3 (i.e., the entropy provided by both validated non-physical entropy sources and 1521  any validated physical entropy sources included in the implementation shall be counted 1522  toward fulfilling the requested amount of entropy). 1523  7. The DRBG shall be capable of being instantiated and reseeded at the maximum security 1524  strength (s) for the DRBG design (see [SP800-90A]). 1525  8. A specific entropy-source output (or portion thereof) shall not be reused (e.g., it is 1526  destroyed after use). 1527  9. When instantiating and reseeding a CTR_DRBG without a derivation function, (s + 128) 1528  bits with full entropy shall be obtained either directly from the entropy source or from the 1529  entropy source via an external vetted conditioning function (see Section 3.3). 1530  10. For a Hash_DRBG, HMAC_DRBG or CTR_DRBG (with a derivation function), a 1531  bitstring with at least 3s/2 bits of entropy shall be obtained from the entropy source to 1532  instantiate the DRBG at a security strength of s bits. When reseeding is performed, a 1533  bitstring with at least s bits of entropy shall be obtained from the entropy source. 1534  11. The DRBG shall be instantiated before first use (i.e., before providing output for use by a 1535  consuming application) and reseeded using the validated entropy sources used for 1536  instantiation. 1537  12. When health tests detect the failure of a validated entropy source, the failure shall be 1538  handled as discussed in Section 7.1.2.1. 1539  A non-testable requirement for the RBG (not testable by the validation labs) is: 1540  13. The RBG must not be used by applications that require a higher security strength than 1541  has been instantiated in the DRBG.  1542  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  43  RBG3 Constructions Based on Physical Entropy Sources 1543  An RBG3 construction is designed to provide full entropy (i.e., an RBG3 construction can support 1544  all security strengths). The RBG3 constructions specified in this Recommendation include one or 1545  more entropy sources and an approved DRBG from SP 800-90A that can and will be instantiated 1546  at a security strength of 256 bits. If an entropy source fails in an undetected manner, the RBG 1547  continues to operate as an RBG2(P) construction, providing outputs at the security strength of its 1548  DRBG (256 bits) (see Section 5 and Appendix A). If a failure is detected, the RBG operation shall 1549  be terminated. 1550  Two RBG3 constructions are specified: 1551  1. RBG3(XOR) − This construction is based on combining the output of one or more 1552  validated entropy sources with the output of an instantiated, approved DRBG using an 1553  exclusive-or operation (see Section 6.2). 1554  2. RBG3(RS) − This construction is based on using one or more validated entropy sources to 1555  continuously reseed the DRBG (see Section 6.3). 1556  An RBG3 construction continually accesses its entropy sources, and its DRBG may be reseeded 1557  whenever requested (e.g., to provide prediction resistance for the DRBG’s output). Upon receipt 1558  of a request for random bits from a consuming application, the entropy source is accessed to obtain 1559  sufficient bits for the request. See Sections 3.1 and 3.2 for further discussion about accessing the 1560  entropy source(s). 1561  An implementation may be designed so that the DRBG implementation used within an RBG3 1562  construction can be directly accessed by a consuming application (i.e., the directly accessible 1563  DRBG uses the same internal state as the RBG3 construction). 1564  An RBG3 construction is useful when bits with full entropy are required or a higher security 1565  strength than RBG1 and RBG2 constructions can support is needed. 1566  General Requirements 1567  RBG3 constructions have the following general security requirements. See Sections 6.2.2 and 6.3.2 1568  for additional requirements for the RBG3(XOR) and RBG3(RS) constructions, respectively. 1569  1. An RBG3 construction shall be designed to provide outputs with full entropy using one or 1570  more validated independent physical entropy sources as specified for Method 1 in Section 1571  3.3 (i.e., only the entropy provided by validated physical entropy sources shall be counted 1572  toward fulfilling entropy requests, although entropy provided by any validated non-1573  physical entropy source may be used but not counted). 1574  2. An RBG3 construction and its components shall be successfully validated for compliance 1575  with the corresponding requirements in [SP800-90A], [SP800-90B], SP 800-90C, [FIPS 1576  140] and the specification of any other approved algorithm used within the RBG, as 1577  appropriate. 1578  3. The DRBG within the RBG3 construction shall be capable of supporting a security strength 1579  of 256 bits (i.e., a CTR_DRBG based on AES-256 or either Hash_DRBG or 1580  HMAC_DRBG using a hash function with an output length of at least 256 bits). 1581  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  44  4. The DRBG shall be instantiated at a security strength of 256 bits before the first use of the 1582  RBG3 construction or direct access of the DRBG. 1583  5. The DRBG shall include a reseed function to support reseed requests. 1584  6. A specific entropy-source output (or portion thereof) shall not be reused (e.g., the same 1585  entropy-source outputs shall not be used for an RBG3 request and a request to a separate 1586  instantiation of a DRBG). 1587  7. If the DRBG is directly accessible, the requirements in Section 5.3 for RBG2(P) 1588  constructions shall apply to the direct access of the DRBG. 1589  8. When health tests detect the failure of a validated physical entropy source, the failure shall 1590  be handled as discussed in Section 7.1.2.1. If a failure is detected in a non-physical entropy 1591  source, the consuming application shall be notified. 1592  RBG3(XOR) Construction 1593  An RBG3(XOR) construction contains one or more validated entropy sources and a DRBG whose 1594  outputs are XORed to produce full-entropy output (see Figure 17). In order to provide the required 1595  full-entropy output, the input to the XOR (shown as “⊕” in the figure) from the entropy-source 1596  side of the figure shall consist of bits with full entropy (see Section 2.1).29 If the entropy sources 1597  cannot provide full-entropy output, then an external conditioning function shall be used to 1598  condition the output of the entropy sources to a full-entropy bitstring before XORing with the 1599  output of the DRBG (see Section 3.3). 1600  29 Note that the DRBGs themselves are not designed to inherently provide full-entropy output.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  45  1601  Fig. 17. RBG3(XOR) Construction 1602  When n bits of output are requested from an RBG3(XOR) construction, n bits of output from the 1603  DRBG are XORed with n full-entropy bits obtained either directly from the entropy source or from 1604  the entropy source after cryptographic processing by an external vetted conditioning function (see 1605  Section 3.3). When the entropy source is working properly,30 an n-bit output from the RBG3(XOR) 1606  construction is said to provide n bits of entropy or to support a security strength of n bits. The 1607  DRBG used in the RBG3(XOR) construction is always required to support a 256-bit security 1608  strength. If the entropy source fails without being detected and the DRBG has been successfully 1609  instantiated with at least 256 bits of entropy, the DRBG continues to produce output at a security 1610  strength of 256 bits. 1611  An example of an RBG3(XOR) design is provided in Appendix B.5. 1612  6.2.1. Conceptual Interfaces 1613  The RBG interfaces include function calls for instantiating the DRBG (see Section 6.2.1.1), 1614  generating random bits on request (see Section 6.2.1.2), and reseeding the DRBG instantiation(s) 1615  (see Section 6.2.1.3). 1616  6.2.1.1. Instantiation of the DRBG 1617  The DRBG for the RBG3(XOR) construction is instantiated as follows: 1618  30 The entropy source provides at least the amount of entropy determined during the entropy-source validation process.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  46  RBG3(XOR)_DRBG_Instantiate: 1619  Input: integer (prediction_resistance_flag), string personalization_string. 1620  Output: integer status, integer state_handle. 1621  Process: 1622  1. (status, RBG3(XOR)_state_handle) = Instantiate_function(256, 1623  prediction_resistance_flag, personalization_string). 1624  2. Return (status, RBG3(XOR)_state_handle). 1625  In step 1, the DRBG is instantiated at a security strength of 256 bits. The 1626  prediction_resistance_flag and personalization_string (when provided as input to the 1627  RBG3(XOR)_DRBG_Instantiate function) shall be used in step 1.  1628  In step 2, the status and RBG3(XOR)_state_handle that were obtained in step 1 are returned. Note 1629  that if the status does not indicate a successful instantiate process (i.e., a failure is indicated), the 1630  returned state handle shall be invalid (e.g., a Null value). The handling of status codes is discussed 1631  in Section 2.8.3. 1632  6.2.1.2. Random and Pseudorandom Bit Generation 1633  Let n be the requested number of bits to be generated, and let the RBG3(XOR)_state_handle be 1634  the value returned by the instantiation function for RBG3’s DRBG instantiation (see Section 1635  6.2.1.1). Random bits with full entropy shall be generated by the RBG3(XOR) construction using 1636  the following generate function: 1637  RBG3(XOR)_Generate: 1638  Input: integer (RBG3(XOR)_state_handle, n, prediction_resistance_request), string 1639  additional_input. 1640  Output: integer status, string returned_bits. 1641  Process: 1642  1. (status, ES_bits) = Request_entropy(n). 1643  2. If (status ≠ SUCCESS), then return (status, invalid_string). 1644  3. (status, DRBG_bits) = Generate_function(RBG3(XOR)_state_handle, n, 256, 1645  prediction_resistance_request, additional_input). 1646  4. If (status ≠ SUCCESS), then return (status, invalid_string). 1647  5. returned_bits = ES_bits ⊕ DRBG_bits. 1648  6. Return (SUCCESS, returned_bits). 1649  Step 1 requests that the entropy sources generate bits. Since full-entropy bits are required, the 1650  (place holder) Request_entropy call shall be replaced by one of the following: 1651  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  47  • If full-entropy output is provided by all validated physical entropy sources used by the 1652  RBG3(XOR) implementation, and non-physical entropy sources are not used,31 step 1 1653  becomes: 1654  (status, ES_bits) = Get_ES_Bitstring(n). 1655  The Get_ES_Bitstring function32 shall use Method 1 in Section 2.3 to obtain the n full-1656  entropy bits that were requested in order to produce the ES_bits bitstring. 1657  • If full-entropy output is not provided by all physical entropy sources, or the output of both 1658  physical and non-physical entropy sources is also used by the implementation, step 1 1659  becomes: 1660  (status, ES_bits) = Get_conditioned_full_entopy_input(n). 1661  The Get_conditioned_full_entropy_input construction is specified in Section 3.3.2. It 1662  requests entropy from the entropy sources in step 3.1 of that construction with a 1663  Get_ES_Bitstring call. The Get_ES_Bitstring call shall use Method 1 (as specified in 1664  Section 3.3) when collecting the output of the entropy sources (i.e., only the entropy 1665  provided by physical entropy sources is counted). 1666  In step 2, if the request in step 1 is not successful, abort the RBG3(XOR)_Generate function, 1667  returning the status received in step 1 and an invalid bitstring as the returned_bits (e.g., a Null 1668  bitstring). If status indicates a success, ES_bits is the full-entropy bitstring to be used in step 5. 1669  In step 3, the RBG3(XOR)’s DRBG instantiation is requested to generate n bits at a security 1670  strength of 256 bits. The DRBG instantiation is indicated by the RBG3(XOR)_state_handle, which 1671  was obtained during instantiation (see Section 6.2.1.1). If a prediction-resistance request and/or 1672  additional input are provided in the RBG.3(XOR)_Generate call, they shall be included in the 1673  Generate_function call. 1674  Note that it is possible that the DRBG would require reseeding during the Generate_function call 1675  in step 3 (e.g., because of a prediction-resistance request, or the end of the seedlife of the DRBG 1676  has been reached). If a reseed of the DRBG is required during Generate-function execution, the 1677  DRBG shall be reseeded as specified in Section 6.2.1.3 with bits not otherwise used by the RBG. 1678  In step 4, if the Generate_function request is not successful, the RBG3(XOR)_Generate 1679  function is aborted, and the status received in step 3 and an invalid bitstring (e.g., a Null bitstring) 1680  are returned to the consuming application. If status indicates a success, DRBG_bits is the 1681  pseudorandom bitstring to be used in step 5. 1682  Step 5 combines the bitstrings returned from the entropy sources (from step 1) and the DRBG 1683  (from step 3) using an XOR operation. The resulting bitstring is returned to the consuming 1684  application in step 6. 1685  31 Since non-physical entropy sources are assumed to be incapable of providing full-entropy output, they cannot contribute to the bitstring provided  by the Get_ES_Bitstring function.  32 See Section 3.10.2.2.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  48  6.2.1.3. Pseudorandom Bit Generation Using a Directly Accessible DRBG 1686  Pseudorandom bit generation by a direct access of the DRBG is accomplished as specified in 1687  Section 5.2.2 using the state handle obtained during instantiation (see Section 6.2.1.1). 1688  When directly accessing the DRBG instantiation that is also used by the RBG3(XOR) 1689  construction, the following function is used: 1690  (status, returned_bits) = Generate_function(RBG3(XOR)_state_handle, 1691  requested_number_of_bits, requested_security_strength, prediction_resistance_request, 1692  additional_input), 1693  where:  1694  • RBG3(XOR)_state_handle indicates the DRBG instantiation to be used. 1695  • requested_security_strength ≤ 256. 1696  • prediction-resistance-request is either TRUE or FALSE; requesting prediction resistance 1697  during the Generate_function is optional. 1698  • The use of additional input is optional. 1699  Note that when prediction resistance is requested, the Generate_function will invoke the 1700  Reseed_function (see Section 6.2.1.3). If sufficient entropy is not available for reseeding, an error 1701  indication shall be returned, and the requested bits shall not be generated. 1702  6.2.1.4. Reseeding the DRBG Instantiations 1703  Reseeding is performed using the entropy sources in the same manner as an RBG2 construction 1704  using the appropriate state handle (e.g., RBG3(XOR)_state_handle, as specified in Section 6.2.1.1). 1705  6.2.2. RBG3(XOR) Requirements 1706  An RBG3(XOR) construction has the following requirements in addition to those provided in 1707  Section 6.2: 1708  1. Bitstrings with full entropy shall be provided to the XOR operation either directly from the 1709  concatenated output of one or more validated physical entropy sources or by an external 1710  conditioning function using the output of one or more validated entropy sources as 1711  specified in Method 1 of Section 2.3. In the latter case, the output of validated non-physical 1712  entropy sources may be used without counting any entropy that they might provide. 1713  2. The same entropy-source outputs used by the DRBG for instantiation or reseeding shall 1714  not be used as input into the RBG’s XOR operation. 1715  3. The DRBG instantiations shall be reseeded occasionally (e.g., after a predetermined period 1716  of time or number of generation requests). 1717  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  49  RBG3(RS) Construction 1718  The second RBG3 construction specified in this document is the RBG3(RS) construction shown 1719  in Figure 18, and an example of this construction is provided in Appendix B.6. 1720  Note that external conditioning of the outputs from the entropy sources during instantiation and 1721  reseeding is required when the DRBG is a CTR_DRBG without a derivation function and the 1722  entropy sources do not provide a bitstring with full entropy. 1723  1724  Fig. 18. RBG3(RS) Construction 1725  6.3.1. Conceptual Interfaces 1726  The RBG interfaces include function calls for instantiating the DRBG (see Section 6.3.1.1), 1727  generating random bits on request (see Section 6.3.1.2), and reseeding the DRBG instantiation (see 1728  Section 6.3.1.3). 1729  6.3.1.1. Instantiation of the DRBG Within an RBG3(RS) Construction 1730  DRBG instantiation is performed as follows: 1731  RBG3(RS)_DRBG_Instantiate: 1732  Input: integer (prediction_resistance_flag), string personalization_string. 1733  Output: integer status, integer state_handle. 1734  Process: 1735  1. (status, RBG3(RS)_state_handle) = Instantiate_function(256, 1736  prediction_resistance_flag = TRUE, personalization_string). 1737  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  50  2. Return (status, RBG3(RS)_state_handle). 1738  In step 1, the DRBG is instantiated at a security strength of 256 bits. The 1739  prediction_resistance_flag is set to TRUE, and personalization_string (when provided as input to 1740  the RBG3(RS)_DRBG_Instantiate function) shall be used in step 1.  1741  In step 2, the status and the RBG3(RS)_state_handle are returned. Note that if the status does not 1742  indicate a successful instantiate process (i.e., a failure is indicated), the returned state handle shall 1743  be invalid (e.g., a Null value). The handling of status codes is discussed in Section 2.8.3. 1744  6.3.1.2. Random and Pseudorandom Bit Generation 1745  6.3.1.2.1 Generation Using the RBG3(RS) Construction 1746  When an RBG3(RS) construction receives a request for n random bits, the DRBG instantiation 1747  used by the construction needs to be reseeded with sufficient entropy so that bits with full entropy 1748  can be extracted from the DRBG’s output block. 1749  Table 3 provides information for generating full-entropy output from the DRBGs in SP 800-90A 1750  that use the cryptographic primitives listed in the table. Each primitive in the table can support a 1751  security strength of 256 bits − the highest security strength recognized by this Recommendation. 1752  To use the table, select the row that identifies the cryptographic primitive used by the implemented 1753  DRBG. 1754  • Column 1 lists the DRBGs. 1755  • Column 2 identifies the cryptographic primitives that can be used by the DRBG(s) in 1756  column 1 to support a security strength of 256 bits. 1757  • Column 3 indicates the length of the output block (output_len) for the cryptographic 1758  primitives in column 2. 1759  • Column 4 indicates the amount of fresh entropy that is obtained by a Reseed_function 1760  when the Generate_function is invoked with prediction resistance requested. 1761  Table 3. Values for generating full-entropy bits by an RBG3(RS) Construction 1762  DRBG DRBG  Primitives  Output Block  Length (output_len)  in bits  Entropy obtained  during a normal  reseed operation  CTR_DRBG  (with no derivation  function)  AES-256 128 384  CTR_DRBG (using a  derivation function) AES-256 128 256  Hash_DRBG  or  HMAC_DRBG  SHA-256  SHA3-256 256 256  SHA-384  SHA3-384 384 256  SHA-512  SHA3-512 512 256  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  51  The strategy used for obtaining full-entropy output from the RBG3(RS) construction requires 1763  obtaining sufficient fresh entropy and subsequently extracting full entropy bits from the output 1764  block in accordance with item 11 of Section 2.6. 1765  For the RBG3(RS)_Generate function: 1766  • Let n be the requested number of full-entropy bits to be generated by an RBG3(RS) 1767  construction. 1768  • Let RBG3(RS)_state_handle be a state handle returned from the instantiate function (see 1769  Section 6.3.1.1). 1770  Random bits with full entropy shall be generated as follows: 1771  RBG3(RS)_ Generate: 1772  Input: integer (RBG3(RS)_state_handle, n), string additional_input. 1773  Output: integer status, bitstring returned_bits. 1774  Process: 1775  1. full-entropy_bits =Null. 1776  2. sum = 0. 1777  3. While (sum < n), 1778  3.1 Obtain generated_bits from the entropy source. 1779  3.2 If (status ≠ SUCCESS), then return (status, invalid_bitstring). 1780  3.3 full-entropy_bits = full_entropy_bits || generated_bits. 1781  3.4 sum = sum + len(generated_bits). 1782  4. Return (SUCCESS, leftmost(full-entropy_bits, n)). 1783  In steps 1 and 2, the bitstring intended to collect the generated bits for returning to the calling 1784  application (i.e., full-entropy_bits) is initialized to the Null bitstring, and the counter for the number 1785  of bits obtained for fulfilling the request is initialized to zero. 1786  Step 3 is iterated until n bits have been generated. 1787  In step 3.1, the DRBG is requested to obtain sufficient entropy so that a bitstring with full 1788  entropy can be extracted from the output block. The form of the request depends on the DRBG 1789  algorithm used in the RBG3(RS) construction and the method for obtaining a full-entropy 1790  bitstring (see Section 2.6, item 11). Note that extracting fewer full-entropy bits from the 1791  DRBG’s output block is permitted. 1792  For a CTR_DRBG (with or without a derivation function), a maximum of 128 bits with 1793  full entropy can be provided from the AES output block for each iteration of the DRBG as 1794  follows: 1795  (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 128, 1796  256, prediction_resistance_request = TRUE, additional_input). 1797  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  52  The Generate_function generates 128 (full entropy) bits after reseeding the 1798  CTR_DRBG with either 256 or 384 bits of entropy (by setting 1799  prediction_resistance_request = TRUE).33 1800  For a hash-based DRBG (i.e., Hash_DRBG and HMAC_DRBG), a maximum of 256 full-1801  entropy bits can be produced from each iteration of the DRBG as follows: 1802  3.1.1 (status, additional_entropy) = Get_ES_Bitstring (64). 1803  3.1.2 If (status ≠ SUCCESS), then return (status, invalid_bitstring). 1804  3.1.3 (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 1805  256, 256, prediction_resistance_request = TRUE, additional_input || 1806  additional_entropy). 1807  At least 64 bits of entropy beyond the amount obtained during reseeding are required. 1808  As shown in Table 3, the reseeding process will acquire 256 bits of entropy. The (256 1809  + 64 = 384) bits of entropy are inserted into the DRBG by 1) obtaining a bitstring with 1810  at least 64 bits of entropy directly from the entropy sources (step 3.1.1), 2) 1811  concatenating the additional entropy bits with any additional_input provided in the 1812  RBG3(RS)_Generate call, and 3) requesting the generation of 256 bits with prediction 1813  resistance and including the concatenated bitstring. This results in both the reseed of 1814  the DRBG with 256 bits of entropy and the insertion of the additional 64 bits of entropy) 1815  (step 3.1.3). 1816  For a hash-based DRBG (i.e., Hash_DRBG and HMAC_DRBG), a maximum of 192 full-1817  entropy bits can be produced from each iteration of the DRBG as follows: 1818  (status, generated_bits) = Generate_function(RBG3(RS)_state_handle, 192, 1819  256, prediction_resistance_request = TRUE, additional_input). 1820  The DRBG is reseeded with 256 bits of entropy by requesting generation with prediction 1821  resistance and extracting only (256 − 64 = 192) bits from the DRBG’s output block as 1822  full-entropy bits. 1823  In step 3.2, if the Generate_function request invoked in step 3.1 is not successful, the 1824  RBG3(RS)_Generate function is aborted, and the status received in step 3.1 and an invalid 1825  bitstring (e.g., a Null bitstring) are returned to the consuming application. 1826  Step 3.3 combines the full-entropy bitstrings obtained in step 3.1 with previously generated 1827  full-entropy bits using a concatenation operation. 1828  Step 3.4 adds the number of full-entropy bits produced in step 3.1 to those generated in 1829  previous iterations of step 3. 1830  If sum is less than the requested number of bits (n), repeat step 3 starting at step 3.1. 1831  In step 4, the leftmost n bits are selected from the collected bitstring (i.e., full-entropy_bits) and 1832  returned to the consuming application. 1833  6.3.1.2.2 Generation Using a Directly Accessible DRBG 1834  33 The use of the prediction_resistance_request will handle the differences between the two versions of the CTR_DRBG (i.e., with or without a  derivation function).  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  53  Direct access of the DRBG is accomplished as specified in Section 5.2.2 using the state handle 1835  associated with the instantiation and internal state that was returned for the DRBG (see Section 1836  6.3.1.1). 1837  (status, returned_bits) = Generate_function(RBG3(RS)_state_handle, 1838  requested_number_of_bits, requested_security_strength, prediction_resistance_request, 1839  additional_input), 1840  where state_handle (if used) was returned by the Instantiate_function (see Section 6.3.1.1). 1841  When the previous generate request was made to the RBG3(RS) construction rather than directly 1842  to the DRBG, the prediction_resistance_request parameter shall be set to TRUE. Otherwise, 1843  requesting prediction resistance during the Generate_function is optional. 1844  6.3.1.3. Reseeding 1845  Reseeding is performed during a Generate_function request to a directly accessible DRBG (see 1846  Section 6.3.1.2.2) when prediction resistance is requested or the end of the DRBG’s seedlife is 1847  reached. The Generate_function invokes the Reseed_function specified in [SP800-90A]. 1848  Reseeding may also be performed on demand as specified in Section 4.2.3 using the 1849  RBG3(RS)_state_handle if provided during instantiation. 1850  6.3.2. Requirements for a RBG3(RS) Construction 1851  An RBG3(RS) construction has the following requirements in addition to those provided in 1852  Section 6.1: 1853  1. Fresh entropy shall be acquired either directly from all independent validated entropy 1854  sources (see Section 3.2) or (in the case of a CTR_DRBG used as the DRBG when the 1855  entropy sources do not provide full-entropy output) from an external conditioning function 1856  that processes the output of the validated entropy sources as specified in Section 3.3.2. 1857  Method 1 in Section 2.3 shall be used when collecting the required entropy (i.e., only the 1858  entropy provided by validated physical entropy sources shall be counted toward fulfilling 1859  the amount of entropy requested). 1860  2. If the DRBG is directly accessible, a reseed of the DRBG instantiation shall be performed 1861  before generating output in response to a request for output from the directly accessible 1862  DRBG when the previous use of the DRBG was by the RBG3(RS) construction. This could 1863  require an additional internal state value to record the last use of the DRBG for generation 1864  (e.g., used by an RBG3(RS)_Generate function as specified in Section 6.3.1.2.1 or 1865  directly accessed by a (DRBG) Generate_function as discussed in Section 6.3.1.2.2).  1866  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  54  Testing 1867  Two types of testing are specified in this Recommendation: health testing and implementation-1868  validation testing. Health testing shall be performed on all RBGs that claim compliance with this 1869  Recommendation (see Section 7.1). Section 7.2 provides requirements for implementation 1870  validation. 1871  Health Testing 1872  Health testing is the testing of an implementation prior to and during normal operations to 1873  determine that the implementation continues to perform as expected and as validated. Health 1874  testing is performed by the RBG itself (i.e., the tests are designed into the RBG implementation). 1875  An RBG shall support the health tests specified in [SP800-90A] and [SP800-90B] as well as 1876  perform health tests on the components of SP 800-90C (see Section 7.1.1). [FIPS 140] specifies 1877  the testing to be performed within a cryptographic module. 1878  7.1.1. Testing RBG Components 1879  Whenever an RBG receives a request to start up or perform health testing, a request for health 1880  testing shall be issued to the RBG components (e.g., the DRBG and any entropy source). 1881  7.1.2. Handling Failures 1882  Failures may occur during the use of entropy sources and during the operation of other components 1883  of an RBG. 1884  Note that [SP800-90A] and [SP800-90B] discuss the error handling for DRBGs and entropy 1885  sources, respectively. 1886  7.1.2.1. Entropy-Source Failures 1887  A failure of a validated entropy source may be reported to the Get_ES_Bitstring function (see 1888  item 3 of Section 3.1 and item 4 of Section 3.2) during entropy requests to the entropy sources or 1889  to the RBG when the entropy sources continue to function when entropy is not requested (see item 1890  5 of Section 3.2). 1891  7.1.2.2. Failures by Non-Entropy-Source Components 1892  Failures by non-entropy-source components may be caused by either hardware or software 1893  failures. Some of these may be detected using the health testing within the RBG using known-1894  answer tests. Failures could also be detected by the system in or on which the RBG resides. 1895  When such failures are detected that affect the RBG, RBG operation shall be terminated. The RBG 1896  must not be resumed until the reasons for the failure have been determined and the failures have 1897  been repaired and successfully tested for proper operation. 1898  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  55  Implementation Validation 1899  Implementation validation is the process of verifying that an RBG and its components fulfill the 1900  requirements of this Recommendation. Validation is accomplished by: 1901  • Validating the components from [SP800-90A] and [SP800-90B]. 1902  • Validating the use of the constructions in SP 800-90C via code inspection, known-answer 1903  tests, or both, as appropriate. 1904  • Validating that the appropriate documentation as specified in SP 800-90C has been 1905  provided (see below). 1906  Documentation shall be developed that will provide assurance to testers that an RBG that claims 1907  compliance with this Recommendation has been implemented correctly. This documentation shall 1908  include the following as a minimum: 1909  • An identification of the constructions and components used by the RBG, including a 1910  diagram of the interaction between the constructions and components. 1911  • If an external conditioning function is used, an indication of the type of conditioning 1912  function and the method for obtaining any keys that are required by that function. 1913  • Appropriate documentation, as specified in [SP800-90A] and [SP800-90B]. The DRBG 1914  and the entropy sources shall be validated for compliance with SP 800-90A or SP 800-1915  90B, respectively, and the validations successfully finalized before the completion of RBG 1916  implementation validation. 1917  • For an RBG1 or RBG2 construction, the maximum security-strength that can be supported 1918  by the DRBG. 1919  • A description of all validated and non-validated entropy sources used by the RBG, 1920  including identifying whether the entropy source is a physical or non-physical entropy 1921  source. 1922  • Documentation justifying the independence of all validated entropy sources from all other 1923  validated and non-validated entropy sources. 1924  • An identification of the features supported by the RBG (e.g., access to the underlying 1925  DRBG of an RBG3 construction). 1926  • A description of the health tests performed, including an identification of the periodic 1927  intervals for performing the tests. 1928  • A description of any support functions other than health testing. 1929  • A description of the RBG components within the RBG security boundary (see Section 2.5). 1930  • For an RBG1 construction, a statement indicating that the randomness source must be a 1931  validated RBG2(P) or RBG3 construction (e.g., this could be provided in user 1932  documentation and/or a security policy). 1933  • If sub-DRBGs can be used in an RBG1 construction, the maximum number of sub-DRBGs 1934  and the security strengths to be supported by the sub-DRBGs. 1935  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  56  • For an RBG2 construction (including a directly accessible DRBG within an RBG3 1936  construction), a statement indicating whether prediction resistance is always provided 1937  when a request is made by a consuming application, only provided when requested, or 1938  never provided. 1939  • For an RBG3 construction, a statement indicating whether the DRBG can be accessed 1940  directly. 1941  • Documentation specifying the guidance to users about fulfilling the non-testable 1942  requirements for RBG1 constructions, RBG2 constructions, and sub-DRBGs, as 1943  appropriate  (see Sections 5.4 and 6.3, respectively). 1944  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  57  References 1945  [FIPS140] National Institute of Standards and Technology (2001) Security 1946  Requirements for Cryptographic Modules. (U.S. Department of Commerce, 1947  Washington, DC), Federal Information Processing Standards Publication 1948  (FIPS) 140-2, Change Notice 2 December 03, 2002. 1949  https://doi.org/10.6028/NIST.FIPS.140-2 1950  National Institute of Standards and Technology (2010) Security 1951  Requirements for Cryptographic Modules. (U.S. Department of Commerce, 1952  Washington, DC), Federal Information Processing Standards Publication 1953  (FIPS) 140-3. https://doi.org/10.6028/NIST.FIPS.140-3 1954  [FIPS140IG]  National Institute of Standards and Technology, Canadian Centre for 1955  Cyber Security Implementation Guidance for FIPS 140-2 and the 1956  Cryptographic Module Validation Program, [Amended]. Available at 1957  https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-1958  program/documents/fips140-2/FIPS1402IG.pdf 1959  [FIPS180] National Institute of Standards and Technology (2015) Secure Hash 1960  Standard (SHS). (U.S. Department of Commerce, Washington, DC), 1961  Federal Information Processing Standards Publication (FIPS) 180-4. 1962  https://doi.org/10.6028/NIST.FIPS.180-4 1963  [FIPS197] National Institute of Standards and Technology (2001) Advanced 1964  Encryption Standard (AES). (U.S. Department of Commerce, Washington, 1965  DC), Federal Information Processing Standards Publication (FIPS) 197. 1966  https://doi.org/10.6028/NIST.FIPS.197 1967  [FIPS198] National Institute of Standards and Technology (2008) The Keyed-Hash 1968  Message Authentication Code (HMAC). (U.S. Department of Commerce, 1969  Washington, DC), Federal Information Processing Standards Publication 1970  (FIPS) 198-1. https://doi.org/10.6028/NIST.FIPS.198-1. 1971  [FIPS202] National Institute of Standards and Technology (2015) SHA-3 Standard: 1972  Permutation-Based Hash and Extendable-Output Functions. (U.S. 1973  Department of Commerce, Washington, DC), Federal Information 1974  Processing Standards Publication (FIPS) 202. 1975  https://doi.org/10.6028/NIST.FIPS.202 1976  [NISTIR8427] Buller D, Kaufer A, Roginsky AL, Sonmez Turan M (2022). Discussion on 1977  the Full Entropy Assumption of SP 800-90 Series. (National Institute of 1978  Standards and Technology, Gaithersburg, MD), NIST Internal Report 1979  (NISTIR) 8427 ipd. https://doi.org/10.6028/NIST.IR.8427.ipd 1980  [SP800-38B] Dworkin MJ (2005) Recommendation for Block Cipher Modes of 1981  Operation: the CMAC Mode for Authentication. (National Institute of 1982  Standards and Technology, Gaithersburg, MD), NIST Special Publication 1983  https://doi.org/10.6028/NIST.FIPS.140-2 https://doi.org/10.6028/NIST.FIPS.140-3 https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/fips140-2/FIPS1402IG.pdf https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/fips140-2/FIPS1402IG.pdf https://doi.org/10.6028/NIST.FIPS.180-4 https://doi.org/10.6028/NIST.FIPS.197 https://doi.org/10.6028/NIST.FIPS.198-1 https://doi.org/10.6028/NIST.FIPS.202  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  58  (SP) 800-38B, Includes updates as of October 6, 2016. 1984  https://doi.org/10.6028/NIST.SP.800-38B 1985  [SP800-57Part1]  Barker EB (2020) Recommendation for Key Management: Part 1 – 1986  General. (National Institute of Standards and Technology, Gaithersburg, 1987  MD), NIST Special Publication (SP) 800-57 Part 1, Rev. 5.  1988  https://doi.org/10.6028/NIST.SP.800-57pt1r5 1989  [SP800-67] Barker EB, Mouha N (2017) Recommendation for the Triple Data 1990  Encryption Algorithm (TDEA) Block Cipher. (National Institute of 1991  Standards and Technology, Gaithersburg, MD), NIST Special Publication 1992  (SP) 800-67, Rev. 2. https://doi.org/10.6028/NIST.SP.800-67r2 1993  [SP800-90A] Barker EB, Kelsey JM (2015) Recommendation for Random Number 1994  Generation Using Deterministic Random Bit Generators. (National 1995  Institute of Standards and Technology, Gaithersburg, MD), NIST Special 1996  Publication (SP) 800-90A, Rev. 1. https://doi.org/10.6028/NIST.SP.800-1997  90Ar1 1998  [SP800-90B] Sönmez Turan M, Barker EB, Kelsey JM, McKay KA, Baish ML, Boyle M 1999  (2018) Recommendation for the Entropy Sources Used for Random Bit 2000  Generation. (National Institute of Standards and Technology, Gaithersburg, 2001  MD), NIST Special Publication (SP) 800-90B. 2002  https://doi.org/10.6028/NIST.SP.800-90B 2003  [SP800-131A] Barker EB, Roginsky AL (2019) Transitioning the Use of Cryptographic 2004  Algorithms and Key Lengths. (National Institute of Standards and 2005  Technology, Gaithersburg, MD), NIST Special Publication (SP) 800-131A, 2006  Rev. 2. https://doi.org/10.6028/NIST.SP.800-131Ar2 2007  [WS19] Woodage J, Shumow D (2019) An Analysis of NIST SP 800-90A. In: 2008  Ishai Y, Rijmen V (eds) Advances in Cryptology – EUROCRYPT 2019. 2009  EUROCRYPT 2019. Lecture Notes in Computer Science, vol 11477. 2010  Springer, Cham. https://doi.org/10.1007/978-3-030-17656-3_6  2011  https://doi.org/10.6028/NIST.SP.800-38B https://doi.org/10.6028/NIST.SP.800-57pt1r5 https://doi.org/10.6028/NIST.SP.800-67r2 https://doi.org/10.6028/NIST.SP.800-90Ar1 https://doi.org/10.6028/NIST.SP.800-90Ar1 https://doi.org/10.6028/NIST.SP.800-90B https://doi.org/10.6028/NIST.SP.800-131Ar2 https://doi.org/10.1007/978-3-030-17656-3_6  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  59  Appendix A. Entropy vs. Security Strength (Informative) 2012  This section of the appendix compares and contrasts entropy and security strength. 2013  A.1. Entropy 2014  Suppose that an entropy source produces n-bit strings with m bits of entropy in each bitstring. This 2015  means that when an n-bit string is obtained from that entropy source, the best possible guess of the 2016  value of the string has a probability of no more than 2−m of being correct. 2017  Entropy can be thought of as a property of a probability distribution, like the mean or variance. 2018  Entropy measures the unpredictability or randomness of the probability distribution on bitstrings 2019  produced by the entropy source, not a property of any particular bitstring. However, the 2020  terminology is sometimes slightly abused by referring to a bitstring as having m bits of entropy. 2021  This simply means that the bitstring came from a source that ensures m bits of entropy in its output 2022  bitstrings. 2023  Because of the inherent variability in the process, predicting future entropy-source outputs does 2024  not depend on an adversary’s amount of computing power. 2025  A.2. Security Strength 2026  A deterministic cryptographic mechanism (such as one of the DRBGs defined in [SP800-90A]) 2027  has a security strength − a measure of how much computing power an adversary expects to need 2028  to defeat the security of the mechanism. If a DRBG has an s-bit security strength, an adversary 2029  who can make 2w computations of the underlying block cipher or hash function, where w < s, 2030  expects to have about a 2w−s probability of defeating the DRBG’s security. For example, an 2031  adversary who can perform 296 AES encryptions can expect to defeat the security of the CTR-2032  DRBG that uses AES-128 with a probability of about 2−32 (i.e., 296−128). 2033  A.3. A Side-by-Side Comparison 2034  Informally, one way of thinking of the difference between security strength and entropy is the 2035  following: suppose that an adversary somehow obtains the internal state of an entropy source (e.g., 2036  the state of all of the ring oscillators and any internal buffer). This might allow the adversary to 2037  predict the next few bits from the entropy source (assuming that there is some buffering of bits 2038  within the entropy source), but the entropy source outputs will once more become unpredictable 2039  to the adversary very quickly. For example, knowing what faces of the dice are showing on the 2040  craps table does not allow a player to successfully predict the next roll of the dice. 2041  In contrast, suppose that an adversary somehow obtains the internal state of a DRBG. Because the 2042  DRBG is deterministic, the adversary can then predict all future outputs from the DRBG until the 2043  next reseeding of the DRBG with a sufficient amount of entropy. 2044  An entropy source provides bitstrings that are hard for an adversary to guess correctly but usually 2045  have some detectable statistical flaws (e.g., they may have slightly biased bits, or successive bits 2046  may be correlated). However, a well-designed DRBG provides bitstrings that exhibit none of these 2047  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  60  properties. Rather, they have independent and identically distributed bits, with each bit taking on 2048  a value with a probability of exactly 0.5. These bitstrings are only unpredictable to an adversary 2049  who does not know the DRBG’s internal state. 2050  A.4. Entropy and Security Strength in this Recommendation 2051  In the RBG1 construction specified in Section 4, the DRBG is instantiated from either an RBG2(P) 2052  or an RBG3 construction. In order to instantiate the RBG1 construction at a security strength of s 2053  bits, this Recommendation requires the source RBG to support a security strength of at least s bits 2054  and provide a bitstring that is 3s/2 bits long for most of the DRBGs. However, for a CTR_DRBG 2055  without a derivation function, a bitstring that is s + 128 bits long is required. (Note that an RBG3 2056  construction supports any desired security strength.) 2057  In the RBG2 and RBG3 constructions specified in Sections 5 and 6, respectively, the DRBG within 2058  the construction is instantiated using a bitstring with a certain amount of entropy obtained from a 2059  validated entropy source.34 In order to instantiate the DRBG to support an s-bit security strength, 2060  a bitstring with at least 3s/2 bits of entropy is required for the instantiation of most of the DRBGs. 2061  Reseeding requires a bitstring with at least s bits of entropy. However, for a CTR_DRBG without 2062  a derivation function, a bitstring with exactly s + 128 full-entropy bits is required for instantiation 2063  and reseeding, either obtained directly from an entropy source that provides full-entropy output or 2064  from an entropy source via an approved (vetted) conditioning function (see Section 3.3). 2065  The RBG3 constructions specified in Section 6 are designed to provide full-entropy outputs but 2066  with a DRBG included in the design in case the entropy source fails undetectably. Entropy bits are 2067  possibly obtained from an entropy source via an approved (vetted) conditioning function. When 2068  the entropy source is working properly, an n-bit output from the RBG3 construction is said to 2069  provide n bits of entropy. The DRBG in an RBG3 construction is always required to support a 2070  256-bit security strength. If an entropy-source fails and the failure is undetected, the RBG3 2071  construction outputs are generated at a security strength of 256 bits. In this case, the security 2072  strength of a bitstring produced by the RBG is the minimum of 256 and its length (i.e., 2073  security_strength = min(256, length)). 2074  In conclusion, entropy sources and properly functioning RBG3 constructions provide output with 2075  entropy. RBG1 and RBG2 constructions provide output with a security strength that depends on 2076  the security strength of the RBG instantiation and the length of the output. Likewise, if the entropy 2077  source used by an RBG3 construction fails undetectably, the output is then dependent on the 2078  DRBG within the construction (an RBG(P) construction) to produce output at a security strength 2079  of 256 bits. 2080  Because of the difference between the use of “entropy” to describe the output of an entropy source 2081  and the use of “security strength” to describe the output of a DRBG, the term “randomness” is 2082  used as a general term to mean either “entropy” or “security strength,” as appropriate. A 2083  “randomness source” is the general term for an entropy source or RBG that provides the 2084  randomness used by an RBG. 2085  2086  34 However, note that the entropy-source output may be cryptographically processed by an approved conditioning function before being used.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  61  Appendix B. RBG Examples (Informative) 2087  Appendix B.1 discusses and provides an example of the direct access to a DRBG used by an RBG3 2088  construction.  2089  Appendices B.2 – B.6 provide examples of each RBG construction. Not shown in the figures: if 2090  an error that indicates an RBG failure (e.g., a noise source in the entropy source has failed) is 2091  reported, RBG operation is terminated (see Section 7.1.2). For these examples, all entropy sources 2092  are considered to be physical entropy sources. 2093  B.1. Direct DRBG Access in an RBG3 Construction 2094  An implementation may be designed so that the DRBG implementation used within an RBG3 2095  construction can be directly accessed by a consuming application35 using the same or separate 2096  instantiations from the instantiation used by the RBG3 construction (see the examples in Figure 2097  19). 2098  2099  Fig. 19. DRBG Instantiations 2100  In the leftmost example in Figure 19, the same internal state is used by the RBG3 construction and 2101  a directly accessible DRBG. The DRBG implementation is instantiated only once, and only a 2102  single state handle is obtained during instantiation (e.g., RBG3_state handle).36 Generation and 2103  35 Without using other components or functionality used by the RBG3 construction (see Sections 6.2 and 6.3).  36 Because only a single instantiation has been implemented, a state handle is not required.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  62  reseeding for RBG3 operations use RBG3 function calls (see Sections 6.2 and 6.3), while 2104  generation and reseeding for direct DRBG access use RBG2 function calls (see Section 5.2) with 2105  the RBG3_state_handle. Using the same instantiation for both RBG3 operation and direct access 2106  to the DRBG requires additional reseeding processes in the case of an RBG3(RS) construction 2107  (see Section 6.3.2). 2108  In the rightmost example in Figure 19, different internal states are used by the RBG3 construction 2109  and a directly accessible DRBG. The DRBG implementation is instantiated twice – once for RBG3 2110  operations and a second time for direct access to the DRBG. A different state handle needs to be 2111  obtained for each instantiation (e.g., RBG3_state_handle and DRBG_state_handle). Generation 2112  and reseeding for RBG3 operations use RBG3 function calls and RBG3_state_handle (see Sections 2113  6.2 and 6.3), while generation and reseeding for direct DRBG access use RBG2 function calls and 2114  DRBG_state_handle (see Section 5.2). 2115  Multiple directly accessible DRBGs may also be incorporated into an implementation by creating 2116  multiple instantiations. However, no more than one directly accessible DRBG should share the 2117  same internal state with the RBG3 construction (i.e., if n directly accessible DRBGs are required, 2118  either n or n− 1 separate instantiations are required). 2119  The directly accessed DRBG instantiations are in the same security boundary as the RBG3 2120  construction. When accessed directly (rather than operating as part of the RBG3 construction), the 2121  DRBG instantiations are considered to be operating as RBG2(P) constructions as discussed in 2122  Section 5. 2123  B.2. Example of an RBG1 Construction 2124  An RBG1 construction has access to a randomness source only during instantiation when it is 2125  seeded (see Section 4). For this example (see Figure 20), the DRBG used by the RBG1 construction 2126  and the randomness source reside in two different cryptographic modules with a secure channel 2127  connecting them during the instantiation process. Following DRBG instantiation, the secure 2128  channel is not available. For this example, the randomness source is an RBG2(P) construction (see 2129  Section 5) with a state handle of RBG2_state_handle. 2130  The targeted security strength for the RBG1 construction is 256 bits, so a DRBG from [SP800-2131  90A] that is able to support this security strength must be used (HMAC_DRBG using SHA-256 is 2132  used in this example). A personalization_string is provided during instantiation, as recommended 2133  in Section 2.4.1. 2134  As discussed in Section 4, the randomness source (i.e., the RBG2(P) construction for this example) 2135  is not available during normal operation, so reseeding and prediction resistance cannot be 2136  provided. 2137  This example provides an RBG that is instantiated at a security strength of 256 bits. 2138  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  63  2139  Fig. 20. RBG1 Construction Example 2140  B.2.1. Instantiation of the RBG1 Construction 2141  A physically secure channel is required to transport the entropy bits from the randomness source 2142  (the RBG2(P) construction) to the HMAC_DRBG during instantiation; an example of an RBG2(P) 2143  construction is provided in Appendix B.4. Thereafter, the randomness source and the secure 2144  channel are no longer available. 2145  The HMAC_DRBG is instantiated using the Instantiate_function, as specified in Section 2.8.1.1, 2146  with the following call: 2147  (status, RBG1_state_handle) = Instantiate_function (256, prediction_resistance_flag = 2148  FALSE, “Device 7056”). 2149  A security strength of 256 bits is requested for the HMAC_DRBG used in the RBG1 2150  construction. 2151  Since an RBG1 construction does not provide prediction resistance (see Section 4), the 2152  prediction_resistance_flag is set to FALSE.  2153  The personalization string to be used for this example is “Device 7056.” 2154  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  64  The Get_randomness-source_input call in the Instantiate_function results in a single request 2155  being sent to the randomness source to generate bits to establish the security strength (see Section 2156  4.2.1, item 2.a). 2157  The HMAC_DRBG requests 3s/2 = 384 bits from the randomness source, where s = the 2158  256-bit targeted security strength for the DRBG: 2159  (status, randomness_bitstring) = Generate_function(RBG2_state_handle, 384, 256, 2160  prediction_resistance_request = TRUE). 2161  This call requests the randomness source (indicated by RBG2_state_handle) to generate 2162  384 bits at a security strength of 256 bits for the randomness input required for seeding the 2163  DRBG in the RBG1 construction. Prediction resistance is requested so that the randomness 2164  source (i.e., the RBG2(P) construction) is reseeded before generating the requested 384 2165  bits (see Requirement 17 in Section 4.4.1). Note that optional additional_input is not 2166  provided for this example. 2167  2. The RBG2(P) construction checks that the request can be handled (e.g., whether a security 2168  strength of 256 bits is supported). If the request is valid, 384 bits are generated after 2169  reseeding the RBG2(P) construction, the internal state of the RBG2(P) construction is 2170  updated, and status = SUCCESS is returned to the RBG1 construction along with the newly 2171  generated randomness_bitstring. 2172  If the request is determined to be invalid, status = FAILURE is returned along with a Null 2173  bitstring as the randomnessy_bitstring. The FAILURE status is subsequently returned from 2174  the Instantiate_function along with a Null value as the RBG1_state_handle, and the 2175  instantiation process is terminated. 2176  If a valid randomness_bitstring is returned from the RBG2(P) construction, the 2177  randomness_bitstring is used along with the personalization_string to create the seed to 2178  instantiate the DRBG (see [SP800-90A]).37 If the instantiation is successful, the internal state is 2179  established, a status of SUCCESS is returned from the Instantiate_function with a state handle 2180  of RBG1_state_handle, and the RBG can be used to generate pseudorandom bits. 2181  B.2.2. Generation by the RBG1 Construction 2182  Assuming that the HMAC_DRBG in the RBG1 construction has been instantiated (see Appendix 2183  B.2.1), pseudorandom bits are requested from the RBG by a consuming application using the 2184  Generate_function call as specified in Section 2.8.1.2: 2185  (status, returned_bits) = Generate_function (RBG1_state_handle, 2186  requested_number_of_bits, requested_security_strength, prediction_resistance_request = 2187  FALSE, additional_input). 2188  RBG1_state_handle was returned as the state handle during instantiation (see Appendix 2189  B.2.1). 2190  37 The first 256 bits of the randomness_bitstring are used as the randomness input, and the remaining 128 bits are used as the nonce in SP 800-90A,  Revision 1. A future update of SP 800-90A will revise this process by using the entire 384-bit string as the randomness input.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  65  The requested_security_strength may be any value that is less than or equal to 256 (the 2191  instantiated security strength recorded in the DRBG’s internal state). 2192  Since prediction resistance cannot be provided in an RBG1 construction, 2193  prediction_resistance_request is set to FALSE. (Note that the prediction_resistance 2194  request input parameter could be omitted from the Generate_function call for this 2195  example).  2196  Any additional input is optional.  2197  The Generate_function returns an indication of the status. If status = SUCCESS, the 2198  requested_number_of_bits are provided as the returned_bits to the consuming application. If 2199  status = FAILURE, returned_bits is an empty (i.e., null) bitstring. 2200  B.3. Example Using Sub-DRBGs Based on an RBG1 Construction 2201  This example uses an RBG1 construction to instantiate two sub-DRBGs: sub-DRBG1 and sub-2202  DRBG2 (see Figure 21). 2203  2204  Fig. 21. Sub-DRBGs Based on an RBG1 Construction 2205  The instantiation of the RBG1 construction is discussed in Appendix B.2. The RBG1 construction 2206  that is used as the source RBG includes an HMAC_DRBG and has been instantiated to provide a 2207  security strength of 256 bits. The state handle for the construction is RBG1_state_handle. 2208  For this example, Sub-DRBG1 will be instantiated to provide a security strength of 128 bits, and 2209  Sub-DRBG2 will be instantiated to provide a security strength of 256 bits. Both sub-DRBGs use 2210  the same DRBG algorithm as the RBG1 construction.  2211  Neither the RBG1 construction nor the sub-DRBGs can be reseeded or provide prediction 2212  resistance. 2213  This example provides the following capabilities: 2214  • Access to the RBG1 construction to provide output generated at a security strength of 256 2215  bits (see Appendix B.2 for the RBG1 example) 2216  • Access to one sub-DRBG (Sub-DRBG1) that provides output for an application that 2217  requires a security strength of no more than 128 bits 2218  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  66  • Access to a second sub-DRBG (Sub-DRBG2) that provides output for a second application 2219  that requires a security strength of 256 bits 2220  B.3.1. Instantiation of the Sub-DRBGs 2221  Each sub-DRBG is instantiated using output from an RBG1 construction that is discussed in 2222  Appendix 62B.2. 2223  B.3.1.1. Instantiating Sub-DRBG1 2224  Sub-DRBG1 is instantiated using the following Instantiate_function call (see Section 2.8.1.1): 2225  (status, sub-DRBG1_state_handle) = Instantiate_function (128, prediction_resistance_flag 2226  = FALSE, “Sub-DRBG App 1”). 2227  • A security strength of 128 bits is requested from the DRBG indicated by the 2228  RBG1_state_handle. 2229  • Setting “prediction_resistance_flag = FALSE” indicates that a consuming application will 2230  not be allowed to request prediction resistance. Optionally, the parameter can be omitted. 2231  • The personalization string to be used for sub-DRBG1 is “Sub-DRBG App 1.” 2232  • The returned state handle for sub-DRBG1 will be sub-DRBG1_state_handle. 2233  The randomness input for establishing the 128-bit security strength of sub-DRBG1 is requested 2234  using the following Generate_function call to the RBG1 construction): 2235  (status, randomness-source_input) = Generate_function(RBG1_state_handle, 192, 128, 2236  prediction_resistance_request = FALSE, additional_input). 2237  • 192 bits are requested from the source RBG (indicated by RBG1_state_handle) at a security 2238  strength of 128 bits (192 = 128 + 64 = 3s/2). 2239  • Setting “prediction_resistance_flag = FALSE” indicates that the source RBG (the RBG1 2240  construction) will not need to reseed itself before generating the requested output. 2241  Alternatively, the parameter can be omitted. 2242  • Additional input is optional. 2243  If status = SUCCESS is returned from the Generate_function, the HMAC_DRBG in sub-DRBG1 2244  is seeded using the randomness-source_input obtained from the RBG1 construction and the 2245  personalization_string provided in the Instantiate_function call (i.e., “Sub-DRBG App 1”). The 2246  internal state is recorded for Sub-DRBG1 (including the 128-bit security strength), and status = 2247  SUCCESS is returned from the Instantiate_function along with a state handle of sub-2248  DRBG1_state_handle. 2249  If status = FAILURE is returned from the Generate_function call, then the internal state is not 2250  created, status = FAILURE and a Null state handle are returned from the Instantiate_function, 2251  and the sub-DRBG1 cannot be used to generate bits. 2252  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  67  B.3.1.2. Instantiating Sub-DRBG2 2253  Sub-DRBG2 is instantiated using the following Instantiate_function call (see Section 2.8.1.1): 2254  (status, sub-DRBG2_state_handle) = Instantiate_function (256, prediction_resistance_flag = 2255  FALSE, “Sub-DRBG App 2”). 2256  • A security strength of 256 bits is requested from the randomness source (the DRBG 2257  construction indicated by RBG1_state_handle). 2258  • Setting “prediction_resistance_flag = FALSE” indicates that a consuming application will 2259  not be allowed to request prediction resistance. Optionally, the parameter can be omitted. 2260  • The personalization string to be used for sub-DRBG2 is “Sub-DRBG App 2.” 2261  • The returned state handle will be sub-DRBG2_state_handle. 2262  The randomness input for establishing the 256-bit security strength of sub-DRBG2 is requested 2263  using the following Generate_function call to the RBG1 construction): 2264  (status, randomness-source_input) = Generate_function(RBG1_state_handle, 384, 256, 2265  prediction_resistance_request = FALSE, additional_input). 2266  • 384 bits are requested from the source RBG (indicated by RBG1_state_handle) at a security 2267  strength of 256 bits (384 = 256 + 128 = 3s/2). 2268  • Setting “prediction_resistance_flag = FALSE” indicates that the source RBG (the RBG1 2269  construction) will not need to reseed itself before generating the requested output. 2270  Alternatively, the parameter can be omitted. 2271  • Additional input is optional. 2272  If status = SUCCESS is returned from the Generate_function, the HMAC_DRBG in sub-DRBG2 2273  is seeded using the randomness-source_input obtained from the RBG1 construction and the 2274  personalization_string provided in the Instantiate_function call (i.e., “Sub-DRBG App 2”). The 2275  internal state is recorded for Sub-DRBG2 (including the 256-bit security strength), and status = 2276  SUCCESS is returned from the Instantiate_function along with a state handle of sub-2277  DRBG2_state_handle. 2278  If status = FAILURE is returned from the Generate_function call, then the internal state is not 2279  created, status = FAILURE and a Null state handle are returned from the Instantiate_function, 2280  and the sub-DRBG2 cannot be used to generate bits. 2281  B.3.2. Pseudorandom Bit Generation by Sub-DRBGs 2282  Assuming that the sub-DRBG has been successfully instantiated (see Appendix B.3.1), 2283  pseudorandom bits are requested from the sub-DRBG by a consuming application using the 2284  Generate_function call as specified in Section 2.8.1.2: 2285  (status, returned_bits) = Generate_function(state_handle, requested_number_of_bits, 2286  security_strength, prediction_resistance_request, additional input), 2287  where: 2288  • For sub_DRBG1, state_handle = sub-DRBG1_state_handle; 2289  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  68  For sub-DRBG2, state_handle = sub-DRBG2_state_handle; 2290  • requested_number_of_bits must be ≤ 219 (see SP 800-90A for HMAC_DRBG); 2291  • For sub_DRBG1, security strength must be ≤ 128; 2292  • For sub_DRBG2, security strength must be ≤ 256; 2293  • prediction_resistance_request = FALSE (or is omitted); and 2294  • additional_input is optional. 2295  B.4. Example of an RBG2(P) or RBG2(NP) Construction 2296  For this example of an RBG2 construction, no conditioning function is used, and only a single 2297  DRBG instantiation will be used (see Figure 22), so a state handle is not needed. Full-entropy 2298  output is not provided by the entropy source, which may be either a physical or non-physical 2299  entropy source. 2300  2301  Fig. 22. RBG2 Example 2302  The targeted security strength is 256 bits, so a DRBG from [SP800-90A] that can support this 2303  security strength must be used; HMAC_DRBG using SHA-256 is used in this example. A 2304  personalization_string may be provided, as recommended in Section 2.4.1. Reseeding and 2305  prediction resistance are supported and will be available on demand. 2306  This example provides the following capabilities:  2307  • An RBG instantiated at a security strength of 256 bits, and 2308  • Access to an entropy source to provide prediction resistance. 2309  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  69  B.4.1. Instantiation of an RBG2 Construction 2310  The DRBG in the RBG2 construction is instantiated using an Instantiate_function call (see 2311  Section 2.8.1.1): 2312  (status) = Instantiate_function (256, prediction_resistance_flag = TRUE, “RBG2 42”). 2313  • Since there is only a single instantiation, a state_handle is not used for this example. 2314  • Using “prediction_resistance_flag = TRUE”, the RBG is notified that prediction resistance 2315  may be requested in subsequent Generate_function calls. 2316  • The personalization string to be used for this example is “RBG2 42.” 2317  The entropy for establishing the security strength (s) of the DRBG (i.e., s = 256 bits) is requested 2318  using the following Get_ES_Bitstring call to the entropy source (see Section 2.8.2.2 and item 2 2319  in Section 5.2.1): 2320  (status, entropy_bitstring) = Get_ES_Bitstring(384), 2321  where 3s/2 = 384 bits of entropy are requested from the entropy source. 2322  If status = SUCCESS is returned from the Get_ES_Bitstring call, the HMAC_DRBG is seeded 2323  using entropy_bitstring, and the personalization_string is “RBG2 42.” The internal state is 2324  recorded (including the security strength of the instantiation), and status = SUCCESS is returned 2325  to the consuming application by the Instantiate_function. 2326  If status = FAILURE is returned from the Get_ES_Bitstring call, then the internal state is not 2327  created, status = FAILURE and a Null state handle are returned by the Instantiate_function to 2328  the consuming application, and the RBG cannot be used to generate bits. 2329  B.4.2. Generation in an RBG2 Construction 2330  Assuming that the RBG has been successfully instantiated (see Appendix B.4.1), pseudorandom 2331  bits are requested from the RBG by a consuming application using the Generate_function call as 2332  specified in Section 2.8.1.2: 2333  (status, returned_bits) = Generate_function(requested_number_of_bits, security_strength, 2334  prediction_resistance_request, additional input). 2335  • Since there is only a single instantiation of the HMAC_DRBG, a state_handle was not 2336  returned from the Instantiate_function (see Appendix B.4.1) and is not used during the 2337  Generate_function call. 2338  • The requested_security_strength may be any value that is less than or equal to 256 (the 2339  instantiated security strength recorded in the HMAC_DRBG’s internal state). 2340  • prediction_resistance_request = TRUE if prediction resistance is requested and FALSE 2341  otherwise. 2342  • Additional input is optional. 2343  If prediction resistance is requested, a reseed of the HMAC_DRBG is requested by the 2344  Generate_function before the requested bits are generated (see Appendix B.4). If status = 2345  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  70  FAILURE is returned from the Reseed_function, status = FAILURE is also returned to the 2346  consuming application by the Generate_function, along with a Null value as the returned_bits. 2347  Whether or not prediction resistance is requested, a status indication is returned from the 2348  Generate_function call. If status = SUCCESS, a bitstring of at least requested_number_of_bits 2349  is provided as the returned_bits to the consuming application. If status = FAILURE, returned_bits 2350  is an empty bitstring. 2351  B.4.3. Reseeding an RBG2 Construction 2352  The HMAC_DRBG will be reseeded 1) if explicitly requested by the consuming application, 2) 2353  whenever generation with prediction resistance is requested by the Generate_function, or 3) 2354  automatically during a Generate_function call at the end of the DRBG’s designed seedlife (see 2355  the Generate_function specification in [SP800-90A)]. 2356  The Reseed_function call, as specified in Section 2.8.1.3, is: 2357  status = Reseed_function(additional_input). 2358  • Since there is only a single instantiation of the HMAC_DRBG, a state_handle was not 2359  returned from the Instantiate_function (see Appendix B.4.1) and is not used during the 2360  Reseed_function call. 2361  • The additional_input is optional.  2362  Since entropy is obtained directly from the entropy source (case 2 in Section 5.2.3), the 2363  implementation has replaced the Get_randomness-source_input call used by the 2364  Reseed_function in [SP800-90A] with a Get_ES_Bitstring call. 2365  The HMAC_DRBG is reseeded with a security strength of 256 bits as follows: 2366  (status, entropy_bitstring) = Get_ES_Bitstring(256). 2367  If status = SUCCESS is returned by Get_ES_Bitstring, the entropy_bitstring contains at least 256 2368  bits of entropy and is at least 256 bits long. Status = SUCCESS is returned to the calling application 2369  (e.g., the Generate_function) by the Reseed_function. 2370  If status = FAILURE, entropy_bitstring is an empty (e.g., null) bitstring. The HMAC_DRBG is 2371  not reseeded, and status= FAILURE is returned from Reseed_function to the calling application. 2372  B.5. Example of an RBG3(XOR) Construction 2373  This construction is specified in Section 6.2 and requires a DRBG and a source of full-entropy 2374  bits. For this example, the entropy source itself does not provide full-entropy output, so the vetted 2375  Hash conditioning function listed in [SP800-90B] using SHA-256 is used as an external 2376  conditioning function. 2377  The Hash_DRBG specified in [SP800-90A] will be used as the DRBG, with SHA-256 used as the 2378  underlying hash function for the DRBG (note the use of SHA-256 for both the Hash_DRBG and 2379  the vetted conditioning function). The DRBG will obtain input directly from the RBG’s entropy 2380  source without conditioning (as shown in Figure 23), since bits with full entropy are not required 2381  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  71  for input to the DRBG, even though full-entropy bits are required for input to the XOR operation 2382  (shown as “⊕” in the figure) from the entropy source via the conditioning function. 2383  2384  Fig. 23. RBG3(XOR) Construction Example 2385  As specified in Section 6.2, the DRBG must be instantiated (and reseeded) at 256 bits, which is 2386  possible for SHA-256. 2387  In this example, only a single instantiation is used, and a personalization string is provided during 2388  instantiation. The DRBG is not directly accessible. 2389  Calls are made to the RBG using the RBG3(XOR) calls specified in Section 6.2. 2390  The Hash_DRBG itself is not directly accessible.  2391  This example provides the following capabilities: 2392  • Full-entropy output by the RBG, 2393  • Fallback to the security strength provided by the Hash_DRBG (256 bits) if the entropy 2394  source has an undetected failure, and 2395  • Access to an entropy source to instantiate and reseed the Hash_DRBG. 2396  B.5.1. Instantiation of an RBG3(XOR) Construction 2397  The Hash_DRBG is instantiated using: 2398  status = RBG3(XOR)_DRBG_Instantiate(“RBG3(XOR)”), 2399  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  72  • Since the DRBG is not directly accessible, there is no need for a separate instantiation, so 2400  there is also no need for the return of a state handle. 2401  • The personalization string for the DRBG is “RBG3(XOR).” 2402  The RBG3(XOR)_DRBG_Instantiate function in Section 6.2.1.1 uses a DRBG 2403  Instantiate_function to seed the Hash_DRBG: 2404  (status) = Instantiate_function(256, prediction_resistance_flag = FALSE, 2405  personalization_string). 2406  • Since the DRBG is not directly accessible, there is no need for a separate instantiation, so 2407  there is also no need for the return of a state handle. 2408  • The DRBG is instantiated at a security strength of 256 bits. 2409  • The DRBG is notified that prediction resistance is not required using 2410  prediction_resistance_flag = FALSE. Since the DRBG will not be accessed directly, 2411  prediction_resistance will never be requested. Optionally, the implementation could omit 2412  this parameter. 2413  • The personalization string for the DRBG is “RBG3(XOR).” It was provided in the 2414  RBG3(XOR)_DRBG_Instantiate call. 2415  Section 6.2.1.1 refers to Section 5.2.1 for further information on instantiating the DRBG. 2416  The entropy for establishing the security strength (s) of the Hash_DRBG (i.e., where s = 256 bits) 2417  is requested using the following Get_ES_Bitstring call: 2418  (status, entropy_bitstring) = Get_ES_Bitstring(384), 2419  where 3s/2 = 384 bits of entropy are requested from the entropy source. 2420  If status = SUCCESS is returned from the Get_ES_Bitstring call, the Hash_DRBG is seeded 2421  using the entropy_ bitstring and the personalization_string (“RBG3(XOR)”). The internal state is 2422  recorded (including the 256-bit security strength of the instantiation), and status = SUCCESS is 2423  returned to the consuming application by the Instantiate_function. The RBG can be used to 2424  generate full-entropy bits. 2425  If status = FAILURE is returned from the Get_ES_Bitstring call, status = FAILURE and a Null 2426  state handle are returned to the consuming application from the Instantiate_function. `The 2427  Hash_DRBG’s internal state is not established, and the RBG cannot be used to generate bits. 2428  B.5.2. Generation by an RBG3(XOR) Construction 2429  Assuming that the Hash_DRBG has been instantiated (see Appendix B.4.1), the RBG can be called 2430  by a consuming application to generate output with full entropy. 2431  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  73  B.5.2.1. Generation 2432  Let n indicate the requested number of bits to generate. The construction in Section 6.3.1.2 is used 2433  as follows: 2434  RBG3(XOR)_Generate: 2435  Input: integer n, string additional_input. 2436  Output: integer status, bitstring returned_bits. 2437  Process: 2438  1. (status, ES_bits) = Get_conditioned_full-entropy_input(n). 2439  2. If (status ≠ SUCCESS), then return(status, Null). 2440  3. (status, DRBG_bits) = Generate_function(n, 256, prediction_resistance_request = 2441  FALSE, additional_input). 2442  4. If (status ≠ SUCCESS), then return(status, Null). 2443  5. returned_bits = ES_bits ⊕ DRBG_bits. 2444  6. Return SUCCESS, returned_bits. 2445  Note that the state_handle parameter is not used in the RBG3(XOR)_Generate call or the 2446  Generate_function call (in step 3) for this example since a state_handle was not returned from 2447  the RBG3(XOR)_DRBG_Instantiate function (see Appendix B.5.1). 2448  In step 1, the entropy source is accessed via the conditioning function using the 2449  Get_conditioned_full-entropy_input routine (see Appendix B.5.2.2) to obtain n bits with full 2450  entropy. 2451  Step 2 checks that the Get_conditioned_full-entropy_input call in step 1 was successful. If it 2452  was not successful, the RBG3(XOR)_Generate function is aborted, returning status ≠ SUCCESS 2453  to the consuming application along with a Null bitstring as the returned_bits. 2454  Step 3 calls the Hash_DRBG to generate n bits to be XORed with the n-bit output of the entropy 2455  source (ES_Bits; see step 1) in order to produce the RBG output. Note that a request for prediction 2456  resistance is not made in the Generate_function call (i.e., prediction_resistance_request = 2457  FALSE). Optionally, this parameter could be omitted since prediction resistance is never 2458  requested. 2459  Step 4 checks that the Generate_function invoked in step 3 was successful. If it was not 2460  successful, the RBG3(XOR)_Generate function is aborted, returning status ≠ SUCCESS to the 2461  consuming application along with a Null bitstring as the returned_bits. 2462  If step 3 returns an indication of success, the ES_bits returned in step 1 and the DRBG_bits obtained 2463  in step 3 are XORed together in step 5. The result is returned to the consuming application in step 2464  6. 2465  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  74  B.5.2.2. Get_conditioned_full-entropy_input Function 2466  The Get_conditioned_full-entropy_input construction is specified in Section 3.3.2. For this 2467  example, the routine becomes the following: 2468  Get_conditioned_full_entropy_ input: 2469  Input: integer n. 2470  Output: integer status, bitstring Full-entropy_bitstring. 2471  Process: 2472  1.  temp = the Null string. 2473  2. ctr = 0. 2474  3. While ctr < n, do 2475  3.1  (status, entropy_bitstring) = Get_ES_Bitstring (320). 2476  3.2 If (status ≠ SUCCESS), then return (status, invalid_string). 2477  3.3 conditioned_output = HashSHA_256(entropy_bitstring). 2478  3.4 temp =temp || conditioned_output. 2479  3.5 ctr = ctr + 256. 2480  4. Full-entropy_bitstring = leftmost(temp, n). 2481  5. Return (SUCCESS, Full-entropy_bitstring). 2482  Steps 1 and 2 initialize the temporary bitstring (temp) for holding the full-entropy bitstring being 2483  assembled, and the counter (ctr) that counts the number of full-entropy bits produced so far. 2484  Step 3 obtains and processes the entropy for each iteration. 2485  • Step 3.1 requests 320 bits from the entropy source(s) (i.e., output_len + 64 bits, where 2486  output_len = 256 for SHA-256). 2487  • Step 3.2 checks whether or not the status returned in step 3.1 indicated a success. If the 2488  status did not indicate a success, the status is returned along with an invalid (e.g., Null) 2489  bitstring as the Full-entropy_bitstring. 2490  • Step 3.3 invokes the Hash conditioning function (see Section 3.3.1.2) using SHA-256 for 2491  processing the entropy_bitstring obtained from step 3.1. 2492  • Step 3.4 concatenates the conditioned_output received in step 3.3 to the temporary bitstring 2493  (temp), and step 3.5 increments the counter for the number of full-entropy bits that have 2494  been produced so far. 2495  After at least n bits have been produced in step 3, step 4 selects the leftmost n bits of the temporary 2496  string (temp) to be returned as the bitstring with full entropy. 2497  Step 5 returns the result from step 4 (Full-entropy_bitstring). 2498  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  75  B.5.3. Reseeding an RBG3(XOR) Construction 2499  The Hash_DRBG must be reseeded at the end of its designed seedlife and may be reseeded on 2500  demand (e.g., by the consuming application). Reseeding will be automatic whenever the end of 2501  the DRBG’s seedlife is reached during a Generate_function call (see [SP800-90A]). For this 2502  example, whether reseeding is done automatically during a Generate_function call or is 2503  specifically requested by a consuming application, the Reseed_function call is: 2504  status = Reseed_function(additional_input). 2505  • The state_handle parameter is not used in the Reseed_function call since a state_handle 2506  was not returned from the RBG3(XOR)_DRBG_Instantiate function (see Appendix 2507  B.5.1). 2508  • The security strength for reseeding the Hash_DRBG is recorded in the internal state as 256 2509  bits. 2510  • Additional input is optional. 2511  Section 6.3.1.3 refers to Section 5.2.3 for reseeding the Hash_DRBG. Since entropy is obtained 2512  directly from the entropy source and no conditioning function is used (case 2 in Section 6.3.2), the 2513  implementation has replaced the Get_randomness-source_input call used by the 2514  Reseed_function in [SP800-90A] with a Get_ES_Bitstring call. 2515  The Hash_DRBG is reseeded with a security strength of 256 bits as follows: 2516  (status, entropy_bitstring) = Get_ES_Bitstring(256). 2517  If status = SUCCESS is returned by the Get_ES_Bitstring call, entropy_bitstring consists of at 2518  least 256 bits that contain at least 256 bits of entropy. These bits are used to reseed the 2519  Hash_DRBG. Status = SUCCESS is then returned to the calling application by the 2520  Reseed_function. 2521  If status = FAILURE, entropy_bitstring is an empty (e.g., null) bitstring. The Hash_DRBG is not 2522  reseeded, and status ≠ SUCCESS is returned from the Reseed_function to the calling application 2523  (e.g., the Generate_function). 2524  B.6. Example of an RBG3(RS) Construction 2525  This construction is specified in Section 6.3 and requires an entropy source and a DRBG (see the 2526  left half of Figure 24 outlined in green). The DRBG is directly accessible using the same 2527  instantiation that is used by the RBG3(RS) construction (i.e., they share the same internal state). 2528  When accessed directly, the DRBG behaves as an RBG2(P) construction (see the right half of 2529  Figure 24 outlined in blue). 2530  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  76  2531  Fig. 24. RBG3(RS) Construction Example 2532  The CTR_DRBG specified in [SP800-90A] will be used as the DRBG with AES-256 used as the 2533  underlying block cipher for the DRBG. The CTR_DRBG will be implemented using a derivation 2534  function (located inside the CTR_DRBG implementation). In this case, full-entropy output will 2535  not be required for the entropy source (see [SP800-90A]). However, an alternative example could 2536  use the CTR_DRBG without a derivation function. In that case, either the entropy source would 2537  need to provide full-entropy output, or a vetted conditioning function would be required to 2538  condition the entropy to provide full-entropy bits before providing it to the DRBG. 2539  As specified in Section 6.2, a DRBG used as part of the RBG must be instantiated (and reseeded) 2540  at a security strength of 256 bits (which AES-256 can support). 2541  For this example, the DRBG has a fixed security strength (256 bits), which is hard-coded into the 2542  implementation so will not be used as an input parameter. 2543  Calls are made to the RBG as specified in Section 6.3.1. Calls made to the directly accessible 2544  DRBG (part of a RBG2(P) construction) use the RBG calls specified in Section 5.2. Since an 2545  entropy source is always available, the directly accessed DRBG can be reseeded and support 2546  prediction resistance. 2547  If the entropy source produces output at a slow rate, a consuming application might call the 2548  RBG3(RS) construction only when full-entropy bits are required, obtaining all other output from 2549  the directly accessible DRBG. 2550  This example provides the following capabilities: 2551  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  77  • Full-entropy output by the RBG3(RS) construction, 2552  • Fallback to the security strength of the RBG3(RS)’s DRBG instantiation (256 bits) if the 2553  entropy source has an undetected failure, 2554  • Direct access to an RBG2(P) construction with a security strength of 256 bits for faster 2555  output when full-entropy output is not required, 2556  • Access to an entropy source to instantiate and reseed the DRBG, and 2557  • Prediction resistance support for the directly accessed DRBG. 2558  B.6.1. Instantiation of an RBG3(RS) Construction 2559  Instantiation for this example consists of the instantiation of the CTR_DRBG used by the 2560  RBG3(RS) construction. 2561  The DRBG is initialized as follows: 2562  (status, RBG3(RS)_state_handle) = RBG3(RS)_DRBG_Instantiate(“RBG3(RS) 2021”). 2563  • “RBG3(RS) 2021” is to be used as the personalization string for the DRBG instantiation 2564  used in the RBG3(RS) construction. 2565  • RBG3(RS)_state_handle is returned as the state handle for the DRBG instantiation used 2566  by the RBG3(RS) construction. 2567  Appendices B.6.2 and B.6.3 will show the differences between the operation of the RBG3(RS) 2568  and RBG2(P) constructions. 2569  B.6.2. Generation by an RBG3(RS) Construction 2570  Assuming that the DRBG instantiation for the RBG3(RS) construction has been instantiated (see 2571  Appendix B.6.1), the RBG can be invoked by a consuming application to generate outputs with 2572  full entropy. The RBG3(RS)_Generate construction in Section 6.3.1.2.1 is invoked using 2573  (status, returned_bits) = RBG3(RS)_Generate(RBG3(RS)_state_handle, n, 2574  additional_information). 2575  • The RBG3(RS)_state_handle (obtained during instantiation; see Appendix B.6.1) is used 2576  to access the internal state information for the DRBG instantiation for the RBG3(RS) 2577  construction. 2578  • The consuming application requests n bits. 2579  • The input of additional_information is optional. 2580  The process is specified in Section 6.3.1.2.1. The state handle in the Generate_function is 2581  RBG3(RS)_state_handle, which was obtained during instantiation (see Appendix B.6.1). 2582  B.6.3. Generation by the Directly Accessible DRBG 2583  Assuming that the DRBG has been instantiated (see Appendix B.6.1), it can be accessed directly 2584  by a consuming application in the same manner as the RBG2(P) example in Appendix B.4.2 using 2585  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  78  the RBG3(RS)_state_handle obtained during instantiation (see Appendix B.6.1) and using a 2586  Generate_function call: 2587  (status, returned_bits) = Generate_function(RBG3(RS)_state_handle, n, 2588  prediction_resistance_request, additional_input). 2589  Note that the security strength parameter (256) was omitted since its value has been hard coded. 2590  Requirement 2 in Section 6.3.2 requires that the DRBG be reseeded whenever a request for 2591  generation by a directly accessible DRBG follows a request for generation by the RBG3(RS) 2592  construction. For this example, the internal state includes an indication about whether the last use 2593  of the DRBG was as part of the RBG3(RS) construction or was directly accessible. If the 2594  Generate_function (above) does not include a request for prediction resistance (e.g., 2595  prediction_resistance_request was not set to TRUE), then the DRBG will be reseeded anyway 2596  using the entropy source before generating output if the previous use of the DRBG was part of the 2597  RBG3(RS) construction. 2598  B.6.4. Reseeding a DRBG 2599  When operating as part of the RBG3(RS) construction, the Reseed_function is invoked one or 2600  more times to produce full-entropy output when the RBG3(RS)_Generate function is invoked by 2601  a consuming application. 2602  When operating as part of the RBG2(P) construction (the directly accessible DRBG), the DRBG 2603  is reseeded 1) if explicitly requested by the consuming application, 2) automatically whenever a 2604  generation with prediction resistance is requested during a direct access of the DRBG (see 2605  Appendix B.6.3), 3) whenever the previous use of the DRBG was by the RBG3(RS)_Generate 2606  function (see Appendix B.6.2), or 4) automatically during a Generate_function call at the end of 2607  the seedlife of the RBG2(P) construction (see the Generate_function specification in [SP800-2608  90A]). 2609  The Reseed_function call is: 2610  status = Reseed_function(RBG3(RS)_state_handle, additional_input). 2611  • The state_handle is RBG3(RS)_state handle, and 2612  • additional_input is optional.38 2613  The DRBG is reseeded with a security strength of 256 bits as follows: 2614  (status, entropy_bitstring) = Get_ES_Bitstring(256). 2615  If status = SUCCESS is returned by Get_ES_Bitstring, entropy_bitstring consists of at least 256 2616  bits containing at least 256 bits of entropy. Status = SUCCESS is returned to the calling application 2617  by the Reseed_function. 2618  38 Note that when the RBG3(RS) Generate function uses a Hash_DRBG, HMAC_DRBG, or CTR_DRBG with no derivation function and Method  A, whereby 64 bits of additional entropy are required to produce output_len bits with full entropy (see Section 7.3.1,.2.1, step 3.1), the additional  64 bits of entropy obtained in step 3.1.1 is provided to the Generate_function (in step 3.1.3) with prediction requested. In Section 9.3 of SP 800- 90A, the Generate_function reseeds the DRBG when prediction resistance is requested using entropy from the entropy source and any additional  input that is provided – the additional 64 bits of entropy, in this case.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  79  If status ≠ SUCCESS (e.g., the entropy source has failed), entropy_bitstring is an empty (e.g., null) 2619  bitstring, the DRBG is not reseeded, and a FAILURE status is returned from Reseed_function to 2620  the calling application (e.g., the Generate_function). 2621  2622  Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG 2623  C.1. Background and Scope 2624  The CTR_DRBG, specified in [SP800-90A], uses the block cipher AES and has two versions that 2625  may be implemented: with or without a derivation function. 2626  When a derivation function is not used, SP 800-90A requires the use of bitstrings with full entropy 2627  for instantiating and reseeding a CTR_DRBG. This addendum permits the use of an RBG 2628  compliant with SP 800-90C to provide the required seed material for the CTR_DRBG when 2629  implemented as specified in SP 800-90C (see Appendix C.2). 2630  When a derivation function is used in a CTR_DRBG implementation, SP 800-90A specifies the 2631  use of the block cipher derivation function. This addendum modifies the requirements in SP 800-2632  90A for the CTR_DRBG by specifying two additional derivation functions that may be used 2633  instead of the block cipher derivation function (see Appendix C.3). 2634  C.2. CTR_DRBG without a Derivation Function 2635  When a derivation function is not used, SP 800-90A requires that seedlen full-entropy bits be 2636  provided as the randomness input (e.g., from an entropy source that provides full-entropy output), 2637  where seedlen is the length of the key to be used by the CTR_DRBG plus the length of the output 2638  block.39 SP 800-90C includes an approved method for externally conditioning the output of an 2639  entropy source to provide a bitstring with full entropy when using an entropy source that does not 2640  provide full-entropy output. 2641  SP 800-90C also permits the use of seed material from an RBG when the DRBG to be instantiated 2642  and reseeded is implemented and used as specified in SP 800-90C. 2643  C.3. CTR_DRBG using a Derivation Function 2644  When a derivation function is used within a CTR_DRBG, SP 800-90A specifies the use of the 2645  Block_cipher_df included in that document during instantiation and reseeding to adjust the length 2646  of the seed material to seedlen bits, where  2647  seedlen = the security strength + the block length. 2648  For AES, seedlen = 256, 320 or 384 bits (see [SP800-90A], Rev. 1). During generation, the length 2649  of any additional input provided during the generation request is adjusted to seedlen bits as well 2650  (see SP 800-90A). 2651  39 128 bits for AES.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  80  Two alternative derivation functions are specified in Appendices C.3.2 and C.3.3. Appendix C.3.1  2652  discusses the keys and constants for use with the alternative derivation functions specified in 2653  Appendices C.3.2 and C.3.3. 2654  C.3.1. Derivation Keys and Constants 2655  Both of the derivation methods specified in Appendices C.3.2 and C.3.3 an AES derivation key 2656  (df_Key) whose length shall meet or exceed the instantiated security strength of the DRBG 2657  instantiation. 2658  The df_Key may be set to any value and may be the current value of a key used by the DRBG. 2659  These alternative methods use three 128-bit constants C1, C2 and C3, which are defined as: 2660  C1 = 000000...00 2661  C2 = 101010...10 2662  C3 = 010101...01 2663  The value of B used in Appendices C.3.2 and C.3.3 depends on the length of the AES derivation 2664  key (df_Key). When the length of df_Key = 128 bits, then B = 2. Otherwise, B = 3. 2665  C.3.2. Derivation Function Using CMAC 2666  CMAC is a block-cipher mode of operation specified in [SP800-38B]. The CMAC_df derivation 2667  function is specified as follows: 2668  CMAC_df: 2669  Input: bitstring input_string, integer number_of_bits_to_return. 2670  Output: bitstring Z. 2671  Process: 2672  1. Let C1, C2, C3 be 128-bit blocks defined as 000000...0, 101010...10, 010101...01, 2673  respectively. 2674  2. Get df_Key. Comment: See Appendix C.3.1. 2675  3. Z = the Null string. 2676  4. For i = 1 to B: 2677  Z = Z || CMAC(df_Key, Ci || input_string). 2678  5. Z = leftmost (Z, number_of_bits_to_return). 2679  6. Return(Z). 2680  C.3.3. Derivation Function Using CBC-MAC 2681  This CBC-MAC derivation function shall only be used when the input_string has the following 2682  properties: 2683  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  81  • The length of the input string is always a fixed length. 2684  • The length of the input_string is an integer multiple of 128 bits. Let m be the number of 2685  128-bit blocks in the input_string. 2686  This derivation function is specified as follows: 2687  CBC-MAC_df: 2688  Input: bitstring input_string, integer number_of_bits_to_return. 2689  Output: bitstring Z. 2690  Process: 2691  1. Let C1, C2, C3 be 128-bit blocks defined as 000000...0, 101010...10, 010101...01, 2692  respectively. 2693  2. Get df_Key. Comment: See Appendix C.3.1. 2694  3. Z = the Null string. 2695  4. Let input_string = S1 || S2 || ... || Sm, where the Si are contiguous 128-bit blocks. 2696  5. For j = 1 to B: 2697  5.1 S0 = Cj. 2698  5.2 V = 128-bit block of all zeroes. 2699  5.3 For i = 0 to m: 2700  V = Encrypt(df_Key, V ⊕ Si). Comment: Perform the cipher operation 2701  specified in [FIPS197]. 2702  5.4 Z = Z || V. 2703  6. Z = leftmost(Z, number_of_bit_to_return). 2704  7. Return(Z). 2705  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  82  Appendix D. List of Symbols, Abbreviations, and Acronyms 2706  AES 2707  Advanced Encryption Standard40 2708  API 2709  Application Programming Interface 2710  CAVP 2711  Cryptographic Algorithm Validation Program 2712  CDF 2713  Cumulative Distribution Function 2714  CMVP 2715  Cryptographic Module Validation Program 2716  DRBG 2717  Deterministic Random Bit Generator41  2718  FIPS 2719  Federal Information Processing Standard 2720  ITL 2721  Information Technology Laboratory 2722  MAC 2723  Message Authentication Code 2724  NIST 2725  National Institute of Standards and Technology 2726  RAM 2727  Random Access Memory 2728  RBG 2729  Random Bit Generator 2730  SP 2731  (NIST) Special Publication 2732  Sub-DRBG 2733  Subordinate DRBG 2734  TDEA 2735  Triple Data Encryption Algorithm42 2736  XOR 2737  Exclusive-Or (operation) 2738  0x 2739  A string of x zeroes 2740  x 2741  40 As specified in [FIPS 197].  41 Mechanism specified in [SP800-90A].  42 As specified in [SP 800-67], Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher.  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  83  The ceiling of x; the least integer number that is not less than the real number x. For example, 3 = 3, and 5.5 = 6. 2742  ε 2743  A positive constant that is assumed to be smaller than 2−32 2744  E(X) 2745  The expected value of the random variable X 2746  len(x) 2747  The length of x in bits 2748  min(a, b) 2749  The minimum of a and b 2750  output_len 2751  The bit length of the output block of a cryptographic primitive 2752  s 2753  The security strength 2754  X ⊕ Y 2755  Boolean bitwise exclusive-or (also bitwise addition modulo 2) of two bitstrings X and Y of the same length 2756  + 2757  Addition over real numbers 2758  × 2759  Multiplication over real numbers  2760  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  84  Appendix E. Glossary 2761  adversary 2762  A malicious entity whose goal is to determine, to guess, or to influence the output of an RBG. 2763  approved 2764  An algorithm or technique for a specific cryptographic use that is specified in a FIPS or NIST Recommendation, 2765  adopted in a FIPS or NIST Recommendation, or specified in a list of NIST-approved security functions. 2766  backtracking resistance 2767  A property of a DRBG that provides assurance that compromising the current internal state of the DRBG does not 2768  weaken previously generated outputs. See SP 800-90A for a more complete discussion. (Contrast with prediction 2769  resistance.) 2770  biased 2771  A random variable is said to be biased if values of the finite sample space are selected with unequal probability. 2772  Contrast with unbiased. 2773  big-endian format 2774  A format in which the most significant bytes (the bytes containing the high-order or leftmost bits) are stored in the 2775  lowest address with the following bytes in sequentially higher addresses. 2776  bitstring 2777  An ordered sequence (string) of 0s and 1s. The leftmost bit is the most significant bit. 2778  block cipher 2779  A parameterized family of permutations on bitstrings of a fixed length; the parameter that determines the permutation 2780  is a bitstring called the key. 2781  conditioning function (external) 2782  As used in SP 800-90C, a deterministic function that is used to produce a bitstring with full entropy. 2783  consuming application 2784  An application that uses random outputs from an RBG. 2785  cryptographic boundary 2786  An explicitly defined physical or conceptual perimeter that establishes the physical and/or logical bounds of a 2787  cryptographic module and contains all of the hardware, software, and/or firmware components of a cryptographic 2788  module. 2789  cryptographic module 2790  The set of hardware, software, and/or firmware that implements cryptographic functions (including cryptographic 2791  algorithms and key generation) and is contained within the cryptographic boundary. 2792  deterministic random bit generator (DRBG) 2793  An RBG that produces random bitstrings by applying a deterministic algorithm to initial seed material. 2794  Note: A DRBG at least has access to a randomness source initially. 2795  Note: A portion of the seed material is secret. 2796  digitization 2797  The process of generating raw discrete digital values from non-deterministic events (e.g., analog noise sources) within 2798  a noise source. 2799  entropy 2800  A measure of disorder, randomness, or variability in a closed system. 2801  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  85  Note: The entropy of a random variable X is a mathematical measure of the amount of information gained by an 2802  observation of X. 2803  Note: The most common concepts are Shannon entropy and min-entropy. Min-entropy is the measure used in SP 800-2804  90. 2805  entropy rate 2806  The validated rate at which an entropy source provides entropy in terms of bits per entropy-source output (e.g., five 2807  bits of entropy per eight-bit output sample). 2808  entropy source 2809  The combination of a noise source, health tests, and optional conditioning component that produce bitstrings 2810  containing entropy. A distinction is made between entropy sources having physical noise sources and those having 2811  non-physical noise sources. 2812  Note: Health tests are comprised of continuous tests and startup tests. 2813  fresh entropy 2814  A bitstring that is output from a non-deterministic randomness source that has not been previously used to generate 2815  output or has otherwise been made externally available. 2816  Note: The randomness source should be an entropy source or RBG3 construction. 2817  full-entropy bitstring 2818  A bitstring with ideal randomness (i.e., the amount of entropy per bit is equal to 1). This Recommendation assumes 2819  that a bitstring has full entropy if the entropy rate is at least 1 − ε, where ε is at most 2−32. 2820  hash function 2821  A (mathematical) function that maps values from a large (possibly very large) domain into a smaller range. The 2822  function satisfies the following properties: 2823  1. (One-way) It is computationally infeasible to find any input that maps to any pre-specified output. 2824  2. (Collision-free) It is computationally infeasible to find any two distinct inputs that map to the same output. 2825  health testing 2826  Testing within an implementation immediately prior to or during normal operations to obtain assurance that the 2827  implementation continues to perform as implemented and validated. 2828  ideal randomness source 2829  The source of an ideal random sequence of bits. Each bit of an ideal random sequence is unpredictable and unbiased, 2830  with a value that is independent of the values of the other bits in the sequence. Prior to an observation of the sequence, 2831  the value of each bit is equally likely to be 0 or 1, and the probability that a particular bit will have a particular value 2832  is unaffected by knowledge of the values of any or all of the other bits. An ideal random sequence of n bits contains n 2833  bits of entropy. 2834  independent entropy sources 2835  Two entropy sources are independent if knowledge of the output of one entropy source provides no information about 2836  the output of the other entropy source. 2837  instantiate 2838  The process of initializing a DRBG with sufficient randomness to generate pseudorandom bits at the desired security 2839  strength. 2840  internal state (of a DRBG) 2841  The collection of all secret and non-secret information about an RBG or entropy source that is stored in memory at a 2842  given point in time. 2843  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  86  known-answer test 2844  A test that uses a fixed input/output pair to detect whether a deterministic component was implemented correctly or 2845  to detect whether it continues to operate correctly. 2846  min-entropy 2847  A lower bound on the entropy of a random variable. The precise formulation for min-entropy is (−log2 max pi) for a 2848  discrete distribution having probabilities p1, ..., pk. Min-entropy is often used as a measure of the unpredictability of a 2849  random variable. 2850  must 2851  Used in SP 800-90C to indicate a requirement that may not be testable by a CMVP testing lab. Note that must may 2852  be coupled with not to become must not. 2853  noise source 2854  A source of unpredictable data that outputs raw discrete digital values. The digitization mechanism is considered part 2855  of the noise source. A distinction is made between physical noise sources and non-physical noise sources. 2856  non-physical entropy source 2857  An entropy source whose primary noise source is non-physical. 2858  non-physical noise source 2859  A noise source that typically exploits system data and/or user interaction to produce digitized random data. 2860  non-validated entropy source 2861  An entropy source that has not been validated by the CMVP as conforming to SP 800-90B. 2862  null string 2863  An empty bitstring. 2864  personalization string 2865  An optional input value to a DRBG during instantiation to make one DRBG instantiation behave differently from 2866  other instantiations. 2867  physical entropy source 2868  An entropy source whose primary noise source is physical. 2869  physical noise source 2870  A noise source that exploits physical phenomena (e.g., thermal noise, shot noise, jitter, metastability, radioactive 2871  decay, etc.) from dedicated hardware designs (using diodes, ring oscillators, etc.) or physical experiments to produce 2872  digitized random data. 2873  prediction resistance 2874  A property of a DRBG that provides assurance that compromising the current internal state of the DRBG does not 2875  allow future DRBG outputs to be predicted past the point where the DRBG has been reseeded with sufficient entropy. 2876  See SP 800-90A for a more complete discussion. (Contrast with backtracking resistance.) 2877  pseudocode 2878  An informal, high-level description of a computer program, algorithm, or function that resembles a simplified 2879  programming language. 2880  random bit generator (RBG) 2881  A device or algorithm that outputs a random sequence that is effectively indistinguishable from statistically 2882  independent and unbiased bits. 2883  randomness 2884  As used in this Recommendation, the unpredictability of a bitstring. If the randomness is produced by a non-deterministic 2885  source (e.g., an entropy source or RBG3 construction), the unpredictability is dependent on the quality of the source. If 2886  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  87  the randomness is produced by a deterministic source (e.g., a DRBG), the unpredictability is based on the capability of 2887  an adversary to break the cryptographic algorithm for producing the pseudorandom bitstring. 2888  randomness input 2889  An input bitstring from a randomness source that provides an assessed minimum amount of randomness (e.g., entropy) 2890  for a DRBG. See min-entropy. 2891  randomness source 2892  A source of randomness for an RBG. The randomness source may be an entropy source or an RBG construction. 2893  RBG1 construction 2894  An RBG construction with the DRBG and the randomness source in separate cryptographic modules. 2895  RBG2 construction 2896  An RBG construction with one or more entropy sources and a DRBG within the same cryptographic module. This 2897  RBG construction does not provide full-entropy output. 2898  RBG2(NP) construction 2899  A non-physical RBG2 construction. An RBG2 construction that obtains entropy from one or more validated non-2900  physical entropy sources and possibly from one or more validated physical entropy sources. This RBG construction 2901  does not provide full-entropy output. 2902  RBG2(P) construction 2903  A physical RBG2 construction. An RBG construction that includes a DRBG and one or more entropy sources in the 2904  same cryptographic module. Only the entropy from validated physical entropy sources is counted when fulfilling an 2905  entropy request within the RBG. This RBG construction does not provide full-entropy output. 2906  RBG3 construction 2907  An RBG construction that includes a DRBG and one or more entropy sources in the same cryptographic module. 2908  When working properly, bitstrings that have full entropy are produced. Sometimes called a non-deterministic random 2909  bit generator (NRBG) or true random number (or bit) generator. 2910  reseed 2911  To refresh the internal state of a DRBG with seed material. The seed material should contain sufficient entropy to 2912  allow recovery from a possible compromise. 2913  sample space 2914  The set of all possible outcomes of an experiment. 2915  secure channel 2916  A physically protected secure path for transferring data between two cryptographic modules that ensures 2917  confidentiality, integrity, and replay protection as well as mutual authentication between the modules. 2918  security boundary 2919  For an entropy source: A conceptual boundary that is used to assess the amount of entropy provided by the values 2920  output from the entropy source. The entropy assessment is performed under the assumption that any observer 2921  (including any adversary) is outside of that boundary during normal operation. 2922  For a DRBG: A conceptual boundary that contains all of the DRBG functions and internal states required for a DRBG. 2923  For an RBG: A conceptual boundary that is defined with respect to one or more threat models that includes an 2924  assessment of the applicability of an attack and the potential harm caused by the attack. 2925  security strength 2926  A number associated with the amount of work (i.e., the number of basic operations of some sort) that is required to 2927  “break” a cryptographic algorithm or system in some way. In this Recommendation, the security strength is specified 2928  in bits and is a specific value from the set {128, 192, 256}. If the security strength associated with an algorithm or 2929  system is s bits, then it is expected that (roughly) 2s basic operations are required to break it. 2930  NIST SP 800-90C 3pd (Third Public Draft)  Recommendation for RBG Constructions  September 2022  88  Note: This is a classical definition that does not consider quantum attacks. This definition will be revised to address 2931  quantum issues in the future. 2932  seed 2933  To initialize the internal state of a DRBG with seed material. The seed material should contain sufficient entropy to 2934  meet security requirements. 2935  seed material 2936  A bitstring that is used as input to a DRBG. The seed material determines a portion of the internal state of the DRBG. 2937  seedlife 2938  The period of time between instantiating or reseeding a DRBG with seed material and reseeding the DRBG with seed 2939  material containing fresh entropy or uninstantiation of the DRBG. 2940  shall 2941  The term used to indicate a requirement that is testable by a testing lab. Shall may be coupled with not to become 2942  shall not. See Testable requirement. 2943  should 2944  The term used to indicate an important recommendation. Ignoring the recommendation could result in undesirable 2945  results. Note that should may be coupled with not to become should not. 2946  state handle 2947  A pointer to the internal state information for a particular DRBG instantiation. 2948  subordinate DRBG (sub-DRBG) 2949  A DRBG that is instantiated by an RBG1 construction. 2950  support a security strength (by a DRBG) 2951  The DRBG has been instantiated at a security strength that is equal to or greater than the security strength requested 2952  for the generation of random bits. 2953  targeted security strength 2954  The security strength that is intended to be supported by one or more implementation-related choices (e.g., algorithms, 2955  cryptographic primitives, auxiliary functions, parameter sizes, and/or actual parameters). 2956  testable requirement 2957  A requirement that can be tested for compliance by a testing lab via operational testing, a code review, or a review of 2958  relevant documentation provided for validation. A testable requirement is indicated using a shall statement. 2959  threat model 2960  A description of a set of security aspects that need to be considered. A threat model can be defined by listing a set of 2961  possible attacks along with the probability of success and the potential harm from each attack. 2962  unbiased 2963  A random variable is said to be unbiased if all values of the finite sample space are chosen with the same 2964  probability. Contrast with biased. 2965  uninstantiate 2966  The termination of a DRBG instantiation. 2967  validated entropy source 2968  An entropy source that has been successfully validated by the CAVP and CMVP for conformance to SP 800-90B. 2969  1. Introduction and Purpose  1.1. Audience  1.2. Document Organization  2. General Information  2.1. RBG Security  2.2. RBG Constructions  2.3. Sources of Randomness for an RBG  2.4. DRBGs  2.4.1. DRBG Instantiations  2.4.2. DRBG Reseeding, Prediction Resistance, and Recovery from Compromise  2.5. RBG Security Boundaries  2.6. Assumptions and Assertions  2.7. General Implementation and Use Requirements and Recommendations  2.8. General Function Calls  2.8.1. DRBG Functions  2.8.1.1. DRBG Instantiation  2.8.1.2. DRBG Generation Request  2.8.1.3. DRBG Reseed Request  2.8.1.4. The Get_randomness-source_input Call  2.8.2. Interfacing with Entropy Sources Using the GetEntropy and Get_ES_Bitstring Functions  2.8.2.1. The GetEntropy Call  2.8.2.2. The Get_ES_Bitstring Function  2.8.3. Interfacing with an RBG3 Construction  2.8.3.1. Instantiating a DRBG within an RBG3 Construction  2.8.3.2. Generation Using an RBG3 Construction  3. Accessing Entropy Source Output  3.1. The Get_ES_Bitstring Function  3.2. Entropy Source Requirements  3.3. External Conditioning to Obtain Full-Entropy Bitstrings  3.3.1. Conditioning Function Calls  3.3.1.1. Keys Used in External Conditioning Functions  3.3.1.2. Hash Function-based Conditioning Functions  3.3.1.3. Block Cipher-based Conditioning Functions  3.3.2. Using a Vetted Conditioning Function to Obtain Full-Entropy Bitstrings  4. RBG1 Constructions Based on RBGs with Physical Entropy Sources  4.1. RBG1 Description  4.2. Conceptual Interfaces  4.2.1. Instantiating the DRBG in the RBG1 Construction  4.2.2. Requesting Pseudorandom Bits  4.3. Using an RBG1 Construction with Subordinate DRBGs (Sub-DRBGs)  4.3.1. Instantiating a Sub-DRBG  4.3.2. Requesting Random Bits  4.4. Requirements  4.4.1. RBG1 Requirements  4.4.2. Sub-DRBG Requirements  5. RBG2 Constructions Based on Physical and/or Non-Physical Entropy Sources  5.1. RBG2 Description  5.2. Conceptual Interfaces  5.2.1. RBG2 Instantiation  5.2.2. Requesting Pseudorandom Bits from an RBG2 Construction  5.2.3. Reseeding an RBG2 Construction  5.3. RBG2 Requirements  6. RBG3 Constructions Based on Physical Entropy Sources  6.1. General Requirements  6.2. RBG3(XOR) Construction  6.2.1. Conceptual Interfaces  6.2.1.1. Instantiation of the DRBG  6.2.1.2. Random and Pseudorandom Bit Generation  6.2.1.3. Pseudorandom Bit Generation Using a Directly Accessible DRBG  6.2.1.4. Reseeding the DRBG Instantiations  6.2.2. RBG3(XOR) Requirements  6.3. RBG3(RS) Construction  6.3.1. Conceptual Interfaces  6.3.1.1. Instantiation of the DRBG Within an RBG3(RS) Construction  6.3.1.2. Random and Pseudorandom Bit Generation  6.3.1.3. Reseeding  6.3.2. Requirements for a RBG3(RS) Construction  7. Testing  7.1. Health Testing  7.1.1. Testing RBG Components  7.1.2. Handling Failures  7.1.2.1. Entropy-Source Failures  7.1.2.2. Failures by Non-Entropy-Source Components  7.2. Implementation Validation  References  Appendix A. Entropy vs. Security Strength (Informative)  A.1. Entropy  A.2. Security Strength  A.3. A Side-by-Side Comparison  A.4. Entropy and Security Strength in this Recommendation  Appendix B. RBG Examples (Informative)  B.1. Direct DRBG Access in an RBG3 Construction  B.2. Example of an RBG1 Construction  B.2.1. Instantiation of the RBG1 Construction  B.2.2. Generation by the RBG1 Construction  B.3. Example Using Sub-DRBGs Based on an RBG1 Construction  B.3.1. Instantiation of the Sub-DRBGs  B.3.1.1. Instantiating Sub-DRBG1  B.3.1.2. Instantiating Sub-DRBG2  B.3.2. Pseudorandom Bit Generation by Sub-DRBGs  B.4. Example of an RBG2(P) or RBG2(NP) Construction  B.4.1. Instantiation of an RBG2 Construction  B.4.2. Generation in an RBG2 Construction  B.4.3. Reseeding an RBG2 Construction  B.5. Example of an RBG3(XOR) Construction  B.5.1. Instantiation of an RBG3(XOR) Construction  B.5.2. Generation by an RBG3(XOR) Construction  B.5.2.1. Generation  B.5.2.2. Get_conditioned_full-entropy_input Function  B.5.3. Reseeding an RBG3(XOR) Construction  B.6. Example of an RBG3(RS) Construction  B.6.1. Instantiation of an RBG3(RS) Construction  B.6.2. Generation by an RBG3(RS) Construction  B.6.3. Generation by the Directly Accessible DRBG  B.6.4. Reseeding a DRBG  Appendix C. Addendum to SP 800-90A: Instantiating and Reseeding a CTR_DRBG  C.1. Background and Scope  C.2. CTR_DRBG without a Derivation Function  C.3. CTR_DRBG using a Derivation Function  C.3.1. Derivation Keys and Constants  C.3.2. Derivation Function Using CMAC  C.3.3. Derivation Function Using CBC-MAC  Appendix D. List of Symbols, Abbreviations, and Acronyms  Appendix E. Glossary",
    "abstract": ""
}
{
    "number": 19,
    "label": 2,
    "source": "NIST",
    "subject": "A Zero Trust Architecture Model for Access Control in Cloud-Native Applications in Multi-Cloud Environments",
    "document(english)": "NIST SP 800-207A initial public draft, A Zero Trust Architecture Model for Access Control in Cloud-Native Applications in Multi-Location Environments  NIST Special Publication 1  NIST SP 800-207A ipd 2  A Zero Trust Architecture Model 3  for Access Control in Cloud-Native 4  Applications in Multi-Location 5  Environments 6  Initial Public Draft7  8  Ramaswamy Chandramouli 9  Zack Butcher 10  11  This publication is available free of charge from: 12  https://doi.org/10.6028/NIST.800-207A.ipd 13  https://crossmark.crossref.org/dialog/?doi=10.6028/NIST.SP.800-207A.ipd  NIST Special Publication  14  NIST SP 800-207A ipd 15  A Zero Trust Architecture Model 16  for Access Control in Cloud-Native 17  Applications in Multi-Location 18  Environments 19  20  Initial Public Draft 21  Ramaswamy Chandramouli 22  Computer Security Division 23  Information Technology Laboratory 24  25  Zack Butcher 26  Tetrate, Inc. 27  This publication is available free of charge from: 28  https://doi.org/10.6028/NIST.800-207A.ipd 29  April 2023 30  31  U.S. Department of Commerce  32  Gina M. Raimondo, Secretary 33  National Institute of Standards and Technology  34  Laurie E. Locascio, NIST Director and Under Secretary of Commerce for Standards and Technology35  36  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  Certain commercial equipment, instruments, software, or materials, commercial or non-commercial, are identified in 37  this paper in order to specify the experimental procedure adequately. Such identification does not imply 38  recommendation or endorsement of any product or service by NIST, nor does it imply that the materials or 39  equipment identified are necessarily the best available for the purpose. 40  There may be references in this publication to other publications currently under development by NIST in 41  accordance with its assigned statutory responsibilities. The information in this publication, including concepts and 42  methodologies, may be used by federal agencies even before the completion of such companion publications. Thus, 43  until each publication is completed, current requirements, guidelines, and procedures, where they exist, remain 44  operative. For planning and transition purposes, federal agencies may wish to closely follow the development of 45  these new publications by NIST.  46  Organizations are encouraged to review all draft publications during public comment periods and provide feedback 47  to NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at 48  https://csrc.nist.gov/publications. 49  Authority 50  This publication has been developed by NIST in accordance with its statutory responsibilities under the Federal 51  Information Security Modernization Act (FISMA) of 2014, 44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283. 52  NIST is responsible for developing information security standards and guidelines, including minimum requirements 53  for federal information systems, but such standards and guidelines shall not apply to national security systems 54  without the express approval of appropriate federal officials exercising policy authority over such systems. This 55  guideline is consistent with the requirements of the Office of Management and Budget (OMB) Circular A-130. 56  57  Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and binding 58  on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines be 59  interpreted as altering or superseding the existing authorities of the Secretary of Commerce, Director of the OMB, or 60  any other federal official.  This publication may be used by nongovernmental organizations on a voluntary basis and 61  is not subject to copyright in the United States. Attribution would, however, be appreciated by NIST.  62  NIST Technical Series Policies 63  Copyright, Use, and Licensing Statements 64  NIST Technical Series Publication Identifier Syntax 65  Publication History 66  Approved by the NIST Editorial Review Board on YYYY-MM-DD [Will be updated in final publication] 67  How to Cite this NIST Technical Series Publication:  68  Chandramouli R, Butcher Z (2023) A Zero-Trust Architecture Model for Access Control in Cloud Native 69  Applications in Multi-Location Environments. (National Institute of Standards and Technology, Gaithersburg, MD), 70  NIST Special Publication (SP) NIST SP 800-207A ipd. https://doi.org/10.6028/NIST.800-207A.ipd  71  Author ORCID iDs 72  Ramaswamy Chandramouli: 0000-0002-7387-5858 73  Public Comment Period 74  April 18, 2023 – June 7, 2023 75  https://csrc.nist.gov/publications https://doi.org/10.6028/NIST-TECHPUBS.CROSSMARK-POLICY https://www.nist.gov/document/publication-identifier-syntax-nist-technical-series-publications  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  Submit Comments 76  sp800-207A-comments@nist.gov 77  78  National Institute of Standards and Technology 79  Attn: Computer Security Division, Information Technology Laboratory 80  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 81  All comments are subject to release under the Freedom of Information Act (FOIA).82  mailto:sp800-207A-comments@nist.gov  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  i  Abstract 83  One of the basic tenets of zero trust is to remove the implicit trust in users, services, and devices 84  based only on their network location, affiliation, and ownership. NIST Special Publication 800-85  207 has laid out a comprehensive set of zero trust principles and referenced zero trust 86  architectures (ZTA) for turning those concepts into reality. A key paradigm shift in ZTAs is the 87  change in focus from security controls based on segmentation and isolation using network 88  parameters (e.g., IP addresses, subnets, perimeter) to identities. From an application security 89  point of view, this requires authentication and authorization policies based on application and 90  service identities in addition to the underlying network parameters and user identities. This in 91  turn requires a platform that consists of API gateways, sidecar proxies, and application identity 92  infrastructures (e.g., SPIFFE) that can enforce those policies irrespective of the location of the 93  services/applications, whether on-premises or on multiple clouds. The objective of this 94  publication is to provide guidance for realizing an architecture that can enforce granular 95  application-level policies while meeting the runtime requirements of ZTA for multi-cloud and 96  hybrid environments. 97  Keywords 98  egress gateway; identity-tier policies; ingress gateway; microservices; multi-cloud; network-tier 99  policies; service mesh; sidecar proxy; SPIFFE; transit gateway; zero trust; zero trust architecture. 100  Reports on Computer Systems Technology 101  The Information Technology Laboratory (ITL) at the National Institute of Standards and 102  Technology (NIST) promotes the U.S. economy and public welfare by providing technical 103  leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test 104  methods, reference data, proof of concept implementations, and technical analyses to advance 105  the development and productive use of information technology. ITL’s responsibilities include the 106  development of management, administrative, technical, and physical standards and guidelines for 107  the cost-effective security and privacy of other than national security-related information in 108  federal information systems. The Special Publication 800-series reports on ITL’s research, 109  guidelines, and outreach efforts in information system security, and its collaborative activities 110  with industry, government, and academic organizations. 111  112  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  ii  Call for Patent Claims 113  This public review includes a call for information on essential patent claims (claims whose use 114  would be required for compliance with the guidance or requirements in this Information 115  Technology Laboratory (ITL) draft publication). Such guidance and/or requirements may be 116  directly stated in this ITL Publication or by reference to another publication. This call also 117  includes disclosure, where known, of the existence of pending U.S. or foreign patent applications 118  relating to this ITL draft publication and of any relevant unexpired U.S. or foreign patents. 119  ITL may require from the patent holder, or a party authorized to make assurances on its behalf, 120  in written or electronic form, either: 121  a) assurance in the form of a general disclaimer to the effect that such party does not hold 122  and does not currently intend holding any essential patent claim(s); or 123  b) assurance that a license to such essential patent claim(s) will be made available to 124  applicants desiring to utilize the license for the purpose of complying with the guidance 125  or requirements in this ITL draft publication either: 126  i. under reasonable terms and conditions that are demonstrably free of any unfair 127  discrimination; or 128  ii. without compensation and under reasonable terms and conditions that are 129  demonstrably free of any unfair discrimination. 130  Such assurance shall indicate that the patent holder (or third party authorized to make assurances 131  on its behalf) will include in any documents transferring ownership of patents subject to the 132  assurance, provisions sufficient to ensure that the commitments in the assurance are binding on 133  the transferee, and that the transferee will similarly include appropriate provisions in the event of 134  future transfers with the goal of binding each successor-in-interest. 135  The assurance shall also indicate that it is intended to be binding on successors-in-interest 136  regardless of whether such provisions are included in the relevant transfer documents. 137  Such statements should be addressed to: sp800-207A-comments@nist.gov 138  139  mailto:sp800-207A-comments@nist.gov  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  iii  Table of Contents 140  Executive Summary ................................................................................................................. 1 141  Introduction ...................................................................................................................... 2 142  Background – Zero Trust Principles and Zero Trust Architecture ................................ 2 143  Relationship to Other NIST Guidance Documents ...................................................... 3 144  Scope ......................................................................................................................... 3 145  Target Audience ......................................................................................................... 4 146  Organization of This Document .................................................................................. 4 147  The Enterprise Cloud-Native Platform and its Components ......................................... 5 148  Enterprise Infrastructure Layer ................................................................................... 6 149  Designing a Policy Framework for ZTA for Cloud-Native Application Environments . 7 150  Functional Components of Identity-Based Segmentation Policies for ZTA .................. 8 151  Shortcomings of Identity-Based Segmentation Policies for Enterprise ZTA ................ 9 152  Multi-Tier Policies for Enterprise ZTA ......................................................................... 9 153  Implementing Multi-Tier Policies for ZTA for Cloud-Native Application Environments154  11 155  Reference Application Infrastructure Scenario ...........................................................11 156  Role of the Service Mesh in Policy Deployment, Enforcement, and Updates .............12 157  Policy Deployment for Reference Application Infrastructure.......................................13 158  Another Application Infrastructure Scenario ...............................................................14 159  Functional Roles of Application Infrastructure Elements in Enforcing Policies ...........15 160  Comparison of Identity-Tier and Network-Tier Policies ..............................................16 161  4.6.1. Approaches for Deployment and the Limitations of Network-Tier Policies ...............16 162  4.6.2. Prerequisites for the Deployment of Identity-Tier Policies ........................................17 163  4.6.3. Advantages of Identity-Tier Policies .........................................................................18 164  Summary and Conclusions ............................................................................................19 165  References ..............................................................................................................................20 166  List of Figures 167  Fig. 1. Enterprise infrastructure layer for uniform policy deployment .......................................... 7 168  Fig. 2. Flexibility provided by multi-tier policies .........................................................................10 169  Fig. 3. Multi-tier Policies for a Hybrid Application Environment .................................................12 170  Fig. 4. An Istio Authorization Policy that allows Service 1 to Service 2 on port 443 but only 171  allows it to execute the GET HTTP verb on the “/public” path ........................................14 172  Fig. 5. Policy Deployment for a Three-tier Application ...............................................................15 173  174  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  iv  Acknowledgments 175  The author would like to express his thanks to Isabel Van Wyk of NIST for her detailed editorial 176  review of the public comment version as well as the final publication. 177  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  1  Executive Summary 178  The principles of zero trust, as described in NIST Special Publication (SP) 800-207, have 179  become the guiding markers for developing secure zero trust architecture. A well-established 180  class of applications are cloud-native applications. The generally accepted characterization of a 181  cloud native application includes the following: 182  • The application is made up of a set of loosely coupled components called microservices. 183  Each of the microservices can be hosted on different physical or virtual machines (VMs) 184  and even be geographically distributed (e.g., within several facilities that belong to the 185  enterprise, such as the headquarters, branch offices, and in various cloud service provider 186  environments). 187  • Any transaction involving the application may also involve one or more inter-service 188  (microservice) calls across the network. 189  • A widespread feature (though not necessarily a requirement for cloud-native application) 190  is the presence of a software platform called the service mesh that provides an integrated 191  set of all application services (e.g., services discovery, networking connections, 192  communication resilience, and security services like authentication and authorization). 193  The realization of a zero trust architecture for the above class of cloud-native applications 194  requires a robust policy framework. In order to follow zero trust principles, the constituent 195  polices in the framework should consider the following scenario: 196  • There should not be implicit trust in users, services, or devices based exclusively on their 197  network location, affiliation, or ownership. Hence, policy definitions and associated 198  security controls based on the segmentation or isolation of networks using network 199  parameters (e.g., IP addresses, subnets, perimeter) are insufficient. These policies fall 200  under the classification of network-tier policies. 201  • To ensure the presence of zero trust principles throughout the entire application, network-202  tier policies must be augmented with policies that establish trust in the identity of the 203  various participating entities (e.g., users and services) irrespective of the location of the 204  services or applications, whether on-premises or on multiple clouds. 205  This document provides guidance for realizing a zero trust architecture that can enforce granular 206  application-level policies for cloud-native applications. The guidance is anchored in the 207  following: 208  • A combination of network-tier and identity-tier policies 209  • The components of cloud-native applications that enable the definition and deployment 210  of those policies, such as edge, ingress, sidecar, and egress gateways; the creation, 211  issuance, and maintenance of service identities; the issuance of authentication and 212  authorization tokens that carry user identities in the enterprise application infrastructure 213  that encompasses multi-cloud and hybrid environments 214  215  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  2  Introduction  216  Zero trust (ZT) tenets or principles have been accepted as the guide markers for architecting all 217  applications. There are several reasons why adherence to these tenets is critical for obtaining 218  necessary security assurances, especially for cloud-native applications. The enterprise 219  application environments for this class of applications is highly geographically distributed and 220  span multiple cloud and on-premises environments (e.g., headquarters, enterprise-operated data 221  centers, branch offices, etc.). Further, the user base consists of both remote and on-premises 222  employees. These two features call for establishing trust in all of the data sources and computing 223  services of the enterprise – irrespective of their location – through secure communication and the 224  validation of access policies.  225  Apart from geographic distribution, another common feature of cloud-native applications is the 226  presence of many microservices that are loosely coupled and collectively support business 227  processes through extensive inter-service calls. This is augmented with an integrated 228  infrastructure for providing all application services called the service mesh. These features 229  emphasize the concept of identity for the various components of the application in the form of 230  microservices as well as the users who access them through direct calls or clients (other 231  services). This in turn highlights the critical need for authenticating these identities and for 232  providing legitimate access on a per-session basis through a dynamic policy that takes the current 233  status of the user, service, and requested asset into account. 234  The above requirements can only be met through a comprehensive policy framework. This 235  document provides guidance for developing a policy framework that will form the foundation for 236  realizing a zero trust architecture (ZTA) while incorporating zero trust principles into its design 237  for cloud-native applications. The policy framework should also consist of a comprehensive set 238  of policies that span all critical entities and resources in the application stack, including the 239  network, network devices, users, and services. 240  Background – Zero Trust Principles and Zero Trust Architecture  241  A summary of the zero trust principles and the definition of a zero trust architecture, as described 242  in NIST SP 800-207 [1], are: 243  • Zero trust is the term for an evolving set of cybersecurity paradigms that move defenses 244  from static, network-based perimeters to focus on users, assets, and resources. It is a set 245  of security primitives rather than a particular set of technologies. Zero trust assumes that 246  there is no implicit trust granted to assets or user accounts based solely on their physical 247  or network location (i.e., local area networks versus the internet) or on asset ownership 248  (e.g., enterprise or personally owned). Zero trust focuses on protecting resources (e.g., 249  assets, services, workflows, network accounts) rather than network segments, as the 250  network location is no longer seen as the prime component to the security posture of the 251  resource. 252  • A zero trust architecture uses zero trust principles to plan industrial and enterprise 253  infrastructures and workflows. 254  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  3  NIST’s guidance on zero trust also contains an abstract definition of zero trust architecture and 255  gives general deployment models and use cases with which zero trust could improve an 256  enterprise’s overall information technology security posture. 257  Relationship to Other NIST Guidance Documents 258  Since the current document provides guidance for the realization of ZTA for cloud-native 259  applications hosted in multiple locations (on-premises and multiple clouds) and the enforcement 260  of ZT principles requires policies that are associated with various security services, it will be 261  useful to refer to the following documents. These documents provide background information for 262  the architecture of a microservices-based application with service mesh as well as guidance for 263  configuring specific security services. The current document expands the reference environment 264  to one where the IT application infrastructure of an enterprise spans multiple premises and 265  multiple cloud provider locations as well as addresses the range of policies that are required for 266  comprehensive security assurance. 267  • NIST SP 800-204A, Building Secure Microservices-based Applications Using Service-268  Mesh Architecture [2], provides deployment guidance for various security services (e.g., 269  establishment of secure sessions, security monitoring, etc.) for a microservices-based 270  application using a dedicated infrastructure (i.e., a service mesh) based on service proxies 271  that operate independently of the application code. 272  • NIST SP 800-204B [3], Attribute-based Access Control for Microservices-based 273  Applications Using a Service Mesh, provides deployment guidance for building an 274  authentication and authorization framework within the service mesh that meets the 275  security requirements. This may include establishing (1) zero trust by enabling mutual 276  authentication in communication between any pair of services and (2) a robust access 277  control mechanism based on an access control model (e.g., the attribute-based access 278  control [ABAC] model) that can be used to express a wide set of policies and is scalable 279  in terms of user base, objects (resources), and deployment environment. 280  Scope 281  The scope of this document includes: 282  • Identifying the requirements for realizing a ZTA for granular access control in 283  microservices-based application platforms that include a service mesh infrastructure 284  • Identifying the infrastructural elements that should be part of the platform in order to 285  configure and implement ZT principles 286  • Guidance for deploying a ZTA in the above platform and outlining the security 287  assurances that the deployment can provide 288  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  4  Target Audience 289  This guidance is intended for security architects and infrastructure designers in organizations 290  with a hybrid IT environment (consisting of both on-premises and multiple cloud-based 291  applications) with a combination of legacy and microservices-based (i.e., cloud-native) 292  applications with a built-in application services infrastructure, such as a service mesh. 293  Organization of This Document 294  The organization of this document is as follows: 295  • Section 2 describes a modern enterprise cloud-native application platform that includes a 296  dedicated infrastructure for providing all application services as well as a management 297  plane when the application spans both on-premises and multiple cloud service provider 298  locations. 299  • Section 3 introduces the basic concepts of a policy framework for ZTA for the platform 300  described in the previous section in terms of drivers and design requirements. It also 301  provides an analysis of identity-based policies and introduces the concept of multi-tier 302  policies. 303  • Section 4 describes the implementation approach for deploying multi-tier policies for two 304  enterprise application infrastructure scenarios by outlining the roles of the service mesh, 305  the functional components involved, and the advantages of identity-tier policies, which 306  provide service-level segmentation and play a critical role in the security assurance of an 307  application ecosystem to conform to zero trust principles or tenets. 308  • Section 5 provides a summary and conclusion. 309  310  311  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  5  The Enterprise Cloud-Native Platform and its Components 312  An enterprise cloud-native platform is increasingly made up of microservices that are 313  implemented as containers and hosted on a container orchestration platform. In addition, it has a 314  dedicated infrastructure layer called a service mesh, which provides a comprehensive set of 315  application services (e.g., network connectivity, network resilience, observability, and security). 316  The application services provided by a service mesh are enabled by the following: 317  • A built-in infrastructure for (a) providing service identities, (b) service discovery, and (c) 318  external policy-based authorization engines based on Next Generation Access Control 319  (NGAC), Attribute-based Access Control (ABAC), and Open Policy Agent (OPA)  320  • Code for performing network-related functions (e.g., traffic routing) and for ensuring 321  network resiliency through functions such as retries, timeouts, blue-green deployments, 322  and circuit breaking  323  • Code for ensuring application integrity and confidentiality through service-to-service and 324  user-to-resource authentications and authorizations 325  More details on the container orchestration platform with an integrated service mesh can be 326  found in [2], and an access control implementation in that platform is described extensively in 327  [3]. 328  In the modern enterprise, the platform described above is present in both on-premises data 329  centers and multiple cloud service locations. Assuming that a service mesh instance is deployed 330  for managing a single cluster that consists of the above platforms, there will be multiple clusters 331  spread over multiple on-premises sites and multiple availability zones in different clouds. 332  Consequently, there will be multiple service mesh instances. 333  Each service mesh instance has two main logical components: 1) a control plane that implements 334  the APIs needed to define various configurations and policies that govern access between various 335  microservices in that cluster and 2) a data plane that enforces those policies at runtime. However, 336  a uniform set of policies is also needed to govern access between any pair of microservices or 337  services in the enterprise irrespective of their location or the service mesh instance of which they 338  are a part. This requires a global control plane that can define a uniform set of policies applicable 339  to the entire set of services that operate in the enterprise and disseminate them to the control 340  planes of the individual service mesh instances. 341  It is technically possible to have a single service mesh control plane instance (i.e., single service 342  mesh instance) that manages multiple clusters spanning multiple environments (i.e., on-premises 343  and on clouds). However, this architecture may make the multiple clusters a single failure 344  domain and potentially defeat the very purpose of designing a multi-cluster configuration (i.e., 345  availability). Thus, running a service mesh control plane instance for each cluster isolates the 346  failure domain and improves availability and scalability. Further, providing the required 347  underlying network connectivity to facilitate every workload (since each workload or application 348  instance has an associated sidecar proxy that forms the data plane) to communicate with a single 349  control plane instance is untenable in most enterprise environments and impossible in many 350  government ones (e.g., air-gapped systems). 351  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  6  Enterprise Infrastructure Layer 352  The global control plane forms an integral part of the enterprise infrastructure layer. The 353  management plane that contains the various interfaces is hosted within the global control plane. 354  The roles of the global control plane and the management plane are as follows: 355  • The global control plane can be leveraged to perform the functions of individual control 356  planes at the enterprise level rather than at the cluster level (e.g., issuing identities to all 357  services in the enterprise by leveraging the enterprise PKI system). 358  • The management plane provides the human-computer interfaces (e.g., user interfaces, 359  such as command line interfaces and APIs) that enable enterprise-level systems to work 360  by encoding organizational processes related to the usage of various tools (e.g., policy 361  definition and evaluation tools, telemetry tools, etc.) at the lower layer. 362  In short, the management plane enables the definition and deployment of consistent and uniform 363  policies for all services throughout the enterprise. In addition to the global control plane and 364  management plane, the enterprise infrastructure for a ZTA consists of local control planes 365  (associated with service mesh instances) and a set of various types of proxies that form part of 366  their respective data planes. The proxies act as the policy enforcement points (PEPs) and have 367  three types: 368  1. Ingress proxies enforce policies for entering user or service requests from client 369  applications that originate outside of the cluster into any service within the cluster. 370  2. Side-car proxies enforce policies between intra-cluster services. 371  3. Egress proxies enforce policies for requests that emanate from any service within the 372  cluster to an external application that is outside of the cluster. 373  Figure 1 shows a schematic diagram of the entire infrastructure layer for uniform (enterprise-374  wide) policy deployment for realizing a ZTA: 375  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  7  376  Fig. 1. Enterprise infrastructure layer for uniform policy deployment 377  Designing a Policy Framework for ZTA for Cloud-Native Application 378  Environments 379  Based on the set of zero trust principles and some strawman ZTAs provided in [1], the following 380  driver assumptions were formulated for realizing a ZTA for an enterprise cloud-native 381  application environment (i.e., a set of microservices in various clusters with each cluster 382  managed by a service mesh and augmented with an enterprise-level infrastructure that consists of 383  a global control plane and management plane). These driver assumptions are: 384  • Trust can no longer be based on a network perimeter as perimeters can always be 385  breached. 386  • Policies have to be defined based on the assumption that the attacker is already inside of 387  the corporate network. 388  • All access decisions have to rely on least-privilege, per-request, and context-based 389  principles and on identities associated with users, services, and devices. This results in a 390  form of runtime isolation for applications, which this document refers to as “identity-391  based segmentation.” 392  The above driver assumptions provide the design requirements for a ZTA as follows: 393  • No single component or function is sufficient to implement ZTA. Rather, they must 394  collectively enforce zero trust principles across all applications in the infrastructure. 395  • ZTA component functions should be clearly articulated, including their interrelationships 396  and workflows. 397  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  8  • The enforcement infrastructure that implements the security controls (mainly consisting 398  of PEPs) should satisfy the properties of a security kernel – always invoked (non-399  bypassable), verifiable, and independent of the application code. 400  • The core tenant or primary function of ZTA at runtime is implementing an identity-based 401  segmentation of applications that leverages the enforcement infrastructure. 402  Functional Components of Identity-Based Segmentation Policies for ZTA 403  The following policy checks should be implemented at runtime through the deployment of 404  identity-tier policies in order to realize identity-based segmentation: 405  • ID-SEG-REC-1: Encrypted connection between service endpoints – Service endpoints 406  can be located in different subnets, different availability zones or regions in a cloud 407  provider environment, in different clouds, or on-premises. Wherever they are located, 408  communication between any two should be encrypted to ensure eavesdropping protection 409  and message authenticity. 410  • ID-SEG-REC-2: Service authentication – Each service should present a short-lived 411  cryptographically verifiable identity to other services that is authenticated per connection 412  and reauthenticated regularly. 413  Note on the above recommendation: In an ideal situation, services would be authenticated 414  for each service request. Since this is highly disruptive from the point of view of 415  application transaction response, this authentication is accomplished at the connection 416  level via mutual TLS (mTLS) when a service makes an initial connection establishment 417  as part of its inter-service call. This authentication is not performed again in subsequent 418  calls. However, the security of this operation is ensured by not allowing the connections 419  to be very long (usually as long as the TTL of the service’s identity certificate or as short 420  as 15-30 minutes, depending on the configuration). 421  • ID-SEG-REC-3: Service to service authorization – Services should leverage runtime 422  service identity (ID-SEG-REC-2) to enforce granular policies and have the capability to 423  call external authorization services if the mesh level proxies are insufficient to enforce 424  dynamic authorization policies. 425  • ID-SEG-REC-4: End-user authentication – Since all application requests are triggered by 426  user actions, a robust identity management system is required to assign and maintain user 427  identities and enforce robust protocols with phishing-resistant multi-factor (MFA) 428  authentication. This system should be used to issue a cryptographically verifiable runtime 429  token that represents the user principal to the rest of the infrastructure (e.g., a JSON Web 430  Token [JWT]), and services should authenticate the credential at each hop. 431  Note on the above recommendation: Authenticating the user in session at every hop is 432  impractical at scale. Therefore, NIST recommends using short-lived end-user credentials 433  (e.g., OAuth 2.0 tokens) for external users and exchanging them for a locally 434  authenticatable token, like a JWT, that is authenticated at each hop. 435  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  9  • ID-SEG-REC-5: End-user to resource authorization – As part of each service access 436  request, the system must ensure that the authenticated end user principal (ID-SEG-REC-437  4) is authorized to act on the resources designated in the request. This authorization may 438  be performed by the application itself or checked locally (e.g., by checking against a set 439  of claims in a JWT) or externally against an authorization system’s policy decision point. 440  Enforcing end user authorization via the service mesh’s sidecar PEP is particularly 441  effective [3]. 442  Context for the application of these policy recommendations and the improved security 443  assurance that emanates from their deployment and enforcement are explained in [2] and [3]. 444  Shortcomings of Identity-Based Segmentation Policies for Enterprise ZTA 445  While identity-based segmentation is powerful, purely identity-based policies cannot currently 446  be adopted due to the following scenarios: 447  • Identity-based segmentation policies can include access scenarios that cover all origins, 448  such as users, services, and all target resources that consist of services and data. 449  However, enterprise scenarios that involve both on-premises and cloud-based 450  applications require identification of the location of those resources using network 451  parameters. Purely identity-based enforcement should by augmented by other factors 452  (e.g., network location) to evaluate risk when performing context-based authorization. 453  • A subset of identity-based segmentation policies (i.e., service identity-based) can be  454  difficult to administer since service identity assignments are often based on specific 455  domains, which makes consistent policy deployment difficult across on-premises 456  systems, cloud-based systems, and different compute runtimes. However, this is 457  mitigated by adopting consistent service names across the infrastructure using the 458  concept of a universal identity domain, as recommended in SM-DR11 of [2]. 459  • Having network-level policies alone requires high maintenance due to the continuous 460  changes to their location parameters as containers and virtualized workloads are 461  frequently migrated for availability and performance reasons (e.g., migration to different 462  VMs or  to a different pod in containerized applications). 463  Network-oriented policies cannot be completely eliminated given current compliance 464  requirements and regulations. However, relaxing requirements at the network level in exchange 465  for introducing more descriptive policy at the identity level could lead to an improved overall 466  security posture compared to network-oriented security alone.  467  Multi-Tier Policies for Enterprise ZTA 468  A successful enterprise ZTA requires multi-tier policies: 469  • Network-tier policies – Allowed communication between enterprise network elements 470  (e.g., firewall rules, which are relatively static) 471  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  10  • Identity-tier policies – Access scope for services and resources based on service and user 472  identities (e.g., dynamic application-to-application communication rules based on 473  identities through a dedicated infrastructure layer, such as user identity provided by an 474  enterprise IAM provider and service identity provided by a standard-based Secure 475  Production Identity Framework for Everyone [SPIFFE] server [4]) 476  Multi-tier policies can be implemented realistically and are non-disruptive to current compliance 477  practices. Other tiers of policy also exist. For example, in the context of the service mesh, there 478  are “application-tier” policies, which apply to the application payload itself. These include 479  coarse-grained WAF rules, fine-grained rules like Spring Cloud Gateway payload validation, and 480  the validation of request semantics via tools like the Open Policy Agent (OPA). Many can even 481  be enforced by a service mesh, but those policies are beyond the scope of this document. 482  The difficulty with having all network-tier policies is that policies expressed through firewall 483  rules have to be continuously changed, depending on the application pair behind those firewalls. 484  The flexibility in having multi-tier policies is that network-tier policies can be relatively static 485  while identity-tier policies higher up in the stack (e.g., service to service) can be dynamic, as 486  illustrated in Fig. 2.  487  488  Fig. 2. Flexibility provided by multi-tier policies 489  Implementing identity-tier policies is also a more agile process that allows for new policy 490  capabilities, such as writing policy in terms of identity and application-level action and verb. For 491  example, a network-tier policy would describe the subnets that contain application instances of 492  the client being allowed to call the subnet on a specific port. In contrast, an identity-tier policy 493  would allow the client application identity to communicate with the server application identity 494  via HTTPS on port 443 and execute only the GET method on the /public path. The full range of 495  policies that an enterprise ZTA implemented via a service mesh can enable is outlined in [2] and 496  [3]. 497  Implementing multi-tier policies by relaxing network-tier policies (e.g., by allowing 498  communication across a set of gateways) while introducing identity-tier policies with advanced 499  layer seven controls results in a better overall security posture than either a purely identity-tier or 500  purely network-tier approach.  501  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  11  Implementing Multi-Tier Policies for ZTA for Cloud-Native Application 502  Environments 503  This section will consider the implementation of multi-tier policies for realizing an enterprise 504  ZTA using a reference enterprise scenario in which an enterprise hosts microservices 505  applications in several clusters. Each cluster is serviced with a service mesh instance, and 506  clusters are spread out both on-premises and in multiple clouds.  507  Section 4.1 outlines a simple application infrastructure scenario, and Section 4.2 presents a 508  sample set of associated policies that are relevant for that context. Section 4.3 shows how the 509  same set of policies can be defined and deployed for a realistic application infrastructure scenario 510  in which the incoming traffic comes through a DMZ. 511  Reference Application Infrastructure Scenario 512  Consider an application infrastructure of an enterprise where the application topology spans a 513  cloud and on-premises environment. The applications are implemented as microservices with a 514  service mesh instance for each cluster. Hence, a sidecar proxy is associated with each service. At 515  the entry and exit points of each cluster are ingress and egress gateways, respectively. The same 516  data plane (e.g., open-source Envoy) can be used to implement both the sidecar proxy and the 517  transit gateways. 518  Next, consider establishing policies for a scenario that involves two services – Service 1 and 519  Service 2 – that reside in clusters in a cloud and on-premises, respectively. Service 1 in the cloud 520  cluster can interact with services outside of the cluster through an egress gateway. Similarly, all 521  services that attempt to access Service 2 from outside of the cluster have to go through an ingress 522  gateway. All traffic coming out of the cloud has to go through an outbound firewall, and all 523  traffic coming on-premises have to come through an inbound firewall. The paired egress-ingress 524  proxies and the firewall rules that allow them connectivity are collectively referred to as a 525  “transit gateway.” The network location for the two services are each designated by a subnet 526  address. The application topology and policies described so far is shown in Fig. 3. 527  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  12  528  Fig. 3. Multi-tier Policies for a Hybrid Application Environment 529  Role of the Service Mesh in Policy Deployment, Enforcement, and Updates 530  The service mesh has a unique role within the overall policy life cycle activities of policy 531  definition, deployment, enforcement, and update. As already stated, the service mesh is a 532  dedicated infrastructure that provides all application services, including security controls like 533  secure communication and application-level access control. These services are only possible if 534  there are also policies to enforce them during application runtime.  535  Based on the discussion of the control plane in previous sections, it should clear that this 536  component of the service mesh provides access to the interfaces of various policy definition tools 537  through which policies can be defined and updated. Thus, the control plane of the service mesh 538  acts as the policy administration point, while the underlying policy tools become the policy 539  decision point. In addition, the control plane also enables those policies to be distributed to the 540  various proxies described in the previous section. Once distributed, these proxies intercept all 541  traffic in and out of the applications, where it acts as a universal policy enforcement point. This 542  allows the service mesh – which centrally manages a fleet of the applications’ proxies – to 543  become the modern cloud-native security kernel [3]. 544  The proxies – especially the sidecars – can enforce security and traffic policies and generate 545  telemetry data to allow operators to close the loop on policy changes by authoring a change, 546  observing its effect on the runtime, and making additional changes as needed in a real-time 547  feedback control loop. In other words, the mesh provides the needed capabilities to implement 548  the runtime controls and achieve a zero trust posture. 549  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  13  Policy Deployment for Reference Application Infrastructure 550  Connectivity (between network elements) and access policies (between service instances) are 551  network-tier policies and identity-tier policies, respectively. 552  Consider the following example set of policies that contain a combination of network-tier and 553  identity-tier policies. Network-tier policies can be further categorized into coarse-grained and 554  fine-grained policies. 555  • Coarse-grained network-tier policies – These perimeter control policies are informally 556  called firewall rules and are mostly static as they specify: 557  o The network location of the egress gateway from which the network edge element 558  at the exit point of a cloud network (e.g., outbound firewall, such as the one at the 559  edge of a cloud) can receive traffic  560  o The network location of the ingress gateway to which the incoming traffic that 561  lands at the entry point of the on-premises network edge (e.g., inbound firewall at 562  the entry point to an on-premises network) should be routed: 563  Firewall: allow 10.100.2.3/30 15443 to 10.1.2.3/30:15443 564  • Fine-grained network-tier policies – These microsegmentation policies specify the 565  pathways for traffic flowing into and out of the services located within the network 566  subnets at the cloud location or on-premises location. 567  o Specify the path on which the outbound traffic from a service or an application 568  (e.g., app 1) can flow. The elements in the path that are specified include the 569  egress gateway at the edge of the cluster and, subsequently, the outbound firewall 570  for the network (cloud network in this example). 571  o Specify the path for the inbound traffic into the on-premises network to reach the 572  target application. The elements in the path start from the inbound firewall at the 573  edge of the on-premises network to the ingress gateway in an on-premises cluster 574  to the network subnet where the target service is located. 575  o Notably, they specify how traffic can flow “east-west”(i.e., inside of the 576  perimeter). This is in contrast to coarse-grained policies, which specify how 577  traffic can flow “north-south” (i.e., from an external to internal network). 578  • Identity-tier policies – These are also called mesh-level policies as they are deployed and 579  enforced at the data plane of the service mesh in the reference platform. In the context of 580  the application infrastructure and the example policies that cover traffic flows from 581  Service 1 to Service 2, these are: 582  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  14  selector:  matchLabels:  app: service-2  action: ALLOW  rules:  - from:  - source:  principals: [\"cluster.local/ns/service-1/sa/service-1\"]  to:  - operation:  ports: [\"443\"]  methods: [\"GET\"]  paths: [\"/public\"]  Fig. 4. An Istio Authorization Policy that allows Service 1 to Service 2 on port 443 but only allows it to 583  execute the GET HTTP verb on the “/public” path 584  This simple example shows some of the advanced capabilities that identity-tier policies can 585  achieve by limiting access based on the application request context. Specifically, this policy 586  limits the application actions to a single HTTP verb on a specific path, but much more 587  sophisticated policy can be implemented as well. See [2] and [3] for detailed overviews. 588  Another Application Infrastructure Scenario 589  Consider another common application scenario in which there is an internal (i.e., within a cluster 590  in the enterprise data center) three-tier application. This application is accessed from outside 591  (through a mobile app or website) through a DMZ. This scenario consists of edge gateways 592  present in the DMZ – an ingress gateway and an egress gateway at the entrance and exit points to 593  and from the data center with firewalls at either side of the gateways. Each of the services that 594  represent the front end and back end (application logic) of the three-tier application have to have 595  a sidecar proxy to enforce policies that pertain to inter-service call requests. This scenario 596  requires the definition and deployment of a combination of network-tier and identity-tier policies 597  that span the various types of gateways and the sidecar proxies. Deploying policies at these 598  multiple locations requires an enterprise-level infrastructure that plays the role of a global control 599  plane, as described in Section 2.1. This is designated as a central coordination infrastructure, as 600  shown in Fig. 5. 601  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  15  602  Fig. 5. Policy Deployment for a Three-tier Application 603  Functional Roles of Application Infrastructure Elements in Enforcing 604  Policies 605  This section will show the functionality of each of the application infrastructure elements 606  involved in the policies (e.g., firewalls, gateways, sidecar, transit, and edge proxies) in detail. 607  Since the functionality of firewalls that take part in this context for coarse network-tier policies 608  are well known, this section will focus on the functionality of gateways that take part in fine-609  grained and identity-tier policies: 610  • Sidecar – Beside each application instance to intercept all traffic into and out of the 611  application and handles “east-west” internal communication between services in the 612  infrastructure. This is the primary use case of the service mesh. 613  • Ingress gateway – Controls how applications in the cluster are exposed outside (e.g., 614  managing what names, certificates, ports, protocols, and application endpoints are served 615  to the world outside of the cluster). Think of this as the service mesh control plane that 616  manages a traditional reverse proxy similar to Spring Cloud Gateway, NGINX, or 617  HAProxy. 618  • Egress gateway – Controls how applications in the cluster communicate with the outside 619  world. This can be used for traditional egress filtering and logging, like a Squid proxy, 620  but can also implement identity-based policy for what is allowed to call out and perform 621  credential exchange, or presenting a set of credentials (e.g., an mTLS certificate for a 622  partner API), on behalf of the application so that the application does not need to handle 623  them (e.g., communicating via mTLS with the partner API). Think of this as a next-624  generation identity-aware Squid proxy. 625  • Edge gateway – Accepts external traffic before the ingress gateway and performs fine-626  grained load balancing across clusters or sites. It is used to terminate external traffic, 627  enable infrastructure-level failover, deploy blue-green clusters, and facilitate ingress-628  gateway-per-team deployments without requiring each of those teams to have publicly 629  routable ingress gateways. Think of this as a modern software-based local traffic 630  manager, like F5, that can apply policy per-request rather than per-connection. 631  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  16  Comparison of Identity-Tier and Network-Tier Policies 632  While network-tier policies are necessary for geographically distributed application 633  infrastructures and for meeting the compliance requirements of regulators, having a combination 634  of network-tier and identity-tier policies allows for some relaxation of the network-tier policies 635  as any unauthorized traffic flow due to an overlooked network element in the path can be 636  addressed through flexible service identity-tier policies. In order to appreciate the need for the 637  coexistence of both policy tiers, it is necessary to know the characteristics of both tiers of 638  policies. This layering of policies, whose strictness can be tuned per organizational needs at each 639  tier, provides agility and operational ease over status quo perimeter-based models while 640  enhancing the overall security posture of the organization. 641  4.6.1. Approaches for Deployment and the Limitations of Network-Tier Policies 642  In this approach, applications and service resources with similar security requirements are 643  grouped into a unique segment, and firewall rules are created to block or allow communication 644  with each group or segment [5]. The segments are created using network layer abstractions (e.g., 645  VLAN IDs or some other tagging approaches), while policies are defined using network address 646  constructs (e.g., IP addresses and ports). Policies apply to subnets (e.g., VLANs) rather than to 647  individual hosts. The assignment of applications to a particular segment can be based on 648  different criteria, such as “all applications with similar security requirements” or “all tiers (web 649  front end, application logic servers, and database servers) associated with a particular application 650  should run in a single segment.” 651  Each segment is protected by gateway devices, such as intelligent switches and routers or next-652  generation firewalls, which should have the capacity to react and adapt in response to the threats 653  and changes in the application workflows. Segmentation gateways monitor traffic, stop threats, 654  and enforce granular access across east-west traffic (rarely for north-south traffic) within on-655  premises data centers or cloud regions. The main difficulty with this approach is in mapping the 656  applications’ security requirements-based segments to corresponding network segments. Another 657  difficulty is change management. The mapping between applications and network identities that 658  are being statically maintained has to continuously be kept in sync with the operational scenario 659  in which the application’s network locations are continuously changing due to performance and 660  security. 661  More modern cloud-native deployments that leverage techniques like container network 662  interface-driven network policy are good improvements because they provide identity-tier style 663  policies (i.e., policy in terms of identities and non-network-oriented nouns) while implementing 664  that policy at the network layer (e.g., via eBPF policy or BGP propagation rules). These are a 665  strong upgrade from traditional microsegmentation because they tend to result in finer-grained 666  policies that are easier for the organization to manage over time. However, they typically lack 667  the ability to apply policy per request in the context of the application, which is needed to 668  achieve identity-based segmentation. 669  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  17  4.6.2. Prerequisites for the Deployment of Identity-Tier Policies 670  Identity-tier policies use contextual, application-driven identifiers (e.g., “order processing front-671  end service can communicate with inventory back-end service”) instead of network parameters 672  (e.g., “permit calls from 192.168.10.x subnet to 10.0.0.31”). The identifiers assigned to services 673  at runtime are cryptographic identities, which are used for mutual authentication and 674  authorization during each service request and response. 675  Deploying identity-tier policies requires a standardized infrastructure for creating, issuing, and 676  maintaining tamper-proof service identities. Some of the components of this infrastructure are 677  outlined below and are also discussed in [5]: 678  • Creation of application identity: The fundamental requirement to enable this is the 679  assignment of a unique identity to each application or service, just like how each user 680  carries a unique identity (e.g., userid). Prior to the era of cloud-based applications, 681  application requests were validated based on the IP subnet or IP address from which they 682  originated. Since ubiquitous access and multi-clouds have eliminated the concept of 683  network perimeters, authentication and authorization based on those parameters are 684  neither feasible nor scalable. Further, the presence of proxies, network address 685  translations, dynamic infrastructures (e.g., migration of applications between VMs), and 686  load balancers make it impossible for the called application to know the IP address of the 687  calling application in order to make authentication or authorization decisions. A unique 688  application identity is required. 689  • Establishment of trust in application identity: The created application (workload or 690  service) identity should not be subject to spoofing and should be continuously verifiable. 691  An example of workload identity is a SPIFFE ID [4], which is a string that uniquely and 692  specifically identifies a workload and is encoded as a Uniform Resource Identifier (URI). 693  The SPIFFE ID is carried in a cryptographically verifiable document called a SPIFFE 694  Verifiable Identity Document (SVID). SPIFFE supports multiple SVID formats, but the 695  most commonly used is an X.509 certificate. 696  • Discovery of application resources: There should be a robust and secure method for 697  discovering all of the application dependencies consumed over the network (e.g., 698  services, SaaS endpoints, network appliances, etc.). This capability is enabled through an 699  authenticated service registry. 700  These allowable flows can be based on either (a) the structure of the application (i.e., “the front 701  end of application 1 can call the back end of application 1”) or (b) a legitimate business 702  transaction (e.g., “order processing application can call the shipping application”). Often, 703  organizations do not know all of the allowable service requests in their infrastructure. However, 704  the observability capabilities of the infrastructure (e.g., the metrics provided by the service mesh) 705  can be leveraged to build a view of “requests made today.” From that view, the organization can 706  begin to create fine-grained policies for allowable service requests. Utilizing this observe-and-707  lock-down methodology builds the organizational processes required to maintain the life cycle of 708  these policies over time. 709  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  18  4.6.3. Advantages of Identity-Tier Policies 710  Policies based on service and application identities do not use any infrastructure-related variables 711  (e.g., IP addresses, subnets), so they are environment-agnostic and provide the freedom for the 712  services and applications to be migrated to different environments and still maintain the same 713  policies. In other words, there can be a consistent set of policies across cloud providers and on-714  premises because the policy follows the application rather than the network. 715  • Identity-tier policies enable the automated testing of policies. Policies that are 716  independent of infrastructure can be tested by merely exercising the application and 717  observing the outcomes (e.g., trace the sequence of service calls and requests or 718  responses instead of configuring the infrastructure correctly for test runs). 719  • Identity-tier policies enable “policy as code” (PaC). With the availability of tools for the 720  declarative specification of policies through PaC, identity-tier policies can be defined and 721  implemented by incorporating the code into automated workflows, such as CI/CD 722  pipelines. 723  • Identity-tier policies enable granular (fine-grained) access control by providing visibility 724  into application call sequences/interdependencies and data flows through request-level 725  tracking, which enables the enforcement of security policies for application traffic that is 726  both north-south and east-west, irrespective of the environment (e.g., corporate data 727  center or cloud infrastructure). 728  Additional advantages include:  729  • Write once, enforce everywhere – This means that policy can span environments and 730  topologies (i.e., write a policy once, and enforce it everywhere) rather than bespoke 731  policies per environment. 732  • Human-readable primitives – The written policies use human-understandable primitives 733  (e.g., “service A can call service B”) rather than network-oriented primitives (e.g., 734  “10.1.2.3/30 is allowed to call 10.100.2.3/30 on port 8080”). This context is critical since 735  the lack of context for rules is a key reason for the lack of agility around traditional 736  network policy. 737  • Contextual intent is codified in a single policy – There is a single policy, not a set of 738  policies that need to be pieced together to understand their intent. A human can read a 739  policy like “the front-end service is allowed to call ‘GET /foo’ on the back-end service” 740  and understand the access that the policy intends to convey even if, for example, the front 741  end is deployed in the cloud and the back end is deployed on-premises. It is significantly 742  harder to read a set of network peering and firewall rules that allow communication 743  across the DMZ for a set of subnets and understand the access that the policy intends to 744  convey. In turn, this means it is harder to write the wrong policy and easier for a human 745  to understand when a policy is incorrect. 746  Identity-tier policies enable only valid network traffic between the various component services of 747  the application due to the mutual authentication and authorization of the service identities, thus 748  enabling the goals of ZTNA to be met. 749  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  19  Summary and Conclusions 750  This document provides guidance for realizing a ZTA for cloud-native application platforms 751  (microservices with a service mesh infrastructure) in the context of an enterprise environment in 752  which applications are hosted in multi-cluster and multi-cloud deployments. A ZTA consists of 753  deployment artifacts that enforce zero trust principles, which is only possible with robust, 754  flexible, scalable, and granular policies that cover all enterprise resources. A policy framework 755  that consists of network-tier and identity-tier policies to meet these goals has been proposed in 756  this document. 757  The artifacts needed for the definition, deployment, and enforcement of these policies have been 758  discussed along with examples of network-tier policies and identity-tier policies. The 759  applicability of these policies in modern enterprise application infrastructures is also illustrated. 760  Finally, the policies that belong to the two tiers are compared in terms of their advantages and 761  limitations, and the critical role of identity-tier policies for realizing a ZTA in the context of 762  modern cloud-native application infrastructures is emphasized. 763  764  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  20  References 765  [1] Rose S, Borchert O, Mitchell S, Connelly S (2020) Zero Trust Architecture. (National 766  Institute of Standards and Technology, Gaithersburg, MD), NIST Special Publication (SP) 767  NIST SP 800-207. https://doi.org/10.6028/NIST.SP.800-207 768  [2] Chandramouli R, Butcher Z (2020) Building Secure Microservices-based Applications 769  Using Service-Mesh Architecture. (National Institute of Standards and Technology, 770  Gaithersburg, MD), NIST Special Publication (SP) NIST SP 800-204A. 771  https://doi.org/10.6028/NIST.SP.800-204A 772  [3] Chandramouli R, Butcher Z, Aradhna C (2021) Attribute-based Access Control for 773  Microservices-based Applications using a Service Mesh. (National Institute of Standards 774  and Technology, Gaithersburg, MD), NIST Special Publication (SP) NIST SP 800-204B. 775  https://doi.org/10.6028/NIST.SP.800-204B 776  [4] SPIFFE (2022) SPIFFE Concepts. Available at https://spiffe.io/docs/latest/spiffe-777  about/spiffe-concepts/ 778  [5] Chandramouli R (2022) Guide to a Secure Enterprise Network Landscape. (National 779  Institute of Standards and Technology, Gaithersburg, MD), NIST Special Publication (SP) 780  NIST SP 800-215. https://doi.org/10.6028/NIST.SP.800-215 781  782  https://doi.org/10.6028/NIST.SP.800-207 https://doi.org/10.6028/NIST.SP.800-204A https://doi.org/10.6028/NIST.SP.800-204B https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/ https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/ https://doi.org/10.6028/NIST.SP.800-215  Executive Summary  1. Introduction  1.1. Background – Zero Trust Principles and Zero Trust Architecture  1.2. Relationship to Other NIST Guidance Documents  1.3. Scope  1.4. Target Audience  1.5. Organization of This Document  2. The Enterprise Cloud-Native Platform and its Components  2.1. Enterprise Infrastructure Layer  3. Designing a Policy Framework for ZTA for Cloud-Native Application Environments  3.1. Functional Components of Identity-Based Segmentation Policies for ZTA  3.2. Shortcomings of Identity-Based Segmentation Policies for Enterprise ZTA  3.3. Multi-Tier Policies for Enterprise ZTA  4. Implementing Multi-Tier Policies for ZTA for Cloud-Native Application Environments  4.1. Reference Application Infrastructure Scenario  4.2. Role of the Service Mesh in Policy Deployment, Enforcement, and Updates  4.3. Policy Deployment for Reference Application Infrastructure  4.4. Another Application Infrastructure Scenario  4.5. Functional Roles of Application Infrastructure Elements in Enforcing Policies  4.6. Comparison of Identity-Tier and Network-Tier Policies  4.6.1. Approaches for Deployment and the Limitations of Network-Tier Policies  4.6.2. Prerequisites for the Deployment of Identity-Tier Policies  4.6.3. Advantages of Identity-Tier Policies  5. Summary and Conclusions  References",
    "original document": "NIST SP 800-207A initial public draft, A Zero Trust Architecture Model for Access Control in Cloud-Native Applications in Multi-Location Environments  NIST Special Publication 1  NIST SP 800-207A ipd 2  A Zero Trust Architecture Model 3  for Access Control in Cloud-Native 4  Applications in Multi-Location 5  Environments 6  Initial Public Draft7  8  Ramaswamy Chandramouli 9  Zack Butcher 10  11  This publication is available free of charge from: 12  https://doi.org/10.6028/NIST.800-207A.ipd 13  https://crossmark.crossref.org/dialog/?doi=10.6028/NIST.SP.800-207A.ipd  NIST Special Publication  14  NIST SP 800-207A ipd 15  A Zero Trust Architecture Model 16  for Access Control in Cloud-Native 17  Applications in Multi-Location 18  Environments 19  20  Initial Public Draft 21  Ramaswamy Chandramouli 22  Computer Security Division 23  Information Technology Laboratory 24  25  Zack Butcher 26  Tetrate, Inc. 27  This publication is available free of charge from: 28  https://doi.org/10.6028/NIST.800-207A.ipd 29  April 2023 30  31  U.S. Department of Commerce  32  Gina M. Raimondo, Secretary 33  National Institute of Standards and Technology  34  Laurie E. Locascio, NIST Director and Under Secretary of Commerce for Standards and Technology35  36  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  Certain commercial equipment, instruments, software, or materials, commercial or non-commercial, are identified in 37  this paper in order to specify the experimental procedure adequately. Such identification does not imply 38  recommendation or endorsement of any product or service by NIST, nor does it imply that the materials or 39  equipment identified are necessarily the best available for the purpose. 40  There may be references in this publication to other publications currently under development by NIST in 41  accordance with its assigned statutory responsibilities. The information in this publication, including concepts and 42  methodologies, may be used by federal agencies even before the completion of such companion publications. Thus, 43  until each publication is completed, current requirements, guidelines, and procedures, where they exist, remain 44  operative. For planning and transition purposes, federal agencies may wish to closely follow the development of 45  these new publications by NIST.  46  Organizations are encouraged to review all draft publications during public comment periods and provide feedback 47  to NIST. Many NIST cybersecurity publications, other than the ones noted above, are available at 48  https://csrc.nist.gov/publications. 49  Authority 50  This publication has been developed by NIST in accordance with its statutory responsibilities under the Federal 51  Information Security Modernization Act (FISMA) of 2014, 44 U.S.C. § 3551 et seq., Public Law (P.L.) 113-283. 52  NIST is responsible for developing information security standards and guidelines, including minimum requirements 53  for federal information systems, but such standards and guidelines shall not apply to national security systems 54  without the express approval of appropriate federal officials exercising policy authority over such systems. This 55  guideline is consistent with the requirements of the Office of Management and Budget (OMB) Circular A-130. 56  57  Nothing in this publication should be taken to contradict the standards and guidelines made mandatory and binding 58  on federal agencies by the Secretary of Commerce under statutory authority. Nor should these guidelines be 59  interpreted as altering or superseding the existing authorities of the Secretary of Commerce, Director of the OMB, or 60  any other federal official.  This publication may be used by nongovernmental organizations on a voluntary basis and 61  is not subject to copyright in the United States. Attribution would, however, be appreciated by NIST.  62  NIST Technical Series Policies 63  Copyright, Use, and Licensing Statements 64  NIST Technical Series Publication Identifier Syntax 65  Publication History 66  Approved by the NIST Editorial Review Board on YYYY-MM-DD [Will be updated in final publication] 67  How to Cite this NIST Technical Series Publication:  68  Chandramouli R, Butcher Z (2023) A Zero-Trust Architecture Model for Access Control in Cloud Native 69  Applications in Multi-Location Environments. (National Institute of Standards and Technology, Gaithersburg, MD), 70  NIST Special Publication (SP) NIST SP 800-207A ipd. https://doi.org/10.6028/NIST.800-207A.ipd  71  Author ORCID iDs 72  Ramaswamy Chandramouli: 0000-0002-7387-5858 73  Public Comment Period 74  April 18, 2023 – June 7, 2023 75  https://csrc.nist.gov/publications https://doi.org/10.6028/NIST-TECHPUBS.CROSSMARK-POLICY https://www.nist.gov/document/publication-identifier-syntax-nist-technical-series-publications  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  Submit Comments 76  sp800-207A-comments@nist.gov 77  78  National Institute of Standards and Technology 79  Attn: Computer Security Division, Information Technology Laboratory 80  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 81  All comments are subject to release under the Freedom of Information Act (FOIA).82  mailto:sp800-207A-comments@nist.gov  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  i  Abstract 83  One of the basic tenets of zero trust is to remove the implicit trust in users, services, and devices 84  based only on their network location, affiliation, and ownership. NIST Special Publication 800-85  207 has laid out a comprehensive set of zero trust principles and referenced zero trust 86  architectures (ZTA) for turning those concepts into reality. A key paradigm shift in ZTAs is the 87  change in focus from security controls based on segmentation and isolation using network 88  parameters (e.g., IP addresses, subnets, perimeter) to identities. From an application security 89  point of view, this requires authentication and authorization policies based on application and 90  service identities in addition to the underlying network parameters and user identities. This in 91  turn requires a platform that consists of API gateways, sidecar proxies, and application identity 92  infrastructures (e.g., SPIFFE) that can enforce those policies irrespective of the location of the 93  services/applications, whether on-premises or on multiple clouds. The objective of this 94  publication is to provide guidance for realizing an architecture that can enforce granular 95  application-level policies while meeting the runtime requirements of ZTA for multi-cloud and 96  hybrid environments. 97  Keywords 98  egress gateway; identity-tier policies; ingress gateway; microservices; multi-cloud; network-tier 99  policies; service mesh; sidecar proxy; SPIFFE; transit gateway; zero trust; zero trust architecture. 100  Reports on Computer Systems Technology 101  The Information Technology Laboratory (ITL) at the National Institute of Standards and 102  Technology (NIST) promotes the U.S. economy and public welfare by providing technical 103  leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test 104  methods, reference data, proof of concept implementations, and technical analyses to advance 105  the development and productive use of information technology. ITL’s responsibilities include the 106  development of management, administrative, technical, and physical standards and guidelines for 107  the cost-effective security and privacy of other than national security-related information in 108  federal information systems. The Special Publication 800-series reports on ITL’s research, 109  guidelines, and outreach efforts in information system security, and its collaborative activities 110  with industry, government, and academic organizations. 111  112  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  ii  Call for Patent Claims 113  This public review includes a call for information on essential patent claims (claims whose use 114  would be required for compliance with the guidance or requirements in this Information 115  Technology Laboratory (ITL) draft publication). Such guidance and/or requirements may be 116  directly stated in this ITL Publication or by reference to another publication. This call also 117  includes disclosure, where known, of the existence of pending U.S. or foreign patent applications 118  relating to this ITL draft publication and of any relevant unexpired U.S. or foreign patents. 119  ITL may require from the patent holder, or a party authorized to make assurances on its behalf, 120  in written or electronic form, either: 121  a) assurance in the form of a general disclaimer to the effect that such party does not hold 122  and does not currently intend holding any essential patent claim(s); or 123  b) assurance that a license to such essential patent claim(s) will be made available to 124  applicants desiring to utilize the license for the purpose of complying with the guidance 125  or requirements in this ITL draft publication either: 126  i. under reasonable terms and conditions that are demonstrably free of any unfair 127  discrimination; or 128  ii. without compensation and under reasonable terms and conditions that are 129  demonstrably free of any unfair discrimination. 130  Such assurance shall indicate that the patent holder (or third party authorized to make assurances 131  on its behalf) will include in any documents transferring ownership of patents subject to the 132  assurance, provisions sufficient to ensure that the commitments in the assurance are binding on 133  the transferee, and that the transferee will similarly include appropriate provisions in the event of 134  future transfers with the goal of binding each successor-in-interest. 135  The assurance shall also indicate that it is intended to be binding on successors-in-interest 136  regardless of whether such provisions are included in the relevant transfer documents. 137  Such statements should be addressed to: sp800-207A-comments@nist.gov 138  139  mailto:sp800-207A-comments@nist.gov  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  iii  Table of Contents 140  Executive Summary ................................................................................................................. 1 141  Introduction ...................................................................................................................... 2 142  Background – Zero Trust Principles and Zero Trust Architecture ................................ 2 143  Relationship to Other NIST Guidance Documents ...................................................... 3 144  Scope ......................................................................................................................... 3 145  Target Audience ......................................................................................................... 4 146  Organization of This Document .................................................................................. 4 147  The Enterprise Cloud-Native Platform and its Components ......................................... 5 148  Enterprise Infrastructure Layer ................................................................................... 6 149  Designing a Policy Framework for ZTA for Cloud-Native Application Environments . 7 150  Functional Components of Identity-Based Segmentation Policies for ZTA .................. 8 151  Shortcomings of Identity-Based Segmentation Policies for Enterprise ZTA ................ 9 152  Multi-Tier Policies for Enterprise ZTA ......................................................................... 9 153  Implementing Multi-Tier Policies for ZTA for Cloud-Native Application Environments154  11 155  Reference Application Infrastructure Scenario ...........................................................11 156  Role of the Service Mesh in Policy Deployment, Enforcement, and Updates .............12 157  Policy Deployment for Reference Application Infrastructure.......................................13 158  Another Application Infrastructure Scenario ...............................................................14 159  Functional Roles of Application Infrastructure Elements in Enforcing Policies ...........15 160  Comparison of Identity-Tier and Network-Tier Policies ..............................................16 161  4.6.1. Approaches for Deployment and the Limitations of Network-Tier Policies ...............16 162  4.6.2. Prerequisites for the Deployment of Identity-Tier Policies ........................................17 163  4.6.3. Advantages of Identity-Tier Policies .........................................................................18 164  Summary and Conclusions ............................................................................................19 165  References ..............................................................................................................................20 166  List of Figures 167  Fig. 1. Enterprise infrastructure layer for uniform policy deployment .......................................... 7 168  Fig. 2. Flexibility provided by multi-tier policies .........................................................................10 169  Fig. 3. Multi-tier Policies for a Hybrid Application Environment .................................................12 170  Fig. 4. An Istio Authorization Policy that allows Service 1 to Service 2 on port 443 but only 171  allows it to execute the GET HTTP verb on the “/public” path ........................................14 172  Fig. 5. Policy Deployment for a Three-tier Application ...............................................................15 173  174  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  iv  Acknowledgments 175  The author would like to express his thanks to Isabel Van Wyk of NIST for her detailed editorial 176  review of the public comment version as well as the final publication. 177  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  1  Executive Summary 178  The principles of zero trust, as described in NIST Special Publication (SP) 800-207, have 179  become the guiding markers for developing secure zero trust architecture. A well-established 180  class of applications are cloud-native applications. The generally accepted characterization of a 181  cloud native application includes the following: 182  • The application is made up of a set of loosely coupled components called microservices. 183  Each of the microservices can be hosted on different physical or virtual machines (VMs) 184  and even be geographically distributed (e.g., within several facilities that belong to the 185  enterprise, such as the headquarters, branch offices, and in various cloud service provider 186  environments). 187  • Any transaction involving the application may also involve one or more inter-service 188  (microservice) calls across the network. 189  • A widespread feature (though not necessarily a requirement for cloud-native application) 190  is the presence of a software platform called the service mesh that provides an integrated 191  set of all application services (e.g., services discovery, networking connections, 192  communication resilience, and security services like authentication and authorization). 193  The realization of a zero trust architecture for the above class of cloud-native applications 194  requires a robust policy framework. In order to follow zero trust principles, the constituent 195  polices in the framework should consider the following scenario: 196  • There should not be implicit trust in users, services, or devices based exclusively on their 197  network location, affiliation, or ownership. Hence, policy definitions and associated 198  security controls based on the segmentation or isolation of networks using network 199  parameters (e.g., IP addresses, subnets, perimeter) are insufficient. These policies fall 200  under the classification of network-tier policies. 201  • To ensure the presence of zero trust principles throughout the entire application, network-202  tier policies must be augmented with policies that establish trust in the identity of the 203  various participating entities (e.g., users and services) irrespective of the location of the 204  services or applications, whether on-premises or on multiple clouds. 205  This document provides guidance for realizing a zero trust architecture that can enforce granular 206  application-level policies for cloud-native applications. The guidance is anchored in the 207  following: 208  • A combination of network-tier and identity-tier policies 209  • The components of cloud-native applications that enable the definition and deployment 210  of those policies, such as edge, ingress, sidecar, and egress gateways; the creation, 211  issuance, and maintenance of service identities; the issuance of authentication and 212  authorization tokens that carry user identities in the enterprise application infrastructure 213  that encompasses multi-cloud and hybrid environments 214  215  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  2  Introduction  216  Zero trust (ZT) tenets or principles have been accepted as the guide markers for architecting all 217  applications. There are several reasons why adherence to these tenets is critical for obtaining 218  necessary security assurances, especially for cloud-native applications. The enterprise 219  application environments for this class of applications is highly geographically distributed and 220  span multiple cloud and on-premises environments (e.g., headquarters, enterprise-operated data 221  centers, branch offices, etc.). Further, the user base consists of both remote and on-premises 222  employees. These two features call for establishing trust in all of the data sources and computing 223  services of the enterprise – irrespective of their location – through secure communication and the 224  validation of access policies.  225  Apart from geographic distribution, another common feature of cloud-native applications is the 226  presence of many microservices that are loosely coupled and collectively support business 227  processes through extensive inter-service calls. This is augmented with an integrated 228  infrastructure for providing all application services called the service mesh. These features 229  emphasize the concept of identity for the various components of the application in the form of 230  microservices as well as the users who access them through direct calls or clients (other 231  services). This in turn highlights the critical need for authenticating these identities and for 232  providing legitimate access on a per-session basis through a dynamic policy that takes the current 233  status of the user, service, and requested asset into account. 234  The above requirements can only be met through a comprehensive policy framework. This 235  document provides guidance for developing a policy framework that will form the foundation for 236  realizing a zero trust architecture (ZTA) while incorporating zero trust principles into its design 237  for cloud-native applications. The policy framework should also consist of a comprehensive set 238  of policies that span all critical entities and resources in the application stack, including the 239  network, network devices, users, and services. 240  Background – Zero Trust Principles and Zero Trust Architecture  241  A summary of the zero trust principles and the definition of a zero trust architecture, as described 242  in NIST SP 800-207 [1], are: 243  • Zero trust is the term for an evolving set of cybersecurity paradigms that move defenses 244  from static, network-based perimeters to focus on users, assets, and resources. It is a set 245  of security primitives rather than a particular set of technologies. Zero trust assumes that 246  there is no implicit trust granted to assets or user accounts based solely on their physical 247  or network location (i.e., local area networks versus the internet) or on asset ownership 248  (e.g., enterprise or personally owned). Zero trust focuses on protecting resources (e.g., 249  assets, services, workflows, network accounts) rather than network segments, as the 250  network location is no longer seen as the prime component to the security posture of the 251  resource. 252  • A zero trust architecture uses zero trust principles to plan industrial and enterprise 253  infrastructures and workflows. 254  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  3  NIST’s guidance on zero trust also contains an abstract definition of zero trust architecture and 255  gives general deployment models and use cases with which zero trust could improve an 256  enterprise’s overall information technology security posture. 257  Relationship to Other NIST Guidance Documents 258  Since the current document provides guidance for the realization of ZTA for cloud-native 259  applications hosted in multiple locations (on-premises and multiple clouds) and the enforcement 260  of ZT principles requires policies that are associated with various security services, it will be 261  useful to refer to the following documents. These documents provide background information for 262  the architecture of a microservices-based application with service mesh as well as guidance for 263  configuring specific security services. The current document expands the reference environment 264  to one where the IT application infrastructure of an enterprise spans multiple premises and 265  multiple cloud provider locations as well as addresses the range of policies that are required for 266  comprehensive security assurance. 267  • NIST SP 800-204A, Building Secure Microservices-based Applications Using Service-268  Mesh Architecture [2], provides deployment guidance for various security services (e.g., 269  establishment of secure sessions, security monitoring, etc.) for a microservices-based 270  application using a dedicated infrastructure (i.e., a service mesh) based on service proxies 271  that operate independently of the application code. 272  • NIST SP 800-204B [3], Attribute-based Access Control for Microservices-based 273  Applications Using a Service Mesh, provides deployment guidance for building an 274  authentication and authorization framework within the service mesh that meets the 275  security requirements. This may include establishing (1) zero trust by enabling mutual 276  authentication in communication between any pair of services and (2) a robust access 277  control mechanism based on an access control model (e.g., the attribute-based access 278  control [ABAC] model) that can be used to express a wide set of policies and is scalable 279  in terms of user base, objects (resources), and deployment environment. 280  Scope 281  The scope of this document includes: 282  • Identifying the requirements for realizing a ZTA for granular access control in 283  microservices-based application platforms that include a service mesh infrastructure 284  • Identifying the infrastructural elements that should be part of the platform in order to 285  configure and implement ZT principles 286  • Guidance for deploying a ZTA in the above platform and outlining the security 287  assurances that the deployment can provide 288  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  4  Target Audience 289  This guidance is intended for security architects and infrastructure designers in organizations 290  with a hybrid IT environment (consisting of both on-premises and multiple cloud-based 291  applications) with a combination of legacy and microservices-based (i.e., cloud-native) 292  applications with a built-in application services infrastructure, such as a service mesh. 293  Organization of This Document 294  The organization of this document is as follows: 295  • Section 2 describes a modern enterprise cloud-native application platform that includes a 296  dedicated infrastructure for providing all application services as well as a management 297  plane when the application spans both on-premises and multiple cloud service provider 298  locations. 299  • Section 3 introduces the basic concepts of a policy framework for ZTA for the platform 300  described in the previous section in terms of drivers and design requirements. It also 301  provides an analysis of identity-based policies and introduces the concept of multi-tier 302  policies. 303  • Section 4 describes the implementation approach for deploying multi-tier policies for two 304  enterprise application infrastructure scenarios by outlining the roles of the service mesh, 305  the functional components involved, and the advantages of identity-tier policies, which 306  provide service-level segmentation and play a critical role in the security assurance of an 307  application ecosystem to conform to zero trust principles or tenets. 308  • Section 5 provides a summary and conclusion. 309  310  311  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  5  The Enterprise Cloud-Native Platform and its Components 312  An enterprise cloud-native platform is increasingly made up of microservices that are 313  implemented as containers and hosted on a container orchestration platform. In addition, it has a 314  dedicated infrastructure layer called a service mesh, which provides a comprehensive set of 315  application services (e.g., network connectivity, network resilience, observability, and security). 316  The application services provided by a service mesh are enabled by the following: 317  • A built-in infrastructure for (a) providing service identities, (b) service discovery, and (c) 318  external policy-based authorization engines based on Next Generation Access Control 319  (NGAC), Attribute-based Access Control (ABAC), and Open Policy Agent (OPA)  320  • Code for performing network-related functions (e.g., traffic routing) and for ensuring 321  network resiliency through functions such as retries, timeouts, blue-green deployments, 322  and circuit breaking  323  • Code for ensuring application integrity and confidentiality through service-to-service and 324  user-to-resource authentications and authorizations 325  More details on the container orchestration platform with an integrated service mesh can be 326  found in [2], and an access control implementation in that platform is described extensively in 327  [3]. 328  In the modern enterprise, the platform described above is present in both on-premises data 329  centers and multiple cloud service locations. Assuming that a service mesh instance is deployed 330  for managing a single cluster that consists of the above platforms, there will be multiple clusters 331  spread over multiple on-premises sites and multiple availability zones in different clouds. 332  Consequently, there will be multiple service mesh instances. 333  Each service mesh instance has two main logical components: 1) a control plane that implements 334  the APIs needed to define various configurations and policies that govern access between various 335  microservices in that cluster and 2) a data plane that enforces those policies at runtime. However, 336  a uniform set of policies is also needed to govern access between any pair of microservices or 337  services in the enterprise irrespective of their location or the service mesh instance of which they 338  are a part. This requires a global control plane that can define a uniform set of policies applicable 339  to the entire set of services that operate in the enterprise and disseminate them to the control 340  planes of the individual service mesh instances. 341  It is technically possible to have a single service mesh control plane instance (i.e., single service 342  mesh instance) that manages multiple clusters spanning multiple environments (i.e., on-premises 343  and on clouds). However, this architecture may make the multiple clusters a single failure 344  domain and potentially defeat the very purpose of designing a multi-cluster configuration (i.e., 345  availability). Thus, running a service mesh control plane instance for each cluster isolates the 346  failure domain and improves availability and scalability. Further, providing the required 347  underlying network connectivity to facilitate every workload (since each workload or application 348  instance has an associated sidecar proxy that forms the data plane) to communicate with a single 349  control plane instance is untenable in most enterprise environments and impossible in many 350  government ones (e.g., air-gapped systems). 351  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  6  Enterprise Infrastructure Layer 352  The global control plane forms an integral part of the enterprise infrastructure layer. The 353  management plane that contains the various interfaces is hosted within the global control plane. 354  The roles of the global control plane and the management plane are as follows: 355  • The global control plane can be leveraged to perform the functions of individual control 356  planes at the enterprise level rather than at the cluster level (e.g., issuing identities to all 357  services in the enterprise by leveraging the enterprise PKI system). 358  • The management plane provides the human-computer interfaces (e.g., user interfaces, 359  such as command line interfaces and APIs) that enable enterprise-level systems to work 360  by encoding organizational processes related to the usage of various tools (e.g., policy 361  definition and evaluation tools, telemetry tools, etc.) at the lower layer. 362  In short, the management plane enables the definition and deployment of consistent and uniform 363  policies for all services throughout the enterprise. In addition to the global control plane and 364  management plane, the enterprise infrastructure for a ZTA consists of local control planes 365  (associated with service mesh instances) and a set of various types of proxies that form part of 366  their respective data planes. The proxies act as the policy enforcement points (PEPs) and have 367  three types: 368  1. Ingress proxies enforce policies for entering user or service requests from client 369  applications that originate outside of the cluster into any service within the cluster. 370  2. Side-car proxies enforce policies between intra-cluster services. 371  3. Egress proxies enforce policies for requests that emanate from any service within the 372  cluster to an external application that is outside of the cluster. 373  Figure 1 shows a schematic diagram of the entire infrastructure layer for uniform (enterprise-374  wide) policy deployment for realizing a ZTA: 375  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  7  376  Fig. 1. Enterprise infrastructure layer for uniform policy deployment 377  Designing a Policy Framework for ZTA for Cloud-Native Application 378  Environments 379  Based on the set of zero trust principles and some strawman ZTAs provided in [1], the following 380  driver assumptions were formulated for realizing a ZTA for an enterprise cloud-native 381  application environment (i.e., a set of microservices in various clusters with each cluster 382  managed by a service mesh and augmented with an enterprise-level infrastructure that consists of 383  a global control plane and management plane). These driver assumptions are: 384  • Trust can no longer be based on a network perimeter as perimeters can always be 385  breached. 386  • Policies have to be defined based on the assumption that the attacker is already inside of 387  the corporate network. 388  • All access decisions have to rely on least-privilege, per-request, and context-based 389  principles and on identities associated with users, services, and devices. This results in a 390  form of runtime isolation for applications, which this document refers to as “identity-391  based segmentation.” 392  The above driver assumptions provide the design requirements for a ZTA as follows: 393  • No single component or function is sufficient to implement ZTA. Rather, they must 394  collectively enforce zero trust principles across all applications in the infrastructure. 395  • ZTA component functions should be clearly articulated, including their interrelationships 396  and workflows. 397  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  8  • The enforcement infrastructure that implements the security controls (mainly consisting 398  of PEPs) should satisfy the properties of a security kernel – always invoked (non-399  bypassable), verifiable, and independent of the application code. 400  • The core tenant or primary function of ZTA at runtime is implementing an identity-based 401  segmentation of applications that leverages the enforcement infrastructure. 402  Functional Components of Identity-Based Segmentation Policies for ZTA 403  The following policy checks should be implemented at runtime through the deployment of 404  identity-tier policies in order to realize identity-based segmentation: 405  • ID-SEG-REC-1: Encrypted connection between service endpoints – Service endpoints 406  can be located in different subnets, different availability zones or regions in a cloud 407  provider environment, in different clouds, or on-premises. Wherever they are located, 408  communication between any two should be encrypted to ensure eavesdropping protection 409  and message authenticity. 410  • ID-SEG-REC-2: Service authentication – Each service should present a short-lived 411  cryptographically verifiable identity to other services that is authenticated per connection 412  and reauthenticated regularly. 413  Note on the above recommendation: In an ideal situation, services would be authenticated 414  for each service request. Since this is highly disruptive from the point of view of 415  application transaction response, this authentication is accomplished at the connection 416  level via mutual TLS (mTLS) when a service makes an initial connection establishment 417  as part of its inter-service call. This authentication is not performed again in subsequent 418  calls. However, the security of this operation is ensured by not allowing the connections 419  to be very long (usually as long as the TTL of the service’s identity certificate or as short 420  as 15-30 minutes, depending on the configuration). 421  • ID-SEG-REC-3: Service to service authorization – Services should leverage runtime 422  service identity (ID-SEG-REC-2) to enforce granular policies and have the capability to 423  call external authorization services if the mesh level proxies are insufficient to enforce 424  dynamic authorization policies. 425  • ID-SEG-REC-4: End-user authentication – Since all application requests are triggered by 426  user actions, a robust identity management system is required to assign and maintain user 427  identities and enforce robust protocols with phishing-resistant multi-factor (MFA) 428  authentication. This system should be used to issue a cryptographically verifiable runtime 429  token that represents the user principal to the rest of the infrastructure (e.g., a JSON Web 430  Token [JWT]), and services should authenticate the credential at each hop. 431  Note on the above recommendation: Authenticating the user in session at every hop is 432  impractical at scale. Therefore, NIST recommends using short-lived end-user credentials 433  (e.g., OAuth 2.0 tokens) for external users and exchanging them for a locally 434  authenticatable token, like a JWT, that is authenticated at each hop. 435  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  9  • ID-SEG-REC-5: End-user to resource authorization – As part of each service access 436  request, the system must ensure that the authenticated end user principal (ID-SEG-REC-437  4) is authorized to act on the resources designated in the request. This authorization may 438  be performed by the application itself or checked locally (e.g., by checking against a set 439  of claims in a JWT) or externally against an authorization system’s policy decision point. 440  Enforcing end user authorization via the service mesh’s sidecar PEP is particularly 441  effective [3]. 442  Context for the application of these policy recommendations and the improved security 443  assurance that emanates from their deployment and enforcement are explained in [2] and [3]. 444  Shortcomings of Identity-Based Segmentation Policies for Enterprise ZTA 445  While identity-based segmentation is powerful, purely identity-based policies cannot currently 446  be adopted due to the following scenarios: 447  • Identity-based segmentation policies can include access scenarios that cover all origins, 448  such as users, services, and all target resources that consist of services and data. 449  However, enterprise scenarios that involve both on-premises and cloud-based 450  applications require identification of the location of those resources using network 451  parameters. Purely identity-based enforcement should by augmented by other factors 452  (e.g., network location) to evaluate risk when performing context-based authorization. 453  • A subset of identity-based segmentation policies (i.e., service identity-based) can be  454  difficult to administer since service identity assignments are often based on specific 455  domains, which makes consistent policy deployment difficult across on-premises 456  systems, cloud-based systems, and different compute runtimes. However, this is 457  mitigated by adopting consistent service names across the infrastructure using the 458  concept of a universal identity domain, as recommended in SM-DR11 of [2]. 459  • Having network-level policies alone requires high maintenance due to the continuous 460  changes to their location parameters as containers and virtualized workloads are 461  frequently migrated for availability and performance reasons (e.g., migration to different 462  VMs or  to a different pod in containerized applications). 463  Network-oriented policies cannot be completely eliminated given current compliance 464  requirements and regulations. However, relaxing requirements at the network level in exchange 465  for introducing more descriptive policy at the identity level could lead to an improved overall 466  security posture compared to network-oriented security alone.  467  Multi-Tier Policies for Enterprise ZTA 468  A successful enterprise ZTA requires multi-tier policies: 469  • Network-tier policies – Allowed communication between enterprise network elements 470  (e.g., firewall rules, which are relatively static) 471  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  10  • Identity-tier policies – Access scope for services and resources based on service and user 472  identities (e.g., dynamic application-to-application communication rules based on 473  identities through a dedicated infrastructure layer, such as user identity provided by an 474  enterprise IAM provider and service identity provided by a standard-based Secure 475  Production Identity Framework for Everyone [SPIFFE] server [4]) 476  Multi-tier policies can be implemented realistically and are non-disruptive to current compliance 477  practices. Other tiers of policy also exist. For example, in the context of the service mesh, there 478  are “application-tier” policies, which apply to the application payload itself. These include 479  coarse-grained WAF rules, fine-grained rules like Spring Cloud Gateway payload validation, and 480  the validation of request semantics via tools like the Open Policy Agent (OPA). Many can even 481  be enforced by a service mesh, but those policies are beyond the scope of this document. 482  The difficulty with having all network-tier policies is that policies expressed through firewall 483  rules have to be continuously changed, depending on the application pair behind those firewalls. 484  The flexibility in having multi-tier policies is that network-tier policies can be relatively static 485  while identity-tier policies higher up in the stack (e.g., service to service) can be dynamic, as 486  illustrated in Fig. 2.  487  488  Fig. 2. Flexibility provided by multi-tier policies 489  Implementing identity-tier policies is also a more agile process that allows for new policy 490  capabilities, such as writing policy in terms of identity and application-level action and verb. For 491  example, a network-tier policy would describe the subnets that contain application instances of 492  the client being allowed to call the subnet on a specific port. In contrast, an identity-tier policy 493  would allow the client application identity to communicate with the server application identity 494  via HTTPS on port 443 and execute only the GET method on the /public path. The full range of 495  policies that an enterprise ZTA implemented via a service mesh can enable is outlined in [2] and 496  [3]. 497  Implementing multi-tier policies by relaxing network-tier policies (e.g., by allowing 498  communication across a set of gateways) while introducing identity-tier policies with advanced 499  layer seven controls results in a better overall security posture than either a purely identity-tier or 500  purely network-tier approach.  501  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  11  Implementing Multi-Tier Policies for ZTA for Cloud-Native Application 502  Environments 503  This section will consider the implementation of multi-tier policies for realizing an enterprise 504  ZTA using a reference enterprise scenario in which an enterprise hosts microservices 505  applications in several clusters. Each cluster is serviced with a service mesh instance, and 506  clusters are spread out both on-premises and in multiple clouds.  507  Section 4.1 outlines a simple application infrastructure scenario, and Section 4.2 presents a 508  sample set of associated policies that are relevant for that context. Section 4.3 shows how the 509  same set of policies can be defined and deployed for a realistic application infrastructure scenario 510  in which the incoming traffic comes through a DMZ. 511  Reference Application Infrastructure Scenario 512  Consider an application infrastructure of an enterprise where the application topology spans a 513  cloud and on-premises environment. The applications are implemented as microservices with a 514  service mesh instance for each cluster. Hence, a sidecar proxy is associated with each service. At 515  the entry and exit points of each cluster are ingress and egress gateways, respectively. The same 516  data plane (e.g., open-source Envoy) can be used to implement both the sidecar proxy and the 517  transit gateways. 518  Next, consider establishing policies for a scenario that involves two services – Service 1 and 519  Service 2 – that reside in clusters in a cloud and on-premises, respectively. Service 1 in the cloud 520  cluster can interact with services outside of the cluster through an egress gateway. Similarly, all 521  services that attempt to access Service 2 from outside of the cluster have to go through an ingress 522  gateway. All traffic coming out of the cloud has to go through an outbound firewall, and all 523  traffic coming on-premises have to come through an inbound firewall. The paired egress-ingress 524  proxies and the firewall rules that allow them connectivity are collectively referred to as a 525  “transit gateway.” The network location for the two services are each designated by a subnet 526  address. The application topology and policies described so far is shown in Fig. 3. 527  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  12  528  Fig. 3. Multi-tier Policies for a Hybrid Application Environment 529  Role of the Service Mesh in Policy Deployment, Enforcement, and Updates 530  The service mesh has a unique role within the overall policy life cycle activities of policy 531  definition, deployment, enforcement, and update. As already stated, the service mesh is a 532  dedicated infrastructure that provides all application services, including security controls like 533  secure communication and application-level access control. These services are only possible if 534  there are also policies to enforce them during application runtime.  535  Based on the discussion of the control plane in previous sections, it should clear that this 536  component of the service mesh provides access to the interfaces of various policy definition tools 537  through which policies can be defined and updated. Thus, the control plane of the service mesh 538  acts as the policy administration point, while the underlying policy tools become the policy 539  decision point. In addition, the control plane also enables those policies to be distributed to the 540  various proxies described in the previous section. Once distributed, these proxies intercept all 541  traffic in and out of the applications, where it acts as a universal policy enforcement point. This 542  allows the service mesh – which centrally manages a fleet of the applications’ proxies – to 543  become the modern cloud-native security kernel [3]. 544  The proxies – especially the sidecars – can enforce security and traffic policies and generate 545  telemetry data to allow operators to close the loop on policy changes by authoring a change, 546  observing its effect on the runtime, and making additional changes as needed in a real-time 547  feedback control loop. In other words, the mesh provides the needed capabilities to implement 548  the runtime controls and achieve a zero trust posture. 549  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  13  Policy Deployment for Reference Application Infrastructure 550  Connectivity (between network elements) and access policies (between service instances) are 551  network-tier policies and identity-tier policies, respectively. 552  Consider the following example set of policies that contain a combination of network-tier and 553  identity-tier policies. Network-tier policies can be further categorized into coarse-grained and 554  fine-grained policies. 555  • Coarse-grained network-tier policies – These perimeter control policies are informally 556  called firewall rules and are mostly static as they specify: 557  o The network location of the egress gateway from which the network edge element 558  at the exit point of a cloud network (e.g., outbound firewall, such as the one at the 559  edge of a cloud) can receive traffic  560  o The network location of the ingress gateway to which the incoming traffic that 561  lands at the entry point of the on-premises network edge (e.g., inbound firewall at 562  the entry point to an on-premises network) should be routed: 563  Firewall: allow 10.100.2.3/30 15443 to 10.1.2.3/30:15443 564  • Fine-grained network-tier policies – These microsegmentation policies specify the 565  pathways for traffic flowing into and out of the services located within the network 566  subnets at the cloud location or on-premises location. 567  o Specify the path on which the outbound traffic from a service or an application 568  (e.g., app 1) can flow. The elements in the path that are specified include the 569  egress gateway at the edge of the cluster and, subsequently, the outbound firewall 570  for the network (cloud network in this example). 571  o Specify the path for the inbound traffic into the on-premises network to reach the 572  target application. The elements in the path start from the inbound firewall at the 573  edge of the on-premises network to the ingress gateway in an on-premises cluster 574  to the network subnet where the target service is located. 575  o Notably, they specify how traffic can flow “east-west”(i.e., inside of the 576  perimeter). This is in contrast to coarse-grained policies, which specify how 577  traffic can flow “north-south” (i.e., from an external to internal network). 578  • Identity-tier policies – These are also called mesh-level policies as they are deployed and 579  enforced at the data plane of the service mesh in the reference platform. In the context of 580  the application infrastructure and the example policies that cover traffic flows from 581  Service 1 to Service 2, these are: 582  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  14  selector:  matchLabels:  app: service-2  action: ALLOW  rules:  - from:  - source:  principals: [\"cluster.local/ns/service-1/sa/service-1\"]  to:  - operation:  ports: [\"443\"]  methods: [\"GET\"]  paths: [\"/public\"]  Fig. 4. An Istio Authorization Policy that allows Service 1 to Service 2 on port 443 but only allows it to 583  execute the GET HTTP verb on the “/public” path 584  This simple example shows some of the advanced capabilities that identity-tier policies can 585  achieve by limiting access based on the application request context. Specifically, this policy 586  limits the application actions to a single HTTP verb on a specific path, but much more 587  sophisticated policy can be implemented as well. See [2] and [3] for detailed overviews. 588  Another Application Infrastructure Scenario 589  Consider another common application scenario in which there is an internal (i.e., within a cluster 590  in the enterprise data center) three-tier application. This application is accessed from outside 591  (through a mobile app or website) through a DMZ. This scenario consists of edge gateways 592  present in the DMZ – an ingress gateway and an egress gateway at the entrance and exit points to 593  and from the data center with firewalls at either side of the gateways. Each of the services that 594  represent the front end and back end (application logic) of the three-tier application have to have 595  a sidecar proxy to enforce policies that pertain to inter-service call requests. This scenario 596  requires the definition and deployment of a combination of network-tier and identity-tier policies 597  that span the various types of gateways and the sidecar proxies. Deploying policies at these 598  multiple locations requires an enterprise-level infrastructure that plays the role of a global control 599  plane, as described in Section 2.1. This is designated as a central coordination infrastructure, as 600  shown in Fig. 5. 601  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  15  602  Fig. 5. Policy Deployment for a Three-tier Application 603  Functional Roles of Application Infrastructure Elements in Enforcing 604  Policies 605  This section will show the functionality of each of the application infrastructure elements 606  involved in the policies (e.g., firewalls, gateways, sidecar, transit, and edge proxies) in detail. 607  Since the functionality of firewalls that take part in this context for coarse network-tier policies 608  are well known, this section will focus on the functionality of gateways that take part in fine-609  grained and identity-tier policies: 610  • Sidecar – Beside each application instance to intercept all traffic into and out of the 611  application and handles “east-west” internal communication between services in the 612  infrastructure. This is the primary use case of the service mesh. 613  • Ingress gateway – Controls how applications in the cluster are exposed outside (e.g., 614  managing what names, certificates, ports, protocols, and application endpoints are served 615  to the world outside of the cluster). Think of this as the service mesh control plane that 616  manages a traditional reverse proxy similar to Spring Cloud Gateway, NGINX, or 617  HAProxy. 618  • Egress gateway – Controls how applications in the cluster communicate with the outside 619  world. This can be used for traditional egress filtering and logging, like a Squid proxy, 620  but can also implement identity-based policy for what is allowed to call out and perform 621  credential exchange, or presenting a set of credentials (e.g., an mTLS certificate for a 622  partner API), on behalf of the application so that the application does not need to handle 623  them (e.g., communicating via mTLS with the partner API). Think of this as a next-624  generation identity-aware Squid proxy. 625  • Edge gateway – Accepts external traffic before the ingress gateway and performs fine-626  grained load balancing across clusters or sites. It is used to terminate external traffic, 627  enable infrastructure-level failover, deploy blue-green clusters, and facilitate ingress-628  gateway-per-team deployments without requiring each of those teams to have publicly 629  routable ingress gateways. Think of this as a modern software-based local traffic 630  manager, like F5, that can apply policy per-request rather than per-connection. 631  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  16  Comparison of Identity-Tier and Network-Tier Policies 632  While network-tier policies are necessary for geographically distributed application 633  infrastructures and for meeting the compliance requirements of regulators, having a combination 634  of network-tier and identity-tier policies allows for some relaxation of the network-tier policies 635  as any unauthorized traffic flow due to an overlooked network element in the path can be 636  addressed through flexible service identity-tier policies. In order to appreciate the need for the 637  coexistence of both policy tiers, it is necessary to know the characteristics of both tiers of 638  policies. This layering of policies, whose strictness can be tuned per organizational needs at each 639  tier, provides agility and operational ease over status quo perimeter-based models while 640  enhancing the overall security posture of the organization. 641  4.6.1. Approaches for Deployment and the Limitations of Network-Tier Policies 642  In this approach, applications and service resources with similar security requirements are 643  grouped into a unique segment, and firewall rules are created to block or allow communication 644  with each group or segment [5]. The segments are created using network layer abstractions (e.g., 645  VLAN IDs or some other tagging approaches), while policies are defined using network address 646  constructs (e.g., IP addresses and ports). Policies apply to subnets (e.g., VLANs) rather than to 647  individual hosts. The assignment of applications to a particular segment can be based on 648  different criteria, such as “all applications with similar security requirements” or “all tiers (web 649  front end, application logic servers, and database servers) associated with a particular application 650  should run in a single segment.” 651  Each segment is protected by gateway devices, such as intelligent switches and routers or next-652  generation firewalls, which should have the capacity to react and adapt in response to the threats 653  and changes in the application workflows. Segmentation gateways monitor traffic, stop threats, 654  and enforce granular access across east-west traffic (rarely for north-south traffic) within on-655  premises data centers or cloud regions. The main difficulty with this approach is in mapping the 656  applications’ security requirements-based segments to corresponding network segments. Another 657  difficulty is change management. The mapping between applications and network identities that 658  are being statically maintained has to continuously be kept in sync with the operational scenario 659  in which the application’s network locations are continuously changing due to performance and 660  security. 661  More modern cloud-native deployments that leverage techniques like container network 662  interface-driven network policy are good improvements because they provide identity-tier style 663  policies (i.e., policy in terms of identities and non-network-oriented nouns) while implementing 664  that policy at the network layer (e.g., via eBPF policy or BGP propagation rules). These are a 665  strong upgrade from traditional microsegmentation because they tend to result in finer-grained 666  policies that are easier for the organization to manage over time. However, they typically lack 667  the ability to apply policy per request in the context of the application, which is needed to 668  achieve identity-based segmentation. 669  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  17  4.6.2. Prerequisites for the Deployment of Identity-Tier Policies 670  Identity-tier policies use contextual, application-driven identifiers (e.g., “order processing front-671  end service can communicate with inventory back-end service”) instead of network parameters 672  (e.g., “permit calls from 192.168.10.x subnet to 10.0.0.31”). The identifiers assigned to services 673  at runtime are cryptographic identities, which are used for mutual authentication and 674  authorization during each service request and response. 675  Deploying identity-tier policies requires a standardized infrastructure for creating, issuing, and 676  maintaining tamper-proof service identities. Some of the components of this infrastructure are 677  outlined below and are also discussed in [5]: 678  • Creation of application identity: The fundamental requirement to enable this is the 679  assignment of a unique identity to each application or service, just like how each user 680  carries a unique identity (e.g., userid). Prior to the era of cloud-based applications, 681  application requests were validated based on the IP subnet or IP address from which they 682  originated. Since ubiquitous access and multi-clouds have eliminated the concept of 683  network perimeters, authentication and authorization based on those parameters are 684  neither feasible nor scalable. Further, the presence of proxies, network address 685  translations, dynamic infrastructures (e.g., migration of applications between VMs), and 686  load balancers make it impossible for the called application to know the IP address of the 687  calling application in order to make authentication or authorization decisions. A unique 688  application identity is required. 689  • Establishment of trust in application identity: The created application (workload or 690  service) identity should not be subject to spoofing and should be continuously verifiable. 691  An example of workload identity is a SPIFFE ID [4], which is a string that uniquely and 692  specifically identifies a workload and is encoded as a Uniform Resource Identifier (URI). 693  The SPIFFE ID is carried in a cryptographically verifiable document called a SPIFFE 694  Verifiable Identity Document (SVID). SPIFFE supports multiple SVID formats, but the 695  most commonly used is an X.509 certificate. 696  • Discovery of application resources: There should be a robust and secure method for 697  discovering all of the application dependencies consumed over the network (e.g., 698  services, SaaS endpoints, network appliances, etc.). This capability is enabled through an 699  authenticated service registry. 700  These allowable flows can be based on either (a) the structure of the application (i.e., “the front 701  end of application 1 can call the back end of application 1”) or (b) a legitimate business 702  transaction (e.g., “order processing application can call the shipping application”). Often, 703  organizations do not know all of the allowable service requests in their infrastructure. However, 704  the observability capabilities of the infrastructure (e.g., the metrics provided by the service mesh) 705  can be leveraged to build a view of “requests made today.” From that view, the organization can 706  begin to create fine-grained policies for allowable service requests. Utilizing this observe-and-707  lock-down methodology builds the organizational processes required to maintain the life cycle of 708  these policies over time. 709  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  18  4.6.3. Advantages of Identity-Tier Policies 710  Policies based on service and application identities do not use any infrastructure-related variables 711  (e.g., IP addresses, subnets), so they are environment-agnostic and provide the freedom for the 712  services and applications to be migrated to different environments and still maintain the same 713  policies. In other words, there can be a consistent set of policies across cloud providers and on-714  premises because the policy follows the application rather than the network. 715  • Identity-tier policies enable the automated testing of policies. Policies that are 716  independent of infrastructure can be tested by merely exercising the application and 717  observing the outcomes (e.g., trace the sequence of service calls and requests or 718  responses instead of configuring the infrastructure correctly for test runs). 719  • Identity-tier policies enable “policy as code” (PaC). With the availability of tools for the 720  declarative specification of policies through PaC, identity-tier policies can be defined and 721  implemented by incorporating the code into automated workflows, such as CI/CD 722  pipelines. 723  • Identity-tier policies enable granular (fine-grained) access control by providing visibility 724  into application call sequences/interdependencies and data flows through request-level 725  tracking, which enables the enforcement of security policies for application traffic that is 726  both north-south and east-west, irrespective of the environment (e.g., corporate data 727  center or cloud infrastructure). 728  Additional advantages include:  729  • Write once, enforce everywhere – This means that policy can span environments and 730  topologies (i.e., write a policy once, and enforce it everywhere) rather than bespoke 731  policies per environment. 732  • Human-readable primitives – The written policies use human-understandable primitives 733  (e.g., “service A can call service B”) rather than network-oriented primitives (e.g., 734  “10.1.2.3/30 is allowed to call 10.100.2.3/30 on port 8080”). This context is critical since 735  the lack of context for rules is a key reason for the lack of agility around traditional 736  network policy. 737  • Contextual intent is codified in a single policy – There is a single policy, not a set of 738  policies that need to be pieced together to understand their intent. A human can read a 739  policy like “the front-end service is allowed to call ‘GET /foo’ on the back-end service” 740  and understand the access that the policy intends to convey even if, for example, the front 741  end is deployed in the cloud and the back end is deployed on-premises. It is significantly 742  harder to read a set of network peering and firewall rules that allow communication 743  across the DMZ for a set of subnets and understand the access that the policy intends to 744  convey. In turn, this means it is harder to write the wrong policy and easier for a human 745  to understand when a policy is incorrect. 746  Identity-tier policies enable only valid network traffic between the various component services of 747  the application due to the mutual authentication and authorization of the service identities, thus 748  enabling the goals of ZTNA to be met. 749  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  19  Summary and Conclusions 750  This document provides guidance for realizing a ZTA for cloud-native application platforms 751  (microservices with a service mesh infrastructure) in the context of an enterprise environment in 752  which applications are hosted in multi-cluster and multi-cloud deployments. A ZTA consists of 753  deployment artifacts that enforce zero trust principles, which is only possible with robust, 754  flexible, scalable, and granular policies that cover all enterprise resources. A policy framework 755  that consists of network-tier and identity-tier policies to meet these goals has been proposed in 756  this document. 757  The artifacts needed for the definition, deployment, and enforcement of these policies have been 758  discussed along with examples of network-tier policies and identity-tier policies. The 759  applicability of these policies in modern enterprise application infrastructures is also illustrated. 760  Finally, the policies that belong to the two tiers are compared in terms of their advantages and 761  limitations, and the critical role of identity-tier policies for realizing a ZTA in the context of 762  modern cloud-native application infrastructures is emphasized. 763  764  NIST SP 800-207A ipd (Initial Public Draft)  ZTA Model for Access Control  April 2023  in Cloud-Native Application  20  References 765  [1] Rose S, Borchert O, Mitchell S, Connelly S (2020) Zero Trust Architecture. (National 766  Institute of Standards and Technology, Gaithersburg, MD), NIST Special Publication (SP) 767  NIST SP 800-207. https://doi.org/10.6028/NIST.SP.800-207 768  [2] Chandramouli R, Butcher Z (2020) Building Secure Microservices-based Applications 769  Using Service-Mesh Architecture. (National Institute of Standards and Technology, 770  Gaithersburg, MD), NIST Special Publication (SP) NIST SP 800-204A. 771  https://doi.org/10.6028/NIST.SP.800-204A 772  [3] Chandramouli R, Butcher Z, Aradhna C (2021) Attribute-based Access Control for 773  Microservices-based Applications using a Service Mesh. (National Institute of Standards 774  and Technology, Gaithersburg, MD), NIST Special Publication (SP) NIST SP 800-204B. 775  https://doi.org/10.6028/NIST.SP.800-204B 776  [4] SPIFFE (2022) SPIFFE Concepts. Available at https://spiffe.io/docs/latest/spiffe-777  about/spiffe-concepts/ 778  [5] Chandramouli R (2022) Guide to a Secure Enterprise Network Landscape. (National 779  Institute of Standards and Technology, Gaithersburg, MD), NIST Special Publication (SP) 780  NIST SP 800-215. https://doi.org/10.6028/NIST.SP.800-215 781  782  https://doi.org/10.6028/NIST.SP.800-207 https://doi.org/10.6028/NIST.SP.800-204A https://doi.org/10.6028/NIST.SP.800-204B https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/ https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/ https://doi.org/10.6028/NIST.SP.800-215  Executive Summary  1. Introduction  1.1. Background – Zero Trust Principles and Zero Trust Architecture  1.2. Relationship to Other NIST Guidance Documents  1.3. Scope  1.4. Target Audience  1.5. Organization of This Document  2. The Enterprise Cloud-Native Platform and its Components  2.1. Enterprise Infrastructure Layer  3. Designing a Policy Framework for ZTA for Cloud-Native Application Environments  3.1. Functional Components of Identity-Based Segmentation Policies for ZTA  3.2. Shortcomings of Identity-Based Segmentation Policies for Enterprise ZTA  3.3. Multi-Tier Policies for Enterprise ZTA  4. Implementing Multi-Tier Policies for ZTA for Cloud-Native Application Environments  4.1. Reference Application Infrastructure Scenario  4.2. Role of the Service Mesh in Policy Deployment, Enforcement, and Updates  4.3. Policy Deployment for Reference Application Infrastructure  4.4. Another Application Infrastructure Scenario  4.5. Functional Roles of Application Infrastructure Elements in Enforcing Policies  4.6. Comparison of Identity-Tier and Network-Tier Policies  4.6.1. Approaches for Deployment and the Limitations of Network-Tier Policies  4.6.2. Prerequisites for the Deployment of Identity-Tier Policies  4.6.3. Advantages of Identity-Tier Policies  5. Summary and Conclusions  References",
    "abstract": ""
}